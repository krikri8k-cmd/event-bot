name: 🚀 Deploy Event-Bot with Automation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🧹 Lint with ruff
      run: |
        pip install ruff
        ruff check .
        ruff format --check .
        
    - name: 🧪 Test imports
      run: |
        python -c "
        try:
            from modern_scheduler import ModernEventScheduler
            from start_production import main
            from sources.baliforum import fetch
            from utils.unified_events_service import UnifiedEventsService
            print('✅ All imports successful')
        except Exception as e:
            print(f'❌ Import error: {e}')
            exit(1)
        "
        
    - name: 🎯 Set environment variables
      run: |
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
        echo "TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
        echo "MOMENTS_ENABLE=0" >> $GITHUB_ENV
        echo "AI_PARSE_ENABLE=1" >> $GITHUB_ENV
        echo "ENABLE_BALIFORUM=1" >> $GITHUB_ENV
        echo "ENABLE_KUDAGO=1" >> $GITHUB_ENV
        
        # Debug: Check if DATABASE_URL is set
        echo "🔍 Debug: Checking environment variables..."
        if [ -n "$DATABASE_URL" ]; then
          echo "✅ DATABASE_URL is set (length: ${#DATABASE_URL})"
        else
          echo "❌ DATABASE_URL is NOT set"
        fi
        
    - name: 🎯 Validate configuration
      run: |
        python -c "
        from config import load_settings
        
        # Проверяем что конфиг загружается
        try:
            settings = load_settings()
            print('✅ Configuration loaded successfully')
            print(f'   BaliForum enabled: {settings.enable_baliforum}')
            print(f'   KudaGo enabled: {settings.kudago_enabled}')
            print(f'   AI parsing enabled: {settings.ai_parse_enable}')
            print(f'   Moments enabled: {settings.moments_enable}')
            print('   (Using GitHub Secrets)')
        except Exception as e:
            print(f'❌ Config error: {e}')
            exit(1)
        "
        
    - name: 🗄️ Check database connection
      run: |
        python -c "
        from database import engine
        from config import load_settings
        
        print('🗄️ Checking database connection...')
        try:
            # Проверяем подключение к базе
            with engine.connect() as conn:
                result = conn.execute('SELECT 1')
                print('✅ Database connection successful')
                
                # Проверяем, есть ли таблицы
                result = conn.execute(\"SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'\")
                tables = [row[0] for row in result]
                print(f'📊 Found {len(tables)} tables: {tables[:5]}...')
                
        except Exception as e:
            print(f'❌ Database connection error: {e}')
            exit(1)
        "
        
    - name: 📊 Show deployment info
      run: |
        echo "🎉 === DEPLOYMENT READY ==="
        echo "📋 What will be deployed:"
        echo "   🤖 Telegram Bot"
        echo "   🚀 Automation Scheduler (every 12 hours)"
        echo "   🧹 Auto-cleanup (every 6 hours)"
        echo "   📊 Correct architecture (events_parser → events)"
        echo ""
        echo "⏰ Automation schedule:"
        echo "   🌅 Morning parsing (~08:00)"
        echo "   🌙 Evening parsing (~20:00)"
        echo ""
        echo "✅ Code is ready for production deployment!"
        
    - name: 🏷️ Create release tag
      if: github.ref == 'refs/heads/main'
      run: |
        # Создаем тег с временной меткой
        TAG="v$(date +%Y%m%d-%H%M%S)-automation"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a $TAG -m "🚀 Production deployment with automation system"
        echo "Created tag: $TAG"
        
    - name: 📝 Generate deployment summary
      run: |
        echo "# 🎯 Event-Bot Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## ✅ Successfully Deployed Features:" >> $GITHUB_STEP_SUMMARY
        echo "- 🤖 **Telegram Bot** - User interaction" >> $GITHUB_STEP_SUMMARY
        echo "- 🚀 **Automation System** - Every 12 hours parsing" >> $GITHUB_STEP_SUMMARY
        echo "- 🧹 **Auto-cleanup** - Every 6 hours" >> $GITHUB_STEP_SUMMARY
        echo "- 📊 **Correct Architecture** - events_parser → events" >> $GITHUB_STEP_SUMMARY
        echo "- 🌴 **BaliForum Parser** - Real events from baliforum.ru" >> $GITHUB_STEP_SUMMARY
        echo "- 🤖 **AI Parser** - Smart event generation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🎯 Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Deploy to your hosting platform (Railway, Heroku, etc.)" >> $GITHUB_STEP_SUMMARY
        echo "2. Set environment variables" >> $GITHUB_STEP_SUMMARY
        echo "3. Run: \`python start_production.py\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📚 Documentation:" >> $GITHUB_STEP_SUMMARY
        echo "- [Deployment Guide](./DEPLOY_WITH_AUTOMATION.md)" >> $GITHUB_STEP_SUMMARY
        echo "- [Modern Scheduler](./modern_scheduler.py)" >> $GITHUB_STEP_SUMMARY
        echo "- [Production Starter](./start_production.py)" >> $GITHUB_STEP_SUMMARY