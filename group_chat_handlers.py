#!/usr/bin/env python3
"""
–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Å–æ–±—ã—Ç–∏–π –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö
–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–¥–µ–ª–µ–Ω –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
"""

import logging
from datetime import datetime

from aiogram import F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ForceReply

from utils.community_events_service import CommunityEventsService

logger = logging.getLogger(__name__)

# BOT_ID –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
BOT_ID = None


class GroupCreate(StatesGroup):
    """FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö"""

    waiting_for_title = State()
    waiting_for_datetime = State()
    waiting_for_city = State()
    waiting_for_location = State()
    waiting_for_description = State()


async def group_create_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ"""
    logger.info(
        f"üî• group_create_start: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ —á–∞—Ç–µ {message.chat.id}"
    )

    await state.set_state(GroupCreate.waiting_for_title)
    await message.answer(
        "‚úçÔ∏è **–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:**", parse_mode="Markdown", reply_markup=ForceReply(selective=True)
    )


async def group_title_step(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ"""
    logger.info(
        f"üî• group_title_step: –ø–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ '{message.text}' "
        f"–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ —á–∞—Ç–µ {message.chat.id} "
        f"thread_id={message.message_thread_id}"
    )

    if not message.text:
        await message.answer(
            "‚ùå **–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!**\n\n" "‚úçÔ∏è **–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:**",
            parse_mode="Markdown",
            reply_markup=ForceReply(selective=True),
        )
        return

    title = message.text.strip()
    await state.update_data(
        title=title, group_id=message.chat.id, thread_id=message.message_thread_id, creator_id=message.from_user.id
    )
    await state.set_state(GroupCreate.waiting_for_date)

    await message.answer(
        f"**–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:** *{title}* ‚úÖ\n\n" "üìÖ **–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É** (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10.10.2025 18:00):",
        parse_mode="Markdown",
        reply_markup=ForceReply(selective=True),
    )


async def group_datetime_step(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ"""
    logger.info(
        f"üî• group_datetime_step: –ø–æ–ª—É—á–µ–Ω–∞ –¥–∞—Ç–∞ '{message.text}' "
        f"–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ —á–∞—Ç–µ {message.chat.id}"
    )

    if not message.text:
        await message.answer(
            "‚ùå **–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!**\n\n"
            "üìÖ **–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è** (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10.10.2025 18:00):",
            parse_mode="Markdown",
            reply_markup=ForceReply(selective=True),
        )
        return

    datetime_text = message.text.strip()

    import re

    if not re.match(r"^\d{1,2}\.\d{1,2}\.\d{4}\s+\d{1,2}:\d{2}$", datetime_text):
        await message.answer(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!**\n\n"
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ **–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú**\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 10.10.2025 18:00",
            parse_mode="Markdown",
            reply_markup=ForceReply(selective=True),
        )
        return

    await state.update_data(datetime=datetime_text)
    await state.set_state(GroupCreate.waiting_for_city)

    await message.answer(
        f"**–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:** {datetime_text} ‚úÖ\n\n" "üèôÔ∏è **–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥** (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞):",
        parse_mode="Markdown",
        reply_markup=ForceReply(selective=True),
    )


async def group_city_step(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞ —Å–æ–±—ã—Ç–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ"""
    logger.info(
        f"üî• group_city_step: –ø–æ–ª—É—á–µ–Ω –≥–æ—Ä–æ–¥ '{message.text}' "
        f"–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ —á–∞—Ç–µ {message.chat.id}"
    )

    if not message.text:
        await message.answer(
            "‚ùå **–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!**\n\n" "üèôÔ∏è **–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥** (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞):",
            parse_mode="Markdown",
            reply_markup=ForceReply(selective=True),
        )
        return

    city = message.text.strip()
    await state.update_data(city=city)
    await state.set_state(GroupCreate.waiting_for_location)

    await message.answer(
        f"**–ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:** {city} ‚úÖ\n\n" "üìç **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ—Å—Ç–æ** (Google Maps –∏–ª–∏ –∞–¥—Ä–µ—Å):",
        parse_mode="Markdown",
        reply_markup=ForceReply(selective=True),
    )


async def group_location_step(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ"""
    logger.info(
        f"üî• group_location_step: –ø–æ–ª—É—á–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è '{message.text}' "
        f"–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ —á–∞—Ç–µ {message.chat.id}"
    )

    if not message.text:
        await message.answer(
            "‚ùå **–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!**\n\n"
            "üìç **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ—Å—Ç–æ** (Google Maps –∏–ª–∏ –∞–¥—Ä–µ—Å):",
            parse_mode="Markdown",
            reply_markup=ForceReply(selective=True),
        )
        return

    location = message.text.strip()
    await state.update_data(location=location)
    await state.set_state(GroupCreate.waiting_for_description)

    await message.answer(
        f"**–õ–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:** {location} ‚úÖ\n\n" "üìù **–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:**",
        parse_mode="Markdown",
        reply_markup=ForceReply(selective=True),
    )


async def group_finish(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ"""
    logger.info(f"üî• group_finish: –ø–æ–ª—É—á–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ —á–∞—Ç–µ {message.chat.id}")

    if not message.text:
        await message.answer(
            "‚ùå **–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!**\n\n" "üìù **–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:**",
            parse_mode="Markdown",
            reply_markup=ForceReply(selective=True),
        )
        return

    description = message.text.strip()
    data = await state.update_data(description=description)

    try:
        datetime_str = data["datetime"]
        try:
            parsed_datetime = datetime.strptime(datetime_str, "%d.%m.%Y %H:%M")
        except ValueError:
            await message.answer("‚ùå **–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã!** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", parse_mode="Markdown")
            return

        service = CommunityEventsService()
        event_id = service.create_community_event(
            group_id=data["group_id"],
            creator_id=data["creator_id"],
            title=data["title"],
            date=parsed_datetime,
            description=description,
            city=data["city"],
            location_name=data["location"],
        )

        logger.info(f"üî• group_finish: —Å–æ–±—ã—Ç–∏–µ {event_id} —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")

        await message.answer(
            f"‚úÖ **–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!**\n\n"
            f"**üìå {data['title']}**\n"
            f"üìÖ {data['datetime']}\n"
            f"üèôÔ∏è {data['city']}\n"
            f"üìç {data['location']}\n"
            f"üìù {description}\n\n"
            f"*–°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{message.from_user.username or message.from_user.first_name}*",
            parse_mode="Markdown",
        )

    except Exception as e:
        logger.error(f"üî• group_finish: –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        await message.answer("‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", parse_mode="Markdown")

    await state.clear()


def register_group_handlers(dp, bot_id: int):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
    –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤!
    """
    global BOT_ID
    BOT_ID = bot_id

    logger.info(f"üî• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤, BOT_ID={BOT_ID}")

    # –ö–æ–º–∞–Ω–¥–∞ /create —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø
    dp.message.register(group_create_start, Command("create"), F.chat.type.in_({"group", "supergroup"}))

    # FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –Ω–∞ –æ—Ç–≤–µ—Ç—ã –±–æ—Ç—É
    dp.message.register(
        group_title_step,
        GroupCreate.waiting_for_title,
        F.chat.type.in_({"group", "supergroup"}),
        F.reply_to_message,
        F.reply_to_message.from_user.id == BOT_ID,
    )

    dp.message.register(
        group_datetime_step,
        GroupCreate.waiting_for_datetime,
        F.chat.type.in_({"group", "supergroup"}),
        F.reply_to_message,
        F.reply_to_message.from_user.id == BOT_ID,
    )

    dp.message.register(
        group_city_step,
        GroupCreate.waiting_for_city,
        F.chat.type.in_({"group", "supergroup"}),
        F.reply_to_message,
        F.reply_to_message.from_user.id == BOT_ID,
    )

    dp.message.register(
        group_location_step,
        GroupCreate.waiting_for_location,
        F.chat.type.in_({"group", "supergroup"}),
        F.reply_to_message,
        F.reply_to_message.from_user.id == BOT_ID,
    )

    dp.message.register(
        group_finish,
        GroupCreate.waiting_for_description,
        F.chat.type.in_({"group", "supergroup"}),
        F.reply_to_message,
        F.reply_to_message.from_user.id == BOT_ID,
    )

    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
