#!/usr/bin/env python3
"""
–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ (EventAroundBot - –≤–µ—Ä—Å–∏—è –¥–ª—è —á–∞—Ç–æ–≤)

–í–ê–ñ–ù–û: –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞!
- –†–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û –≤ group/supergroup —á–∞—Ç–∞—Ö
- –ù–ï –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
- –ù–ï –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
- –°–≤—è–∑—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ deep-link
"""

import asyncio
import logging
from datetime import datetime

from aiogram import Bot, F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
from sqlalchemy.ext.asyncio import AsyncSession

from database import CommunityEvent
from utils.messaging_utils import delete_all_tracked, ensure_panel, is_chat_admin

logger = logging.getLogger(__name__)

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===

# Username –±–æ—Ç–∞ –¥–ª—è deep-links (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
MAIN_BOT_USERNAME = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ set_bot_username()

# === –†–û–£–¢–ï–† ===

group_router = Router(name="group_router")


# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===


def set_bot_username(username: str):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç username –±–æ—Ç–∞ –¥–ª—è deep-links"""
    global MAIN_BOT_USERNAME
    MAIN_BOT_USERNAME = username
    logger.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –±–æ—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞: {username}")


# –ñ—ë—Å—Ç–∫–∞—è –∏–∑–æ–ª—è—Ü–∏—è: —Ä–æ—É—Ç–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û –≤ –≥—Ä—É–ø–ø–∞—Ö
group_router.message.filter(F.chat.type.in_({"group", "supergroup"}))
group_router.callback_query.filter(F.message.chat.type.in_({"group", "supergroup"}))

# === –¢–ï–ö–°–¢–´ –ò –ö–õ–ê–í–ò–ê–¢–£–†–´ ===

PANEL_TEXT = (
    "üëã **–ü—Ä–∏–≤–µ—Ç! –Ø EventAroundBot –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞!**\n\n"
    "üéØ **–Ø —É–º–µ—é:**\n"
    "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —á–∞—Ç–∞\n"
    "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞\n"
    "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ –ø–æ–ª–Ω—ã–π –±–æ—Ç –¥–ª—è –≥–µ–æ–ø–æ–∏—Å–∫–∞\n\n"
    "üí° **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**"
)


def group_kb(chat_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–∞–Ω–µ–ª–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
    username = MAIN_BOT_USERNAME or "EventAroundBot"  # fallback
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", url=f"https://t.me/{username}?start=chat_{chat_id}")],
            [InlineKeyboardButton(text="üìã –°–æ–±—ã—Ç–∏—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞", callback_data="group_list")],
            [InlineKeyboardButton(text="üöÄ –ü–æ–ª–Ω—ã–π –±–æ—Ç (—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π)", url=f"https://t.me/{username}")],
            [InlineKeyboardButton(text="üëÅÔ∏è‚Äçüó®Ô∏è –°–ø—Ä—è—Ç–∞—Ç—å –±–æ—Ç–∞", callback_data="group_hide_confirm")],
        ]
    )


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===


@group_router.message(Command("start"))
async def group_start(message: Message, bot: Bot, session: AsyncSession):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ - —Å–æ–∑–¥–∞–µ—Ç/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø–∞–Ω–µ–ª—å-–ø–æ—Å—Ç"""
    chat_id = message.chat.id
    logger.info(f"üî• group_start: –∫–æ–º–∞–Ω–¥–∞ /start –≤ –≥—Ä—É–ø–ø–µ {chat_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    try:
        logger.info(f"üî• group_start: –≤—ã–∑—ã–≤–∞–µ–º ensure_panel –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        panel_id = await ensure_panel(bot, session, chat_id=chat_id, text=PANEL_TEXT, kb=group_kb(chat_id))
        logger.info(f"üî• group_start: ensure_panel –≤–µ—Ä–Ω—É–ª message_id={panel_id}")
    except Exception as e:
        logger.error(f"‚ùå group_start: –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏: {e}")
        # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(PANEL_TEXT, reply_markup=group_kb(chat_id), parse_mode="Markdown")


@group_router.callback_query(F.data == "group_list")
async def group_list_events(callback: CallbackQuery, bot: Bot, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π —ç—Ç–æ–≥–æ —á–∞—Ç–∞"""
    chat_id = callback.message.chat.id
    logger.info(f"üî• group_list_events: –∑–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤ —á–∞—Ç–µ {chat_id}")

    await callback.answer()  # –¢–æ—Å—Ç, –Ω–µ —Å–ø–∞–º–∏–º

    try:
        # –ü–æ–ª—É—á–∞–µ–º –±—É–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        from sqlalchemy import select

        stmt = (
            select(CommunityEvent)
            .where(
                CommunityEvent.chat_id == chat_id,
                CommunityEvent.status == "open",
                CommunityEvent.starts_at > datetime.utcnow(),
            )
            .order_by(CommunityEvent.starts_at)
            .limit(10)
        )

        result = await session.execute(stmt)
        events = result.scalars().all()

        if not events:
            text = (
                "üìã **–°–æ–±—ã—Ç–∏—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞**\n\n"
                "üì≠ **0 —Å–æ–±—ã—Ç–∏–π**\n\n"
                "–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.\n\n"
                "üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É **‚ûï –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ**!"
            )
        else:
            text = f"üìã **–°–æ–±—ã—Ç–∏—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞** ({len(events)} —Å–æ–±—ã—Ç–∏–π)\n\n"

            for i, event in enumerate(events, 1):
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                date_str = event.starts_at.strftime("%d.%m.%Y %H:%M")

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Å–ø–∏—Å–æ–∫
                text += f"{i}. **{event.title}**\n"
                text += f"   üìÖ {date_str}\n"

                # –û–ø–∏—Å–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if event.description:
                    desc = event.description[:80] + "..." if len(event.description) > 80 else event.description
                    text += f"   üìù {desc}\n"

                # –ú–µ—Å—Ç–æ (—Å —Å—Å—ã–ª–∫–æ–π –µ—Å–ª–∏ –µ—Å—Ç—å URL)
                if event.location_url:
                    location_name = event.location_name or "–ú–µ—Å—Ç–æ"
                    text += f"   üìç [{location_name}]({event.location_url})\n"
                elif event.location_name:
                    text += f"   üìç {event.location_name}\n"

                # –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä
                if event.organizer_username:
                    text += f"   üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: @{event.organizer_username}\n"

                text += "\n"

            text += "üí° –ù–∞–∂–º–∏—Ç–µ **‚ûï –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ** —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–µ!"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        back_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="group_back_to_panel")],
            ]
        )

        try:
            await callback.message.edit_text(text, reply_markup=back_kb, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        error_text = (
            "üìã **–°–æ–±—ã—Ç–∏—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞**\n\n"
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–±—ã—Ç–∏–π.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        back_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="group_back_to_panel")],
            ]
        )
        try:
            await callback.message.edit_text(error_text, reply_markup=back_kb, parse_mode="Markdown")
        except Exception as edit_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {edit_error}")


@group_router.callback_query(F.data == "group_back_to_panel")
async def group_back_to_panel(callback: CallbackQuery, bot: Bot, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
    chat_id = callback.message.chat.id
    logger.info(f"üî• group_back_to_panel: –≤–æ–∑–≤—Ä–∞—Ç –∫ –ø–∞–Ω–µ–ª–∏ –≤ —á–∞—Ç–µ {chat_id}")

    await callback.answer()

    try:
        await callback.message.edit_text(PANEL_TEXT, reply_markup=group_kb(chat_id), parse_mode="Markdown")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


@group_router.callback_query(F.data == "group_hide_confirm")
async def group_hide_confirm(callback: CallbackQuery, bot: Bot, session: AsyncSession):
    """–ü–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–∫—Ä—ã—Ç–∏—è –±–æ—Ç–∞ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–∞–Ω–µ–ª—å"""
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    logger.info(f"üî• group_hide_confirm: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}")

    await callback.answer("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ...", show_alert=False)

    confirmation_text = (
        "üëÅÔ∏è‚Äçüó®Ô∏è **–°–ø—Ä—è—Ç–∞—Ç—å –±–æ—Ç–∞**\n\n"
        "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–∫—Ä—ã—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞?\n\n"
        "‚ö†Ô∏è **–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:**\n"
        "‚Ä¢ –£–¥–∞–ª–∏—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –∏–∑ —á–∞—Ç–∞\n"
        "‚Ä¢ –û—á–∏—Å—Ç–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π\n"
        "‚Ä¢ –ë–æ—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç\n\n"
        "üí° **–û—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è** - –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —á–∞—Ç –æ—Ç —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
        "–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, —Å–ø—Ä—è—Ç–∞—Ç—å", callback_data=f"group_hide_execute_{chat_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="group_back_to_panel")],
        ]
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–∞–Ω–µ–ª—å –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=callback.message.message_id,
            text=confirmation_text,
            reply_markup=keyboard,
            parse_mode="Markdown",
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏: {e}")
        # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ send_tracked
        from utils.messaging_utils import send_tracked

        try:
            await send_tracked(
                bot,
                session,
                chat_id=chat_id,
                text=confirmation_text,
                reply_markup=keyboard,
                tag="service",
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")


@group_router.callback_query(F.data.startswith("group_hide_execute_"))
async def group_hide_execute(callback: CallbackQuery, bot: Bot, session: AsyncSession):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–∏—è –±–æ—Ç–∞"""
    chat_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    logger.info(f"üî• group_hide_execute: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–∫—Ä—ã—Ç–∏–µ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}")

    await callback.answer("–°–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞‚Ä¶", show_alert=False)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    try:
        bot_member = await bot.get_chat_member(chat_id, bot.id)
        logger.info(
            f"üî• –ü—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}: status={bot_member.status}, "
            f"can_delete_messages={getattr(bot_member, 'can_delete_messages', None)}"
        )

        if bot_member.status != "administrator" or not getattr(bot_member, "can_delete_messages", False):
            logger.warning(f"üö´ –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ {chat_id}")
            await callback.message.edit_text(
                "‚ùå **–û—à–∏–±–∫–∞: –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ**\n\n"
                "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å –ø—Ä–∞–≤–æ–º '–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π'.\n\n"
                "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã:\n"
                "1. –°–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
                "2. –í–∫–ª—é—á–∏—Ç—å –ø—Ä–∞–≤–æ '–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π'\n\n"
                "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏", callback_data="group_back_to_panel")]
                    ]
                ),
            )
            return
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞: {e}")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é delete_all_tracked
    try:
        deleted = await delete_all_tracked(bot, session, chat_id=chat_id)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        deleted = 0

    # –ö–æ—Ä–æ—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ (–Ω–µ —Ç—Ä–µ–∫–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –≥–æ–Ω—è—Ç—å—Å—è –∑–∞ –Ω–∏–º)
    note = await bot.send_message(
        chat_id,
        f"üëÅÔ∏è‚Äçüó®Ô∏è **–ë–æ—Ç —Å–∫—Ä—ã—Ç**\n\n"
        f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {deleted}\n"
        f"–°–æ–±—ã—Ç–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n\n"
        f"–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
        parse_mode="Markdown",
    )

    # –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
    try:
        await asyncio.sleep(8)
        await bot.delete_message(chat_id, note.message_id)
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")


@group_router.callback_query(F.data.startswith("group_delete_event_"))
async def group_delete_event(callback: CallbackQuery, bot: Bot, session: AsyncSession):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if not await is_chat_admin(bot, chat_id, user_id):
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è!", show_alert=True)
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ–±—ã—Ç–∏—è –∏–∑ callback_data
    try:
        event_id = int(callback.data.split("_")[-1])
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–æ–±—ã—Ç–∏—è", show_alert=True)
        return

    logger.info(f"üî• group_delete_event: –∞–¥–º–∏–Ω {user_id} —É–¥–∞–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ {event_id} –≤ —á–∞—Ç–µ {chat_id}")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É —á–∞—Ç—É
        from sqlalchemy import select

        stmt = select(CommunityEvent).where(CommunityEvent.id == event_id, CommunityEvent.chat_id == chat_id)

        result = await session.execute(stmt)
        event = result.scalar_one_or_none()

        if not event:
            await callback.answer("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        session.delete(event)
        await session.commit()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è", show_alert=True)
        return

    await callback.answer("‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ!", show_alert=False)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
    await group_list_events(callback, bot)


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===


def format_event_short(event: CommunityEvent) -> str:
    """–ö—Ä–∞—Ç–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞"""
    date_str = event.starts_at.strftime("%d.%m %H:%M")
    text = f"**{event.title}**\nüìÖ {date_str}"

    if event.location_name:
        text += f"\nüìç {event.location_name}"

    return text
