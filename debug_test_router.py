#!/usr/bin/env python3
"""
–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π
"""

from aiogram import Bot, F, Router
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.filters import Command
from aiogram.types import Message

diag_router = Router()
diag_router.message.filter(F.chat.type.in_({"group", "supergroup"}))


@diag_router.message(Command("__deltest"))
async def __deltest(m: Message, bot: Bot):
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    chat_id = m.chat.id
    bot_id = (await bot.get_me()).id

    # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
    try:
        member = await bot.get_chat_member(chat_id, bot_id)
        status = member.status
        can_delete = getattr(member, "can_delete_messages", None)
        await m.reply(f"üîç –ü—Ä–∞–≤–∞ –±–æ—Ç–∞:\nstatus={status}\ncan_delete_messages={can_delete}")
    except Exception as e:
        await m.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")
        return

    # 2) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ —É–¥–∞–ª–∏—Ç—å
    try:
        test_msg = await bot.send_message(chat_id, "üß™ –¢–ï–°–¢ –£–î–ê–õ–ï–ù–ò–Ø - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏—Å—á–µ–∑–Ω—É—Ç—å")
        await m.reply(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ID: {test_msg.message_id}")

        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ —É–¥–∞–ª—è–µ–º
        import asyncio

        await asyncio.sleep(2)

        try:
            await bot.delete_message(chat_id, test_msg.message_id)
            await m.reply("‚úÖ delete_message() —Å—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ —Å–≤–µ–∂–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
        except TelegramForbiddenError as e:
            await m.reply(f"‚õî –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ: {e}")
        except TelegramBadRequest as e:
            await m.reply(f"‚ö†Ô∏è BadRequest –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        except Exception as e:
            await m.reply(f"‚ùó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")

    except Exception as e:
        await m.reply(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


@diag_router.message(Command("__checkdb"))
async def __checkdb(m: Message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –ë–î –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞"""
    chat_id = m.chat.id

    try:
        from database import BotMessage, get_async_session

        session = await get_async_session()
        messages = (
            session.query(BotMessage)
            .filter(BotMessage.chat_id == chat_id)
            .order_by(BotMessage.created_at.desc())
            .limit(10)
            .all()
        )

        if not messages:
            await m.reply("‚ùå –í bot_messages –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞!\n–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–∫–∞—é—Ç—Å—è.")
            return

        result = f"üìä –ù–∞–π–¥–µ–Ω–æ {len(messages)} –∑–∞–ø–∏—Å–µ–π –≤ bot_messages:\n\n"

        for msg in messages:
            status = "üóëÔ∏è —É–¥–∞–ª–µ–Ω–æ" if msg.deleted else "‚úÖ –∞–∫—Ç–∏–≤–Ω–æ"
            result += f"ID: {msg.message_id}, Tag: {msg.tag}, Status: {status}\n"

        active_count = len([m for m in messages if not m.deleted])
        result += f"\n–ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}, –£–¥–∞–ª–µ–Ω–Ω—ã—Ö: {len(messages) - active_count}"

        await m.reply(result)

    except Exception as e:
        await m.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")


@diag_router.message(Command("__tracktest"))
async def __tracktest(m: Message, bot: Bot):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–µ–∫–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    chat_id = m.chat.id

    try:
        from database import get_async_session
        from utils.messaging_utils import send_tracked

        session = await get_async_session()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ send_tracked
        tracked_msg = await send_tracked(
            bot,
            session,
            chat_id=chat_id,
            text="üß™ –¢–ï–°–¢ –¢–†–ï–ö–ò–ù–ì–ê - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ë–î",
            tag="test",
        )

        await m.reply(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ send_tracked, ID: {tracked_msg.message_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø–∏—Å–∞–ª–æ—Å—å –≤ –ë–î
        from database import BotMessage

        db_msg = session.query(BotMessage).filter(BotMessage.message_id == tracked_msg.message_id).first()

        if db_msg:
            await m.reply(
                f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–ª–æ—Å—å –≤ –ë–î:\n"
                f"chat_id: {db_msg.chat_id}\n"
                f"tag: {db_msg.tag}\n"
                f"deleted: {db_msg.deleted}"
            )
        else:
            await m.reply("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –ù–ï –∑–∞–ø–∏—Å–∞–ª–æ—Å—å –≤ –ë–î!")

    except Exception as e:
        await m.reply(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∏–Ω–≥–∞: {e}")
