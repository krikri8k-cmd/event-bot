#!/usr/bin/env python3
"""
–¢–µ—Å—Ç EventsService —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
"""

import asyncio
import logging

from config import load_settings
from database import get_engine, init_engine
from storage.events_service import EventsService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def test_eventsservice_coordinates():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º EventsService —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏"""
    print("üîç –¢–ï–°–¢ EVENTSERVICE –° –ö–û–û–†–î–ò–ù–ê–¢–ê–ú–ò")
    print("=" * 50)

    settings = load_settings()
    init_engine(settings.database_url)

    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_lat = -8.679649
    user_lon = 115.230388

    print(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ({user_lat}, {user_lon})")
    print()

    # –°–æ–∑–¥–∞–µ–º EventsService
    engine = get_engine()
    events_service = EventsService(engine)

    # 1. –¢–µ—Å—Ç –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–≤—Å–µ —Å–æ–±—ã—Ç–∏—è)
    print("1Ô∏è‚É£ –¢–ï–°–¢ –ë–ï–ó –ö–û–û–†–î–ò–ù–ê–¢")
    print("-" * 30)

    try:
        events = await events_service.search_events(region="bali", days_ahead=7)

        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {len(events)}")
        for event in events:
            print(f"   ID {event.id}: '{event.title}' - {event.starts_at}")
            print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({event.lat}, {event.lng})")
            print(f"      –¢–∏–ø: {event.event_type}")

        print()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
        print()

    # 2. –¢–µ—Å—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (–ø–æ–∏—Å–∫ –≤ —Ä–∞–¥–∏—É—Å–µ)
    print("2Ô∏è‚É£ –¢–ï–°–¢ –° –ö–û–û–†–î–ò–ù–ê–¢–ê–ú–ò")
    print("-" * 30)

    try:
        events = await events_service.search_events(
            region="bali", center_lat=user_lat, center_lng=user_lon, radius_km=15, days_ahead=7
        )

        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: {len(events)}")
        for event in events:
            print(f"   ID {event.id}: '{event.title}' - {event.starts_at}")
            print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({event.lat}, {event.lng})")
            print(f"      –¢–∏–ø: {event.event_type}")

        print()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: {e}")
        print()

    # 3. –¢–µ—Å—Ç —Å –±–æ–ª—å—à–∏–º —Ä–∞–¥–∏—É—Å–æ–º
    print("3Ô∏è‚É£ –¢–ï–°–¢ –° –ë–û–õ–¨–®–ò–ú –†–ê–î–ò–£–°–û–ú (50–∫–º)")
    print("-" * 30)

    try:
        events = await events_service.search_events(
            region="bali", center_lat=user_lat, center_lng=user_lon, radius_km=50, days_ahead=7
        )

        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π —Å —Ä–∞–¥–∏—É—Å–æ–º 50–∫–º: {len(events)}")
        for event in events:
            print(f"   ID {event.id}: '{event.title}' - {event.starts_at}")
            print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({event.lat}, {event.lng})")
            print(f"      –¢–∏–ø: {event.event_type}")

        print()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å –±–æ–ª—å—à–∏–º —Ä–∞–¥–∏—É—Å–æ–º: {e}")
        print()

    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –ë–î –Ω–∞–ø—Ä—è–º—É—é
    print("4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–û–ë–´–¢–ò–ô –í –ë–î")
    print("-" * 30)

    try:
        from sqlalchemy import text

        engine = get_engine()

        with engine.connect() as conn:
            # –°–æ–±—ã—Ç–∏—è –≤ events_parser —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            parser_events = conn.execute(
                text("""
                SELECT id, title, starts_at, lat, lng, country, city
                FROM events_parser
                WHERE lat IS NOT NULL AND lng IS NOT NULL
                AND starts_at > NOW()
                ORDER BY starts_at
                LIMIT 10
            """)
            ).fetchall()

            print(f"üìä –°–æ–±—ã—Ç–∏–π –≤ events_parser —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: {len(parser_events)}")
            for event in parser_events:
                print(f"   ID {event[0]}: '{event[1]}' - {event[2]}")
                print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({event[3]}, {event[4]})")
                print(f"      –†–µ–≥–∏–æ–Ω: {event[5]}, {event[6]}")

            print()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î: {e}")
        print()

    print("=" * 50)
    print("üéØ –ê–ù–ê–õ–ò–ó:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ EventsService –Ω–∞—Ö–æ–¥–∏—Ç —Å–æ–±—ã—Ç–∏—è")
    print("2. –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è")
    print("3. –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ —Ä–∞–¥–∏—É—Å —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("4. –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ —Å–æ–±—ã—Ç–∏—è –≤ –ë–î –∏–º–µ—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await test_eventsservice_coordinates()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)
