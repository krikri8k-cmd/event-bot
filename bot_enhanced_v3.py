#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è EventBot —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º —Å–æ–±—ã—Ç–∏–π (aiogram 3.x)
"""

import asyncio
import logging
from datetime import UTC, datetime

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    KeyboardButton,
    ReplyKeyboardMarkup,
)

from bot_health import health_server
from config import load_settings
from database import Event, User, create_all, get_session, init_engine
from enhanced_event_search import enhanced_search_events
from utils.geo_utils import haversine_km, static_map_url


def get_source_link(event: dict) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–±—ã—Ç–∏—è
    """
    source = event.get("source", "")

    if source == "ai_generated":
        return "AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"
    elif source == "popular_places":
        return "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ—Å—Ç–∞"
    elif source == "event_calendars":
        return "–ö–∞–ª–µ–Ω–¥–∞—Ä–∏ —Å–æ–±—ã—Ç–∏–π"
    elif source == "social_media":
        return "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏"
    else:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"


def get_short_source_link(event: dict) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–∞—Ä—Ç—ã
    """
    source = event.get("source", "")

    if source == "ai_generated":
        return "ü§ñ"
    elif source == "popular_places":
        return "üèõÔ∏è"
    elif source == "event_calendars":
        return "üìÖ"
    elif source == "social_media":
        return "üì±"
    else:
        return "üìå"


def create_enhanced_google_maps_url(user_lat: float, user_lng: float, events: list) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Google Maps —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–±—ã—Ç–∏—è—Ö
    """
    # –ë–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Google Maps
    base_url = "https://www.google.com/maps/search/"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–∫ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    search_queries = []
    for i, event in enumerate(events[:8], 1):  # –ú–∞–∫—Å–∏–º—É–º 8 —Å–æ–±—ã—Ç–∏–π –¥–ª—è URL
        title = event.get("title", "").replace(" ", "+")
        time_part = event.get("time_local", "").replace(" ", "+") if event.get("time_local") else ""

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: "–ù–∞–∑–≤–∞–Ω–∏–µ+—Å–æ–±—ã—Ç–∏—è+–≤—Ä–µ–º—è+–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"
        search_query = f"{title}"
        if time_part:
            search_query += f"+{time_part}"

        search_queries.append(search_query)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if search_queries:
        combined_search = "+".join(search_queries)
        return f"{base_url}{combined_search}/@{user_lat:.6f},{user_lng:.6f},13z"
    else:
        return f"{base_url}@{user_lat:.6f},{user_lng:.6f},13z"


def sort_events_by_time(events: list) -> list:
    """
    –°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–±–ª–∏–∂–∞–π—à–∏–µ –ø–µ—Ä–≤—ã–º–∏)
    """

    def get_event_time(event):
        time_str = event.get("time_local", "")
        if not time_str:
            return float("inf")  # –°–æ–±—ã—Ç–∏—è –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–æ–Ω–µ—Ü

        try:
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "2025-01-04 19:00"
            from datetime import datetime

            event_time = datetime.strptime(time_str, "%Y-%m-%d %H:%M")
            return event_time.timestamp()
        except (ValueError, TypeError):
            return float("inf")  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –∫–æ–Ω–µ—Ü

    return sorted(events, key=get_event_time)


def create_event_links(event: dict) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏—è
    """
    links = []

    # –°—Å—ã–ª–∫–∞ –Ω–∞ Google Maps
    if event.get("lat") and event.get("lng"):
        maps_url = (
            f"https://www.google.com/maps/search/?api=1&query={event['lat']:.6f},{event['lng']:.6f}"
        )
        links.append(f"üó∫Ô∏è [Google Maps]({maps_url})")

    # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç –º–µ—Å—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if event.get("website"):
        links.append(f"üåê [–°–∞–π—Ç]({event['website']})")

    # –°—Å—ã–ª–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if event.get("booking_url"):
        links.append(f"üìÖ [–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å]({event['booking_url']})")

    return " | ".join(links) if links else "üîó [Google Maps](https://maps.google.com)"


async def send_detailed_events_list(
    message: types.Message, events: list, user_lat: float, user_lng: float
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    """
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ —á–∞—Å—Ç–∏ (Telegram –ª–∏–º–∏—Ç ~4096 —Å–∏–º–≤–æ–ª–æ–≤)
    events_per_message = 5
    total_parts = (len(events) + events_per_message - 1) // events_per_message

    for part in range(total_parts):
        start_idx = part * events_per_message
        end_idx = min(start_idx + events_per_message, len(events))
        part_events = events[start_idx:end_idx]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —á–∞—Å—Ç–∏
        lines = []
        for i, event in enumerate(part_events, start_idx + 1):
            distance = haversine_km(user_lat, user_lng, event["lat"], event["lng"])
            time_part = f" ‚Äî {event['time_local']}" if event.get("time_local") else ""

            # –≠–º–æ–¥–∑–∏ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            source_emoji = {
                "ai_generated": "ü§ñ",
                "popular_places": "üèõÔ∏è",
                "event_calendars": "üìÖ",
                "social_media": "üì±",
            }.get(event.get("source", ""), "üìå")

            # –ö–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏—è
            event_links = create_event_links(event)

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –º–µ—Å—Ç–∞
            title = event["title"][:50] + "..." if len(event["title"]) > 50 else event["title"]
            location = event.get("location_name", "–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
            location = location[:40] + "..." if len(location) > 40 else location

            lines.append(
                f"**{i}) {title}**{time_part}\n"
                f"üìç {location}\n"
                f"üìè {distance:.1f} –∫–º\n"
                f"{source_emoji} {event.get('source', 'unknown')}\n"
                f"{event_links}\n"
            )

        text = "\n".join(lines)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Å—Ç–∏
        if total_parts > 1:
            text = f"üìã **–°–æ–±—ã—Ç–∏—è (—á–∞—Å—Ç—å {part + 1} –∏–∑ {total_parts}):**\n\n{text}"
        else:
            text = f"üìã **–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:**\n\n{text}"

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ Google Maps
        maps_url = f"https://www.google.com/maps/search/?api=1&query={user_lat:.6f},{user_lng:.6f}"
        inline_kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –≤ Google Maps", url=maps_url)]]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å —Å–æ–±—ã—Ç–∏–π
        await message.answer(
            text,
            reply_markup=inline_kb,
            parse_mode="Markdown",
        )


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# –î–ª—è –±–æ—Ç–∞ ‚Äî —Ç–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
settings = load_settings(require_bot=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_engine(settings.database_url)
create_all()

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=settings.telegram_token)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class EventCreation(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_time = State()
    waiting_for_location = State()


def main_menu_kb() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [KeyboardButton(text="üìç –ß—Ç–æ —Ä—è–¥–æ–º"), KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å")],
        [KeyboardButton(text="üìã –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è"), KeyboardButton(text="üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è")],
        [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"), KeyboardButton(text="üöÄ –°—Ç–∞—Ä—Ç")],
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


@dp.message(Command("start"))
@dp.message(F.text == "üöÄ –°—Ç–∞—Ä—Ç")
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    with get_session() as session:
        user = session.get(User, user_id)
        if not user:
            user = User(
                id=user_id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
            )
            session.add(user)
            session.commit()

    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø EventAroundBot. –ü–æ–º–æ–≥–∞—é –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–æ–±—ã—Ç–∏—è —Ä—è–¥–æ–º –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏.\n\n"
        "üéØ –ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –ò—Å–∫–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞–¥–∏—É—Å–µ 5 –∫–º –æ—Ç –≤–∞—Å\n"
        "‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å AI —Å–æ–±—ã—Ç–∏—è\n"
        "‚Ä¢ –ò—Å–∫–∞—Ç—å –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –≤–∞—à–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è\n\n"
        "–ù–∞–∂–º–∏—Ç–µ 'üìç –ß—Ç–æ —Ä—è–¥–æ–º' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é!"
    )

    await message.answer(welcome_text, reply_markup=main_menu_kb())


@dp.message(Command("nearby"))
@dp.message(F.text == "üìç –ß—Ç–æ —Ä—è–¥–æ–º")
async def on_what_nearby(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ß—Ç–æ —Ä—è–¥–æ–º'"""
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å —Å–≤–µ–∂—É—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é, —á—Ç–æ–±—ã —è –Ω–∞—à–ª–∞ —Å–æ–±—ã—Ç–∏—è —Ä—è–¥–æ–º ‚ú®",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
            resize_keyboard=True,
        ),
    )


@dp.message(F.location)
async def on_location(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    lat = message.location.latitude
    lng = message.location.longitude

    await message.answer("–°–º–æ—Ç—Ä—é, —á—Ç–æ —Ä—è–¥–æ–º...", reply_markup=main_menu_kb())

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with get_session() as session:
            user = session.get(User, message.from_user.id)
            if user:
                user.last_lat = lat
                user.last_lng = lng
                user.last_geo_at_utc = datetime.now(UTC)
                session.commit()

        # –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        try:
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç ({lat}, {lng})")
            events = await enhanced_search_events(
                lat, lng, radius_km=int(settings.default_radius_km)
            )
            logger.info(f"‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏–π: {e}")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=main_menu_kb(),
            )
            return

        if not events:
            logger.info("üì≠ –°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await message.answer(
                "–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π —Å–≤–æ—ë —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ '‚ûï –°–æ–∑–¥–∞—Ç—å'.",
                reply_markup=main_menu_kb(),
            )
            return

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–±–ª–∏–∂–∞–π—à–∏–µ –ø–µ—Ä–≤—ã–º–∏)
        events = sort_events_by_time(events)
        logger.info("üìÖ –°–æ–±—ã—Ç–∏—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫—É—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∫–∞—Ä—Ç—ã —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
        events_to_show = events[:12]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 12 —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∫–∞—Ä—Ç–µ

        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∫–∞—Ä—Ç—ã
        short_caption = f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π —Ä—è–¥–æ–º!\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏—è—Ö —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
        for i, event in enumerate(events_to_show[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            distance = haversine_km(lat, lng, event["lat"], event["lng"])
            time_part = f" {event['time_local']}" if event.get("time_local") else ""
            title = event["title"][:25] + "..." if len(event["title"]) > 25 else event["title"]

            # –ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫
            short_link = get_short_source_link(event)

            short_caption += f"**{i}) {title}**{time_part} ‚Ä¢ {distance:.1f}–∫–º {short_link}\n"

        if len(events) > 5:
            short_caption += f"\n... –∏ –µ—â–µ {len(events) - 5} —Å–æ–±—ã—Ç–∏–π"

        short_caption += (
            "\n\nüí° **–ù–∞–∂–º–∏ –Ω–∞ –∫–∞—Ä—Ç—É —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤ Google Maps —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π!**"
        )

        # –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É —Å –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
        points = []
        for i, event in enumerate(events_to_show, 1):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ —Å–æ–±—ã—Ç–∏—è
            event_lat = event.get("lat")
            event_lng = event.get("lng")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–∞–ª–∏–¥–Ω—ã–µ
            if event_lat is not None and event_lng is not None:
                if -90 <= event_lat <= 90 and -180 <= event_lng <= 180:
                    points.append((str(i), event_lat, event_lng))  # –ú–µ—Ç–∫–∏ 1, 2, 3
                    logger.info(
                        f"–°–æ–±—ã—Ç–∏–µ {i}: {event['title']} - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ({event_lat:.6f}, {event_lng:.6f})"
                    )
                else:
                    logger.warning(f"–°–æ–±—ã—Ç–∏–µ {i}: –Ω–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ({event_lat}, {event_lng})")
            else:
                logger.warning(f"–°–æ–±—ã—Ç–∏–µ {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
        map_url = static_map_url(lat, lng, points, size="800x600", zoom=14)

        # --- DEBUG: persist & log map url ---
        from pathlib import Path

        try:
            Path("last_map_url.txt").write_text(map_url, encoding="utf-8")
        except Exception as e:
            logger.warning("Cannot write last_map_url.txt: %s", e)
        logger.info("Map URL: %s", map_url)
        print(f"MAP_URL={map_url}")
        # --- END DEBUG ---

        if map_url and map_url.startswith("http"):
            try:
                # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ Google Maps
                from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

                # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Google Maps —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–±—ã—Ç–∏—è—Ö
                maps_url = create_enhanced_google_maps_url(lat, lng, events_to_show)

                inline_kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –≤ Google Maps —Å —Å–æ–±—ã—Ç–∏—è–º–∏", url=maps_url
                            )
                        ]
                    ]
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É —Å –∫—Ä–∞—Ç–∫–æ–π –ø–æ–¥–ø–∏—Å—å—é
                await message.answer_photo(
                    map_url,
                    caption=short_caption,
                    reply_markup=inline_kb,
                    parse_mode="Markdown",
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await send_detailed_events_list(message, events, lat, lng)
            except Exception as e:
                logger.exception("Failed to send map image, will send URL as text: %s", e)
                await message.answer(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã. –í–æ—Ç URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n{map_url}"
                )
        else:
            # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
            await send_detailed_events_list(message, events, lat, lng)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏–π: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_kb()
        )


@dp.message(Command("create"))
@dp.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å")
async def on_create(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å'"""
    await dp.storage.set_state(message.from_user.id, EventCreation.waiting_for_title)
    await message.answer(
        "–°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ! üìù\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True
        ),
    )


@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_creation(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    await state.clear()
    await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_kb())


@dp.message(EventCreation.waiting_for_title)
async def process_title(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    await state.update_data(title=message.text)
    await state.set_state(EventCreation.waiting_for_description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")


@dp.message(EventCreation.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    await state.update_data(description=message.text)
    await state.set_state(EventCreation.waiting_for_time)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-01-15 19:00):")


@dp.message(EventCreation.waiting_for_time)
async def process_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è"""
    await state.update_data(time_local=message.text)
    await state.set_state(EventCreation.waiting_for_location)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Å–æ–±—ã—Ç–∏—è:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
            resize_keyboard=True,
        ),
    )


@dp.message(F.location, EventCreation.waiting_for_location)
async def process_location(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è"""
    data = await state.get_data()

    # –°–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏–µ –≤ –ë–î
    with get_session() as session:
        event = Event(
            title=data["title"],
            description=data["description"],
            time_local=data["time_local"],
            lat=message.location.latitude,
            lng=message.location.longitude,
            organizer_id=message.from_user.id,
            organizer_username=message.from_user.username,
            status="open",
            is_generated_by_ai=False,
        )
        session.add(event)
        session.commit()

    await state.clear()
    await message.answer(
        f"‚úÖ –°–æ–±—ã—Ç–∏–µ '{data['title']}' —Å–æ–∑–¥–∞–Ω–æ!\n\n"
        f"–¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ –µ–≥–æ —á–µ—Ä–µ–∑ 'üìç –ß—Ç–æ —Ä—è–¥–æ–º'.",
        reply_markup=main_menu_kb(),
    )


@dp.message(Command("myevents"))
@dp.message(F.text == "üìã –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è")
async def on_my_events(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è'"""
    with get_session() as session:
        events = (
            session.query(Event)
            .filter(Event.organizer_id == message.from_user.id)
            .order_by(Event.created_at_utc.desc())
            .limit(5)
            .all()
        )

    if not events:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ —á–µ—Ä–µ–∑ '‚ûï –°–æ–∑–¥–∞—Ç—å'!",
            reply_markup=main_menu_kb(),
        )
        return

    lines = []
    for event in events:
        status_emoji = "üü¢" if event.status == "open" else "üî¥"
        lines.append(
            f"{status_emoji} **{event.title}**\n"
            f"üìÖ {event.time_local or '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üìç {event.location_name or '–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {event.status}"
        )

    text = "\n\n".join(lines)
    await message.answer(
        f"üìã –í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è:\n\n{text}", reply_markup=main_menu_kb(), parse_mode="Markdown"
    )


@dp.message(Command("share"))
@dp.message(F.text == "üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è")
async def on_share(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è'"""
    bot_info = await bot.get_me()
    text = (
        "–ü—Ä–∏–∫—Ä–µ–ø–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç ‚Äî —á—Ç–æ–±—ã –≤—Å–µ–º –±—ã–ª–æ —É–¥–æ–±–Ω–µ–µ –∏—Å–∫–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–º–µ—Å—Ç–µ.\n\n"
        f"–î–æ–±–∞–≤–∏—Ç—å: t.me/{bot_info.username}?startgroup=true\n"
        f"–õ–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞: t.me/{bot_info.username}\n\n"
        "–ú–æ–∂–µ—à—å –¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å–æ–±—ã—Ç–∏–µ–º, –∫–æ–≥–¥–∞ –æ—Ç–∫—Ä–æ–µ—à—å –µ–≥–æ –∫–∞—Ä—Ç–æ—á–∫—É ‚Äî —è –ø—Ä–∏—à–ª—é deep-link."
    )
    await message.answer(text, reply_markup=main_menu_kb())


@dp.message(Command("help"))
@dp.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def on_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'"""
    help_text = (
        "ü§ñ **EventAroundBot - –ü–æ–º–æ—â—å**\n\n"
        "**üìç –ß—Ç–æ —Ä—è–¥–æ–º** - –∏—â–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞–¥–∏—É—Å–µ 5 –∫–º –æ—Ç –≤–∞—Å\n"
        "**‚ûï –°–æ–∑–¥–∞—Ç—å** - —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ\n"
        "**üìã –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è** - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è\n"
        "**üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è** - —Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞\n\n"
        "**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
        "1. –ù–∞–∂–º–∏—Ç–µ 'üìç –ß—Ç–æ —Ä—è–¥–æ–º'\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π —Å –∫–∞—Ä—Ç–æ–π\n\n"
        "**–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π:**\n"
        "ü§ñ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è\n"
        "üèõÔ∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ—Å—Ç–∞\n"
        "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä–∏ —Å–æ–±—ã—Ç–∏–π\n"
        "üì± –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏\n"
        "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞"
    )
    await message.answer(help_text, reply_markup=main_menu_kb(), parse_mode="Markdown")


@dp.message()
async def echo_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:", reply_markup=main_menu_kb())


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ EventBot (aiogram 3.x)...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º health check —Å–µ—Ä–≤–µ—Ä –¥–ª—è Railway
    try:
        if health_server.start():
            logger.info("Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        else:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å health check —Å–µ—Ä–≤–µ—Ä")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ health check —Å–µ—Ä–≤–µ—Ä–∞: {e}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try:
        await bot.set_my_commands(
            [
                types.BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
                types.BotCommand(command="help", description="‚ùì –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
                types.BotCommand(command="nearby", description="üìç –ù–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏—è —Ä—è–¥–æ–º"),
                types.BotCommand(command="create", description="‚ûï –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ"),
                types.BotCommand(command="myevents", description="üìã –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è"),
                types.BotCommand(command="share", description="üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º"),
            ]
        )
        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
