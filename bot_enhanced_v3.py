#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è EventBot —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º —Å–æ–±—ã—Ç–∏–π (aiogram 3.x)
"""

import asyncio
import html
import logging
import os
import re
import ssl
from datetime import UTC, datetime
from math import ceil
from urllib.parse import quote_plus, urlparse

import certifi
from aiogram import Bot, Dispatcher, F, types
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from aiohttp import TCPConnector

from bot_health import health_server
from config import load_settings
from database import Event, User, create_all, get_session, init_engine
from enhanced_event_search import enhanced_search_events
from utils.geo_utils import haversine_km, static_map_url


def is_valid_url(url: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º URL
    """
    try:
        parsed = urlparse(url)
        return parsed.scheme in ("http", "https") and bool(parsed.netloc)
    except Exception:
        return False


def get_source_link(event: dict) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–±—ã—Ç–∏—è
    """
    source = event.get("source", "")

    if source == "ai_generated":
        return "AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"
    elif source == "popular_places":
        return "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ—Å—Ç–∞"
    elif source == "event_calendars":
        return "–ö–∞–ª–µ–Ω–¥–∞—Ä–∏ —Å–æ–±—ã—Ç–∏–π"
    elif source == "social_media":
        return "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏"
    else:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"


def get_short_source_link(event: dict) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–∞—Ä—Ç—ã
    """
    source = event.get("source", "")

    if source == "ai_generated":
        return "ü§ñ"
    elif source == "popular_places":
        return "üèõÔ∏è"
    elif source == "event_calendars":
        return "üìÖ"
    elif source == "social_media":
        return "üì±"
    else:
        return "üìå"


def create_enhanced_google_maps_url(user_lat: float, user_lng: float, events: list) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Google Maps —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–±—ã—Ç–∏—è—Ö
    """
    # –ë–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Google Maps
    base_url = "https://www.google.com/maps/search/"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–∫ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    search_queries = []
    for i, event in enumerate(events[:8], 1):  # –ú–∞–∫—Å–∏–º—É–º 8 —Å–æ–±—ã—Ç–∏–π –¥–ª—è URL
        title = event.get("title", "").replace(" ", "+")
        time_part = event.get("time_local", "").replace(" ", "+") if event.get("time_local") else ""

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: "–ù–∞–∑–≤–∞–Ω–∏–µ+—Å–æ–±—ã—Ç–∏—è+–≤—Ä–µ–º—è+–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"
        search_query = f"{title}"
        if time_part:
            search_query += f"+{time_part}"

        search_queries.append(search_query)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if search_queries:
        combined_search = "+".join(search_queries)
        return f"{base_url}{combined_search}/@{user_lat:.6f},{user_lng:.6f},13z"
    else:
        return f"{base_url}@{user_lat:.6f},{user_lng:.6f},13z"


def sort_events_by_time(events: list) -> list:
    """
    –°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–±–ª–∏–∂–∞–π—à–∏–µ –ø–µ—Ä–≤—ã–º–∏)
    """

    def get_event_time(event):
        time_str = event.get("time_local", "")
        if not time_str:
            return float("inf")  # –°–æ–±—ã—Ç–∏—è –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–æ–Ω–µ—Ü

        try:
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "2025-01-04 19:00"
            from datetime import datetime

            event_time = datetime.strptime(time_str, "%Y-%m-%d %H:%M")
            return event_time.timestamp()
        except (ValueError, TypeError):
            return float("inf")  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –∫–æ–Ω–µ—Ü

    return sorted(events, key=get_event_time)


def enrich_venue_name(e: dict) -> dict:
    """
    –û–±–æ–≥–∞—â–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Å—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    """
    if e.get("venue_name") and e.get("venue_name") not in [
        "",
        "–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è",
        "–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ",
    ]:
        return e

    # 1) –∏–∑ title/description

    VENUE_RX = r"(?:–≤|at|@)\s+([A-Za-z–ê-–Ø–∞-—è0-9''&\s.-]+)$"

    for field in ("title", "description"):
        v = (e.get(field) or "").strip()
        m = re.search(VENUE_RX, v)
        if m:
            venue_name = m.group(1).strip()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
            if len(venue_name) > 3 and venue_name not in ["–º–æ–º–µ–Ω—Ç", "—Å–æ–±—ã—Ç–∏–µ", "–≤—Å—Ç—Ä–µ—á–∞"]:
                e["venue_name"] = venue_name
                return e

    # 2) –µ—Å–ª–∏ –≤—Å—ë –µ—â—ë –ø—É—Å—Ç–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    if not e.get("venue_name") or e.get("venue_name") in [
        "",
        "–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è",
        "–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ",
    ]:
        e["venue_name"] = "üìç –õ–æ–∫–∞—Ü–∏—è —É—Ç–æ—á–Ω—è–µ—Ç—Å—è"

    return e


def create_google_maps_url(event: dict) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ Google Maps —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Å—Ç–∞ (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    """
    return build_maps_url(event)


def get_venue_name(event: dict) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è
    """
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: venue_name -> location_name -> address
    venue_name = event.get("venue_name") or event.get("location_name") or event.get("address") or ""

    # –§–∏–ª—å—Ç—Ä—É–µ–º –º—É—Å–æ—Ä–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    if venue_name in ["–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è", "–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ", "–õ–æ–∫–∞—Ü–∏—è", ""]:
        venue_name = ""

    # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
    if not venue_name and event.get("description"):
        description = event.get("description", "")
        # –ü—Ä–æ—Å—Ç—ã–µ —Ä–µ–≥—É–ª—è—Ä–∫–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Å—Ç–∞

        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "–≤ Canggu Studio", "at Museum", "@Place"
        patterns = [
            r"–≤\s+([^,.\n]+)",
            r"at\s+([^,.\n]+)",
            r"@([^\s,.\n]+)",
            r"–º–µ—Å—Ç–æ:\s*([^,.\n]+)",
            r"–∞–¥—Ä–µ—Å:\s*([^,.\n]+)",
        ]

        for pattern in patterns:
            match = re.search(pattern, description, re.IGNORECASE)
            if match:
                venue_name = match.group(1).strip()
                break

    # –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –ø—É—Å—Ç–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    if not venue_name:
        venue_name = "üìç –õ–æ–∫–∞—Ü–∏—è —É—Ç–æ—á–Ω—è–µ—Ç—Å—è"

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
    if len(venue_name) > 30:
        return venue_name[:27] + "..."

    return venue_name


def get_event_type_info(event: dict) -> tuple[str, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ —Å–æ–±—ã—Ç–∏—è (emoji, –Ω–∞–∑–≤–∞–Ω–∏–µ)
    """
    source = event.get("source", "")
    event_type = event.get("type", "")

    if event_type == "user":
        return "üë•", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ"
    elif event_type == "moment":
        return "‚ö°", "–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ"
    elif source == "ai_generated":
        return "ü§ñ", "AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"
    elif source == "popular_places":
        return "üèõÔ∏è", "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ—Å—Ç–∞"
    elif source == "event_calendars":
        return "üìÖ", "–ö–∞–ª–µ–Ω–¥–∞—Ä–∏"
    elif source == "social_media":
        return "üì±", "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏"
    else:
        return "üìå", "–î—Ä—É–≥–∏–µ"


def create_event_links(event: dict) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏—è (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    """
    maps_url = create_google_maps_url(event)
    source_url = get_source_url(event)

    links = [f"üó∫Ô∏è [–ú–∞—Ä—à—Ä—É—Ç]({maps_url})", f"üîó [–ò—Å—Ç–æ—á–Ω–∏–∫]({source_url})"]
    return " | ".join(links)


def group_events_by_type(events: list) -> dict[str, list]:
    """
    –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ —Ç–∏–ø–∞–º
    """
    groups = {
        "sources": [],  # –ò–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–∫–∞–ª–µ–Ω–¥–∞—Ä–∏, —Å–æ—Ü—Å–µ—Ç–∏)
        "users": [],  # –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        "moments": [],  # –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    }

    for event in events:
        event_type = event.get("type", "")
        event.get("source", "")

        if event_type == "user":
            groups["users"].append(event)
        elif event_type == "moment":
            groups["moments"].append(event)
        else:
            # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—á–∏—Ç–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
            groups["sources"].append(event)

    return groups


def is_mÂûÉÂúæ_url(url: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –º—É—Å–æ—Ä–Ω—ã–º (–ø—É—Å—Ç—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ Google Calendar –∏ —Ç.–¥.)
    """
    return sanitize_url(url) is None


def prepare_events_for_feed(
    events: list[dict], with_diag: bool = False
) -> tuple[list[dict], dict] | list[dict]:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤ –ª–µ–Ω—Ç–µ
    """
    kept, dropped = [], []

    for e in events:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
        source = e.get("source", "")
        event_type = "source"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        if source == "ai_generated":
            event_type = "moment"
        elif source in ["user_created", "user"]:
            event_type = "user"
        elif source in ["event_calendars", "social_media", "popular_places"]:
            event_type = "source"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ type –≤ —Å–æ–±—ã—Ç–∏–µ
        e["type"] = event_type

        # –î–ª—è —Å–æ–±—ã—Ç–∏–π –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º source_url
        if event_type == "source":
            u = sanitize_url(e.get("source_url"))
            has_loc = any(
                [
                    e.get("venue_name"),
                    e.get("address"),
                    (e.get("lat") is not None and e.get("lng") is not None),
                ]
            )
            has_time = bool(e.get("when_str"))

            if not u and not (has_loc and has_time):
                dropped.append((e, "source_without_url_and_location"))
                logger.warning(
                    "skip source invalid | title=%s url=%s reason=%s",
                    e.get("title"),
                    e.get("source_url"),
                    "source_without_url_and_location",
                )
                continue
            e["source_url"] = u  # –º–æ–∂–µ—Ç –±—ã—Ç—å None

        kept.append(enrich_venue_name(e))

    diag = {
        "in": len(events),
        "kept": len(kept),
        "dropped": len(dropped),
        "reasons": [r for _, r in dropped],
    }

    return (kept, diag) if with_diag else kept


def create_events_summary(events: list) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    """
    groups = group_events_by_type(events)

    summary_lines = [f"üó∫ –ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π —Ä—è–¥–æ–º!"]

    if groups["sources"]:
        summary_lines.append(f"‚Ä¢ –ò–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(groups['sources'])}")
    if groups["users"]:
        summary_lines.append(f"‚Ä¢ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(groups['users'])}")
    if groups["moments"]:
        summary_lines.append(f"‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ ‚ö°: {len(groups['moments'])}")

    return "\n".join(summary_lines)


async def send_compact_events_list(
    message: types.Message, events: list, user_lat: float, user_lng: float, page: int = 0
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ
    """
    # 1) –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º (–ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ publishable)
    prepared, diag = prepare_events_for_feed(events, with_diag=True)
    logger.info(
        f"diag: in={diag['in']} kept={diag['kept']} dropped={diag['dropped']} reasons={diag['reasons']}"
    )

    # –û–±–æ–≥–∞—â–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –º–µ—Å—Ç –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º–∏
    for event in prepared:
        enrich_venue_name(event)
        event["distance_km"] = haversine_km(user_lat, user_lng, event["lat"], event["lng"])

    # 2) –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏ —Å—á–∏—Ç–∞–µ–º
    groups = group_by_type(prepared)
    counts = make_counts(groups)

    # 3) –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞
    user_state[message.chat.id] = {
        "prepared": prepared,
        "counts": counts,
        "lat": user_lat,
        "lng": user_lng,
        "radius": int(settings.default_radius_km),
        "page": 1,
        "diag": diag,
    }

    # 4) –†–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    header_html = render_header(counts)
    page_html, total_pages = render_page(prepared, page=page + 1, page_size=5)
    text = header_html + "\n\n" + page_html

    # 5) –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    inline_kb = kb_pager(page + 1, total_pages) if total_pages > 1 else None

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ
        await message.answer(
            text, reply_markup=inline_kb, parse_mode="HTML", disable_web_page_preview=True
        )
        logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} —Å–æ–±—ã—Ç–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (HTML)")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page + 1}: {e}")
        # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await message.answer(
            f"üìã –°–æ–±—ã—Ç–∏—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}):\n\n{text}", reply_markup=inline_kb
        )


async def edit_events_list_message(
    message: types.Message, events: list, user_lat: float, user_lng: float, page: int = 0
):
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ–±—ã—Ç–∏–π (–¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
    """
    # 1) —Å–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º (–ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ publishable)
    prepared = prepare_events_for_feed(events)

    # –û–±–æ–≥–∞—â–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –º–µ—Å—Ç
    for event in prepared:
        enrich_venue_name(event)
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        event["distance_km"] = haversine_km(user_lat, user_lng, event["lat"], event["lng"])

    groups = {
        "moment": [e for e in prepared if e["type"] == "moment"],
        "user": [e for e in prepared if e["type"] == "user"],
        "source": [e for e in prepared if e["type"] == "source"],
    }
    counts = {
        "all": len(prepared),
        "moments": len(groups["moment"]),
        "user": len(groups["user"]),
        "sources": len(groups["source"]),
    }

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    events_per_page = 4
    total_pages = (len(prepared) + events_per_page - 1) // events_per_page
    page = max(0, min(page, total_pages - 1))

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * events_per_page
    end_idx = min(start_idx + events_per_page, len(prepared))
    page_events = prepared[start_idx:end_idx]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    header_html = render_header(counts)

    # –§–æ—Ä–º–∏—Ä—É–µ–º HTML –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏–π
    event_lines = []
    for idx, event in enumerate(page_events, start=start_idx + 1):
        event_html = render_event_html(event, idx)
        event_lines.append(event_html)

    text = header_html + "\n\n" + "\n".join(event_lines)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    inline_kb = kb_pager(page + 1, total_pages) if total_pages > 1 else None

    try:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.edit_text(
            text, reply_markup=inline_kb, parse_mode="HTML", disable_web_page_preview=True
        )
        logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} —Å–æ–±—ã—Ç–∏–π –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ (HTML)")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page + 1}: {e}")


async def send_detailed_events_list(
    message: types.Message, events: list, user_lat: float, user_lng: float
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await send_compact_events_list(message, events, user_lat, user_lng, page=0)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ ---


def build_maps_url(e: dict) -> str:
    """–°–æ–∑–¥–∞–µ—Ç URL –¥–ª—è Google Maps —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º venue_name > address > coordinates"""
    name = (e.get("venue_name") or "").strip()
    addr = (e.get("address") or "").strip()
    lat, lng = e.get("lat"), e.get("lng")
    if name:
        return f"https://www.google.com/maps/search/?api=1&query={quote_plus(name)}"
    if addr:
        return f"https://www.google.com/maps/search/?api=1&query={quote_plus(addr)}"
    if lat and lng:
        return f"https://www.google.com/maps/search/?api=1&query={lat},{lng}"
    return "https://www.google.com/maps"


def get_source_url(e: dict) -> str | None:
    """–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –∏—Å—Ç–∏–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    t = e.get("type")
    candidates: list[str | None] = []

    if t == "source":
        candidates = [e.get("source_url")]
    elif t == "user":
        candidates = [e.get("author_url"), e.get("chat_url")]
    elif t in ("ai", "ai_generated", "moment"):
        # –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º location_url, –µ—Å–ª–∏ —ç—Ç–æ placeholder / example.*
        candidates = [e.get("location_url")]
    else:
        candidates = [e.get("source_url")]

    for u in candidates:
        u = sanitize_url(u)
        if u:
            return u
    return None  # –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ‚Äî –ª—É—á—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫—É


def render_event_html(e: dict, idx: int) -> str:
    """–†–µ–Ω–¥–µ—Ä–∏—Ç –æ–¥–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É —Å–æ–±—ã—Ç–∏—è –≤ HTML"""
    title = html.escape(e.get("title", "–°–æ–±—ã—Ç–∏–µ"))
    when = e.get("when_str", "")
    dist = f"{e['distance_km']:.1f} –∫–º" if e.get("distance_km") is not None else ""
    venue = html.escape(e.get("venue_name") or e.get("address") or "–õ–æ–∫–∞—Ü–∏—è —É—Ç–æ—á–Ω—è–µ—Ç—Å—è")

    src = get_source_url(e)
    src_part = f'üîó <a href="{html.escape(src)}">–ò—Å—Ç–æ—á–Ω–∏–∫</a>' if src else "‚ÑπÔ∏è –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω"
    map_part = f'<a href="{build_maps_url(e)}">–ú–∞—Ä—à—Ä—É—Ç</a>'

    return (
        f"{idx}) <b>{title}</b> ‚Äî {when} ({dist})\n" f"üìç {venue}\n" f"{src_part}  üöó {map_part}\n"
    )


def render_fallback(lat: float, lng: float) -> str:
    """Fallback —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ"""
    return (
        f"üó∫ <b>–ù–∞–π–¥–µ–Ω–æ —Ä—è–¥–æ–º: 0</b>\n"
        f"‚Ä¢ ‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ: 0\n\n"
        f"1) <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–∏—Å–∫</b> ‚Äî (0.0 –∫–º)\n"
        f"üìç –õ–æ–∫–∞—Ü–∏—è —É—Ç–æ—á–Ω—è–µ—Ç—Å—è\n"
        f'‚ÑπÔ∏è –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω  üöó <a href="https://www.google.com/maps/search/?api=1&query={lat},{lng}">–ú–∞—Ä—à—Ä—É—Ç</a>\n\n'
        f"2) <b>–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—ë —Å–æ–±—ã—Ç–∏–µ</b> ‚Äî (0.0 –∫–º)\n"
        f"üìç –õ–æ–∫–∞—Ü–∏—è —É—Ç–æ—á–Ω—è–µ—Ç—Å—è\n"
        f'‚ÑπÔ∏è –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω  üöó <a href="https://www.google.com/maps/search/?api=1&query={lat},{lng}">–ú–∞—Ä—à—Ä—É—Ç</a>\n\n'
        f"3) <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ</b> ‚Äî (0.0 –∫–º)\n"
        f"üìç –õ–æ–∫–∞—Ü–∏—è —É—Ç–æ—á–Ω—è–µ—Ç—Å—è\n"
        f'‚ÑπÔ∏è –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω  üöó <a href="https://www.google.com/maps/search/?api=1&query={lat},{lng}">–ú–∞—Ä—à—Ä—É—Ç</a>'
    )


def render_page(events: list[dict], page: int, page_size: int = 5) -> tuple[str, int]:
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–±—ã—Ç–∏–π
    events ‚Äî —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ prepared (publishable) –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ distance/time
    page    ‚Äî 1..N
    return: (html_text, total_pages)
    """
    if not events:
        return "–ü–æ–±–ª–∏–∑–æ—Å—Ç–∏ –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏.", 1

    total_pages = max(1, ceil(len(events) / page_size))
    page = max(1, min(page, total_pages))
    start = (page - 1) * page_size
    end = start + page_size

    parts = []
    for idx, e in enumerate(events[start:end], start=start + 1):
        parts.append(render_event_html(e, idx))

    return "\n".join(parts).strip(), total_pages


def kb_pager(page: int, total: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    prev_cb = f"pg:{page-1}" if page > 1 else "pg:noop"
    next_cb = f"pg:{page+1}" if page < total else "pg:noop"

    buttons = [
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=prev_cb),
            InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è", callback_data=next_cb),
        ],
        [InlineKeyboardButton(text=f"–°—Ç—Ä. {page}/{total}", callback_data="pg:noop")],
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def group_by_type(events):
    """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ —Ç–∏–ø–∞–º"""
    return {
        "moment": [e for e in events if e["type"] == "moment"],
        "user": [e for e in events if e["type"] == "user"],
        "source": [e for e in events if e["type"] == "source"],
    }


def make_counts(groups):
    """–°–æ–∑–¥–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º"""
    total = sum(len(v) for v in groups.values())
    return {
        "all": total,
        "moments": len(groups["moment"]),
        "user": len(groups["user"]),
        "sources": len(groups["source"]),
    }


def render_header(counts) -> str:
    """–†–µ–Ω–¥–µ—Ä–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Å—á–µ—Ç—á–∏–∫–∞–º–∏ (—Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–ª–µ–≤—ã–µ)"""
    lines = [f"üó∫ –ù–∞–π–¥–µ–Ω–æ —Ä—è–¥–æ–º: <b>{counts['all']}</b>"]
    if counts["moments"]:
        lines.append(f"‚Ä¢ ‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ: {counts['moments']}")
    if counts["user"]:
        lines.append(f"‚Ä¢ üë• –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {counts['user']}")
    if counts["sources"]:
        lines.append(f"‚Ä¢ üåê –ò–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {counts['sources']}")
    return "\n".join(lines)


# --- /–≠—Ç–∞–ª–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# –î–ª—è –±–æ—Ç–∞ ‚Äî —Ç–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
settings = load_settings(require_bot=True)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è prepared —Å–æ–±—ã—Ç–∏–π –ø–æ chat_id
user_state = {}

# ---------- URL helpers ----------
BLACKLIST_DOMAINS = {"example.com", "example.org", "example.net"}


def sanitize_url(u: str | None) -> str | None:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –º—É—Å–æ—Ä–Ω—ã–µ URL –≤–∫–ª—é—á–∞—è example.com"""
    if not u:
        return None
    try:
        p = urlparse(u)
    except Exception:
        return None
    if p.scheme not in ("http", "https") or not p.netloc:
        return None
    host = p.netloc.lower()
    if any(host == d or host.endswith("." + d) for d in BLACKLIST_DOMAINS):
        return None
    # –≥–ª—É—à–∏–º –æ–±—â–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    if "calendar.google.com" in host and "eid=" not in u:
        return None
    return u


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_engine(settings.database_url)
create_all()

# –°–æ–∑–¥–∞–Ω–∏–µ SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ connector –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Telegram API
ssl_context = ssl.create_default_context(cafile=certifi.where())
connector = TCPConnector(ssl=ssl_context)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å SSL connector
session = AiohttpSession(connector=connector)
bot = Bot(token=settings.telegram_token, session=session)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class EventCreation(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_time = State()
    waiting_for_location = State()


def main_menu_kb() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [KeyboardButton(text="üìç –ß—Ç–æ —Ä—è–¥–æ–º"), KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å")],
        [KeyboardButton(text="üìã –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è"), KeyboardButton(text="üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è")],
        [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"), KeyboardButton(text="üöÄ –°—Ç–∞—Ä—Ç")],
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


@dp.message(Command("start"))
@dp.message(F.text == "üöÄ –°—Ç–∞—Ä—Ç")
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    with get_session() as session:
        user = session.get(User, user_id)
        if not user:
            user = User(
                id=user_id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
            )
            session.add(user)
            session.commit()

    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø EventAroundBot. –ü–æ–º–æ–≥–∞—é –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–æ–±—ã—Ç–∏—è —Ä—è–¥–æ–º –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏.\n\n"
        "üéØ –ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –ò—Å–∫–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞–¥–∏—É—Å–µ 5 –∫–º –æ—Ç –≤–∞—Å\n"
        "‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å AI —Å–æ–±—ã—Ç–∏—è\n"
        "‚Ä¢ –ò—Å–∫–∞—Ç—å –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –≤–∞—à–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è\n\n"
        "–ù–∞–∂–º–∏—Ç–µ 'üìç –ß—Ç–æ —Ä—è–¥–æ–º' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é!"
    )

    await message.answer(welcome_text, reply_markup=main_menu_kb())


@dp.message(Command("nearby"))
@dp.message(F.text == "üìç –ß—Ç–æ —Ä—è–¥–æ–º")
async def on_what_nearby(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ß—Ç–æ —Ä—è–¥–æ–º'"""
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å —Å–≤–µ–∂—É—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é, —á—Ç–æ–±—ã —è –Ω–∞—à–ª–∞ —Å–æ–±—ã—Ç–∏—è —Ä—è–¥–æ–º ‚ú®",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
            resize_keyboard=True,
        ),
    )


@dp.message(F.location)
async def on_location(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    lat = message.location.latitude
    lng = message.location.longitude

    await message.answer("–°–º–æ—Ç—Ä—é, —á—Ç–æ —Ä—è–¥–æ–º...", reply_markup=main_menu_kb())

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with get_session() as session:
            user = session.get(User, message.from_user.id)
            if user:
                user.last_lat = lat
                user.last_lng = lng
                user.last_geo_at_utc = datetime.now(UTC)
                session.commit()

        # –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        try:
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç ({lat}, {lng})")
            events = await enhanced_search_events(
                lat, lng, radius_km=int(settings.default_radius_km)
            )
            logger.info(f"‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π")
        except Exception:
            logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏–π")
            fallback = render_fallback(lat, lng)
            await message.answer(
                fallback,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=main_menu_kb(),
            )
            return

        if not events:
            logger.info("üì≠ –°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await message.answer(
                "–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π —Å–≤–æ—ë —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ '‚ûï –°–æ–∑–¥–∞—Ç—å'.",
                reply_markup=main_menu_kb(),
            )
            return

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–±–ª–∏–∂–∞–π—à–∏–µ –ø–µ—Ä–≤—ã–º–∏)
        events = sort_events_by_time(events)
        logger.info("üìÖ –°–æ–±—ã—Ç–∏—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏")

        # –ï–¥–∏–Ω—ã–π –∫–æ–Ω–≤–µ–π–µ—Ä: prepared ‚Üí groups ‚Üí counts ‚Üí render
        try:
            prepared, diag = prepare_events_for_feed(events, with_diag=True)
            logger.info(
                f"diag: in={diag['in']} kept={diag['kept']} dropped={diag['dropped']} reasons={diag['reasons']}"
            )

            # –û–±–æ–≥–∞—â–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –º–µ—Å—Ç –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º–∏
            for event in prepared:
                enrich_venue_name(event)
                event["distance_km"] = haversine_km(lat, lng, event["lat"], event["lng"])

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏ —Å—á–∏—Ç–∞–µ–º
            groups = group_by_type(prepared)
            counts = make_counts(groups)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞
            user_state[message.chat.id] = {
                "prepared": prepared,
                "counts": counts,
                "lat": lat,
                "lng": lng,
                "radius": int(settings.default_radius_km),
                "page": 1,
                "diag": diag,
            }

            # 4) –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç—á—ë—Ç–æ–º
            header_html = render_header(counts)

            # 5) –†–µ–Ω–¥–µ—Ä–∏–º –ø–µ—Ä–≤—ã–µ 3 —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–∞—Ä—Ç—ã
            page_html, _ = render_page(prepared, page=1, page_size=3)
            short_caption = header_html + "\n\n" + page_html

            if len(prepared) > 3:
                short_caption += f"\n\n... –∏ –µ—â–µ {len(prepared) - 3} —Å–æ–±—ã—Ç–∏–π"

            short_caption += "\n\nüí° <b>–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è Google Maps!</b>"

            # –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É —Å –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
            points = []
            for i, event in enumerate(prepared[:12], 1):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                event_lat = event.get("lat")
                event_lng = event.get("lng")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–∞–ª–∏–¥–Ω—ã–µ
                if event_lat is not None and event_lng is not None:
                    if -90 <= event_lat <= 90 and -180 <= event_lng <= 180:
                        points.append((str(i), event_lat, event_lng))  # –ú–µ—Ç–∫–∏ 1, 2, 3
                        logger.info(
                            f"–°–æ–±—ã—Ç–∏–µ {i}: {event['title']} - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ({event_lat:.6f}, {event_lng:.6f})"
                        )
                    else:
                        logger.warning(
                            f"–°–æ–±—ã—Ç–∏–µ {i}: –Ω–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ({event_lat}, {event_lng})"
                        )
                else:
                    logger.warning(f"–°–æ–±—ã—Ç–∏–µ {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
            map_url = static_map_url(lat, lng, points, size="800x600", zoom=14)

            # --- DEBUG: persist & log map url ---
            from pathlib import Path

            try:
                Path("last_map_url.txt").write_text(map_url, encoding="utf-8")
            except Exception as e:
                logger.warning("Cannot write last_map_url.txt: %s", e)
            logger.info("Map URL: %s", map_url)
            print(f"MAP_URL={map_url}")
            # --- END DEBUG ---

            if map_url and map_url.startswith("http"):
                try:
                    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ Google Maps
                    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

                    # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Google Maps —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–±—ã—Ç–∏—è—Ö
                    maps_url = create_enhanced_google_maps_url(lat, lng, prepared[:12])

                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞, –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–π –º–∞–ª–æ
                    keyboard_buttons = [
                        [
                            InlineKeyboardButton(
                                text="üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –≤ Google Maps —Å —Å–æ–±—ã—Ç–∏—è–º–∏", url=maps_url
                            )
                        ]
                    ]

                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞, –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–π –º–µ–Ω—å—à–µ 3
                    if counts["all"] < 3:
                        keyboard_buttons.append(
                            [
                                InlineKeyboardButton(
                                    text="üîç –†–∞—Å—à–∏—Ä–∏—Ç—å –¥–æ 10 –∫–º", callback_data="rx:10"
                                )
                            ]
                        )
                        keyboard_buttons.append(
                            [
                                InlineKeyboardButton(
                                    text="üîç –†–∞—Å—à–∏—Ä–∏—Ç—å –¥–æ 15 –∫–º", callback_data="rx:15"
                                )
                            ]
                        )

                    inline_kb = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É —Å –∫—Ä–∞—Ç–∫–æ–π –ø–æ–¥–ø–∏—Å—å—é
                    await message.answer_photo(
                        map_url,
                        caption=short_caption,
                        reply_markup=inline_kb,
                        parse_mode="HTML",
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    try:
                        await send_compact_events_list(message, events, lat, lng, page=0)
                        logger.info("‚úÖ –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")
                        # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫
                        await message.answer(
                            f"üìã **–í—Å–µ {len(events)} —Å–æ–±—ã—Ç–∏–π:**\n\n"
                            f"üí° –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É 'üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –≤ Google Maps —Å —Å–æ–±—ã—Ç–∏—è–º–∏' –≤—ã—à–µ "
                            f"—á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Å–æ–±—ã—Ç–∏–∏!",
                            parse_mode="Markdown",
                        )
                except Exception as e:
                    logger.exception("Failed to send map image, will send URL as text: %s", e)
                    await message.answer(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã. –í–æ—Ç URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n{map_url}"
                    )
            else:
                # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
                try:
                    await send_compact_events_list(message, events, lat, lng, page=0)
                    logger.info("‚úÖ –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–±–µ–∑ –∫–∞—Ä—Ç—ã)")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")
                    # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫
                    await message.answer(
                        f"üìã **–í—Å–µ {len(events)} —Å–æ–±—ã—Ç–∏–π:**\n\n"
                        f"üí° –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞—Ä—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å, –Ω–æ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞–π–¥–µ–Ω—ã!",
                        parse_mode="Markdown",
                    )

        except Exception:
            logger.exception(
                "nearby_pipeline_failed | chat=%s lat=%s lng=%s r=%s",
                message.chat.id,
                lat,
                lng,
                int(settings.default_radius_km),
            )
            fallback = render_fallback(lat, lng)
            await message.answer(
                fallback,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=main_menu_kb(),
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏–π: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_kb()
        )


@dp.message(Command("create"))
@dp.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å")
async def on_create(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å'"""
    await dp.storage.set_state(message.from_user.id, EventCreation.waiting_for_title)
    await message.answer(
        "–°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ! üìù\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True
        ),
    )


@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_creation(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    await state.clear()
    await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_kb())


@dp.message(EventCreation.waiting_for_title)
async def process_title(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    await state.update_data(title=message.text)
    await state.set_state(EventCreation.waiting_for_description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")


@dp.message(EventCreation.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    await state.update_data(description=message.text)
    await state.set_state(EventCreation.waiting_for_time)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-01-15 19:00):")


@dp.message(EventCreation.waiting_for_time)
async def process_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è"""
    await state.update_data(time_local=message.text)
    await state.set_state(EventCreation.waiting_for_location)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Å–æ–±—ã—Ç–∏—è:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
            resize_keyboard=True,
        ),
    )


@dp.message(F.location, EventCreation.waiting_for_location)
async def process_location(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è"""
    data = await state.get_data()

    # –°–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏–µ –≤ –ë–î
    with get_session() as session:
        event = Event(
            title=data["title"],
            description=data["description"],
            time_local=data["time_local"],
            lat=message.location.latitude,
            lng=message.location.longitude,
            organizer_id=message.from_user.id,
            organizer_username=message.from_user.username,
            status="open",
            is_generated_by_ai=False,
        )
        session.add(event)
        session.commit()

    await state.clear()
    await message.answer(
        f"‚úÖ –°–æ–±—ã—Ç–∏–µ '{data['title']}' —Å–æ–∑–¥–∞–Ω–æ!\n\n"
        f"–¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ –µ–≥–æ —á–µ—Ä–µ–∑ 'üìç –ß—Ç–æ —Ä—è–¥–æ–º'.",
        reply_markup=main_menu_kb(),
    )


@dp.message(Command("myevents"))
@dp.message(F.text == "üìã –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è")
async def on_my_events(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è'"""
    with get_session() as session:
        events = (
            session.query(Event)
            .filter(Event.organizer_id == message.from_user.id)
            .order_by(Event.created_at_utc.desc())
            .limit(5)
            .all()
        )

    if not events:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ —á–µ—Ä–µ–∑ '‚ûï –°–æ–∑–¥–∞—Ç—å'!",
            reply_markup=main_menu_kb(),
        )
        return

    lines = []
    for event in events:
        status_emoji = "üü¢" if event.status == "open" else "üî¥"
        lines.append(
            f"{status_emoji} **{event.title}**\n"
            f"üìÖ {event.time_local or '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üìç {event.location_name or '–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {event.status}"
        )

    text = "\n\n".join(lines)
    await message.answer(
        f"üìã –í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è:\n\n{text}", reply_markup=main_menu_kb(), parse_mode="Markdown"
    )


@dp.message(Command("share"))
@dp.message(F.text == "üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è")
async def on_share(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è'"""
    bot_info = await bot.get_me()
    text = (
        "–ü—Ä–∏–∫—Ä–µ–ø–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç ‚Äî —á—Ç–æ–±—ã –≤—Å–µ–º –±—ã–ª–æ —É–¥–æ–±–Ω–µ–µ –∏—Å–∫–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–º–µ—Å—Ç–µ.\n\n"
        f"–î–æ–±–∞–≤–∏—Ç—å: t.me/{bot_info.username}?startgroup=true\n"
        f"–õ–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞: t.me/{bot_info.username}\n\n"
        "–ú–æ–∂–µ—à—å –¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å–æ–±—ã—Ç–∏–µ–º, –∫–æ–≥–¥–∞ –æ—Ç–∫—Ä–æ–µ—à—å –µ–≥–æ –∫–∞—Ä—Ç–æ—á–∫—É ‚Äî —è –ø—Ä–∏—à–ª—é deep-link."
    )
    await message.answer(text, reply_markup=main_menu_kb())


@dp.message(Command("admin_event"))
async def on_admin_event(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin_event –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ user_id)
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        command_parts = message.text.split()
        if len(command_parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_event <id_—Å–æ–±—ã—Ç–∏—è>")
            return

        event_id = int(command_parts[1])

        # –ò—â–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –ë–î
        with get_session() as session:
            event = session.get(Event, event_id)
            if not event:
                await message.answer(f"–°–æ–±—ã—Ç–∏–µ —Å ID {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ HTML
            title = html.escape(event.title)
            description = html.escape(event.description or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            location = html.escape(event.location_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            address = html.escape(getattr(event, "address", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"))
            url = html.escape(event.url or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            location_url = html.escape(event.location_url or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            source = html.escape(event.source or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            organizer = html.escape(event.organizer_username or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

            info_lines = [
                f"üîç <b>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è #{event_id}</b>",
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}",
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}",
                f"<b>–í—Ä–µ–º—è:</b> {event.time_local or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}",
                f"<b>–ú–µ—Å—Ç–æ:</b> {location}",
                f"<b>–ê–¥—Ä–µ—Å:</b> {address}",
                f"<b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</b> {event.lat}, {event.lng}",
                f"<b>URL —Å–æ–±—ã—Ç–∏—è:</b> {url}",
                f"<b>URL –º–µ—Å—Ç–∞:</b> {location_url}",
                f"<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {source}",
                f"<b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä:</b> {organizer}",
                f"<b>AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è:</b> {'–î–∞' if event.is_generated_by_ai else '–ù–µ—Ç'}",
            ]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ venue_name
            if not hasattr(event, "venue_name") or not getattr(event, "venue_name", None):
                info_lines.append("‚ö†Ô∏è <b>–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï:</b> venue_name –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
                logger.warning(f"–°–æ–±—ã—Ç–∏–µ {event_id}: venue_name –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º publishable
            is_publishable = bool(event.url or event.location_url)
            info_lines.append(f"<b>–ü—É–±–ª–∏–∫—É–µ–º–æ:</b> {'–î–∞' if is_publishable else '–ù–µ—Ç'}")

            if not is_publishable:
                info_lines.append("‚ö†Ô∏è <b>–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï:</b> –ù–µ—Ç source_url –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!")

            text = "\n".join(info_lines)
            await message.answer(text, parse_mode="HTML", disable_web_page_preview=True)

    except ValueError:
        await message.answer("ID —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ admin_event: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏–∏")


@dp.message(Command("diag_last"))
async def on_diag_last(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /diag_last –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        state = user_state.get(message.chat.id)
        if not state:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–ø—Ä–æ—Å–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        diag = state.get("diag", {})
        counts = state.get("counts", {})
        prepared = state.get("prepared", [])

        info_lines = [
            "<b>üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞</b>",
            f"<b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</b> {state.get('lat', 'N/A')}, {state.get('lng', 'N/A')}",
            f"<b>–†–∞–¥–∏—É—Å:</b> {state.get('radius', 'N/A')} –∫–º",
            f"<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</b> {state.get('page', 'N/A')}",
            "",
            "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b>",
            f"‚Ä¢ –í—Ö–æ–¥–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {diag.get('in', 0)}",
            f"‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {diag.get('kept', 0)}",
            f"‚Ä¢ –û—Ç–±—Ä–æ—à–µ–Ω–æ: {diag.get('dropped', 0)}",
            f"‚Ä¢ –ü—Ä–∏—á–∏–Ω—ã –æ—Ç–±—Ä–∞–∫–æ–≤–∫–∏: {', '.join(diag.get('reasons', []))}",
            "",
            "<b>üìà –ò—Ç–æ–≥–æ–≤—ã–µ —Å—á–µ—Ç—á–∏–∫–∏:</b>",
            f"‚Ä¢ –í—Å–µ–≥–æ: {counts.get('all', 0)}",
            f"‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ: {counts.get('moments', 0)}",
            f"‚Ä¢ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {counts.get('user', 0)}",
            f"‚Ä¢ –ò–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {counts.get('sources', 0)}",
        ]

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–æ–±—ã—Ç–∏–π
        if prepared:
            info_lines.extend(["", f"<b>üìã –ü–µ—Ä–≤—ã–µ {min(5, len(prepared))} —Å–æ–±—ã—Ç–∏–π:</b>"])
            for i, event in enumerate(prepared[:5], 1):
                event_type = event.get("type", "unknown")
                title = html.escape(event.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"))
                has_url = bool(get_source_url(event))
                info_lines.append(
                    f"{i}) <b>{title}</b> (—Ç–∏–ø: {event_type}, URL: {'–¥–∞' if has_url else '–Ω–µ—Ç'})"
                )

        text = "\n".join(info_lines)
        await message.answer(text, parse_mode="HTML", disable_web_page_preview=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ diag_last: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")


@dp.message(Command("help"))
@dp.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def on_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'"""
    help_text = (
        "ü§ñ **EventAroundBot - –ü–æ–º–æ—â—å**\n\n"
        "**üìç –ß—Ç–æ —Ä—è–¥–æ–º** - –∏—â–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞–¥–∏—É—Å–µ 5 –∫–º –æ—Ç –≤–∞—Å\n"
        "**‚ûï –°–æ–∑–¥–∞—Ç—å** - —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ\n"
        "**üìã –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è** - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è\n"
        "**üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è** - —Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞\n\n"
        "**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
        "1. –ù–∞–∂–º–∏—Ç–µ 'üìç –ß—Ç–æ —Ä—è–¥–æ–º'\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π —Å –∫–∞—Ä—Ç–æ–π\n\n"
        "**–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π:**\n"
        "ü§ñ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è\n"
        "üèõÔ∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ—Å—Ç–∞\n"
        "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä–∏ —Å–æ–±—ã—Ç–∏–π\n"
        "üì± –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏\n"
        "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞"
    )
    await message.answer(help_text, reply_markup=main_menu_kb(), parse_mode="Markdown")


@dp.message()
async def echo_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:", reply_markup=main_menu_kb())


@dp.callback_query(F.data.startswith("pg:"))
async def handle_pagination(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π"""

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
        token = callback.data.split(":", 1)[1]
        if token == "noop":
            await callback.answer("–≠—Ç–æ –∫—Ä–∞–π–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
            return

        page = int(token)

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state = user_state.get(callback.message.chat.id)
        if not state:
            await callback.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.")
            return

        prepared = state["prepared"]
        counts = state["counts"]

        # –†–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page_html, total_pages = render_page(prepared, page, page_size=5)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            render_header(counts) + "\n\n" + page_html,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=kb_pager(page, total_pages),
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state["page"] = page
        user_state[callback.message.chat.id] = state

        await callback.answer()

    except (ValueError, IndexError) as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@dp.callback_query(F.data.startswith("rx:"))
async def handle_expand_radius(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∏—Å–∫–∞"""

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–¥–∏—É—Å –∏–∑ callback_data: rx:radius
        new_radius = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state = user_state.get(callback.message.chat.id)
        if not state:
            await callback.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.")
            return

        lat = state["lat"]
        lng = state["lng"]

        logger.info(f"üîç –†–∞—Å—à–∏—Ä—è–µ–º –ø–æ–∏—Å–∫ –¥–æ {new_radius} –∫–º –æ—Ç ({lat}, {lng})")

        # –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ä–∞–¥–∏—É—Å–æ–º
        try:
            events = await enhanced_search_events(lat, lng, radius_km=new_radius)
            events = sort_events_by_time(events)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º –ø–æ–∏—Å–∫–µ: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏–π")
            return

        if not events:
            await callback.answer("–°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–∂–µ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ")
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ–±–æ–≥–∞—â–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        prepared, diag = prepare_events_for_feed(events, with_diag=True)
        logger.info(
            f"diag: in={diag['in']} kept={diag['kept']} dropped={diag['dropped']} reasons={diag['reasons']}"
        )

        for event in prepared:
            enrich_venue_name(event)
            event["distance_km"] = haversine_km(lat, lng, event["lat"], event["lng"])

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏ —Å—á–∏—Ç–∞–µ–º
        groups = group_by_type(prepared)
        counts = make_counts(groups)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_state[callback.message.chat.id] = {
            "prepared": prepared,
            "counts": counts,
            "lat": lat,
            "lng": lng,
            "radius": new_radius,
            "page": 1,
            "diag": diag,
        }

        # –†–µ–Ω–¥–µ—Ä–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        header_html = render_header(counts)
        page_html, total_pages = render_page(prepared, page=1, page_size=5)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            header_html + "\n\n" + page_html,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=kb_pager(1, total_pages),
        )
        await callback.answer(f"–†–∞–¥–∏—É—Å —Ä–∞—Å—à–∏—Ä–µ–Ω –¥–æ {new_radius} –∫–º")

    except (ValueError, IndexError) as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ —Ä–∞–¥–∏—É—Å–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ EventBot (aiogram 3.x)...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º health check —Å–µ—Ä–≤–µ—Ä –¥–ª—è Railway (—Ç–æ–ª—å–∫–æ –≤ polling —Ä–µ–∂–∏–º–µ)
    RUN_MODE = os.getenv("BOT_RUN_MODE", "polling")
    if RUN_MODE != "webhook":
        try:
            if health_server.start():
                logger.info("Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            else:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å health check —Å–µ—Ä–≤–µ—Ä")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ health check —Å–µ—Ä–≤–µ—Ä–∞: {e}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try:
        await bot.set_my_commands(
            [
                types.BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
                types.BotCommand(command="help", description="‚ùì –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
                types.BotCommand(command="nearby", description="üìç –ù–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏—è —Ä—è–¥–æ–º"),
                types.BotCommand(command="create", description="‚ûï –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ"),
                types.BotCommand(command="myevents", description="üìã –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è"),
                types.BotCommand(command="share", description="üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º"),
                types.BotCommand(
                    command="admin_event", description="üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è (–∞–¥–º–∏–Ω)"
                ),
                types.BotCommand(
                    command="diag_last", description="üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"
                ),
            ]
        )
        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: {e}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
    RUN_MODE = os.getenv("BOT_RUN_MODE", "polling")
    logger.info(f"–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞: {RUN_MODE}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    try:
        if RUN_MODE == "webhook":
            # Webhook —Ä–µ–∂–∏–º –¥–ª—è Railway
            WEBHOOK_URL = os.getenv("WEBHOOK_URL")
            if not WEBHOOK_URL:
                logger.error("WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è webhook —Ä–µ–∂–∏–º–∞")
                return

            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤—ã–∫–ª—é—á–∞–µ–º getUpdates –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Telegram
            await bot.delete_webhook(drop_pending_updates=True)
            await bot.set_webhook(url=WEBHOOK_URL)
            logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ä—Ç—É
            from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
            from aiohttp import web

            # –°–æ–∑–¥–∞–µ–º aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            app = web.Application()

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook handler
            webhook_path = "/webhook"
            webhook_handler = SimpleRequestHandler(
                dispatcher=dp,
                bot=bot,
            )
            webhook_handler.register(app, path=webhook_path)

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            setup_application(app, dp, bot=bot)

            # –î–æ–±–∞–≤–ª—è–µ–º health check endpoint –≤ webhook —Å–µ—Ä–≤–µ—Ä
            import time

            async def health_check(request):
                return web.json_response(
                    {
                        "status": "healthy",
                        "service": "EventBot Telegram Bot",
                        "timestamp": time.time(),
                        "uptime": "running",
                    }
                )

            app.router.add_get("/health", health_check)
            app.router.add_get("/", health_check)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä (webhook + health check)
            port = int(os.getenv("PORT", "8000"))
            logger.info(f"–ó–∞–ø—É—Å–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (webhook + health) –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            await web._run_app(app, host="0.0.0.0", port=port)

            logger.info("Webhook —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

        else:
            # Polling —Ä–µ–∂–∏–º –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            # –ü–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º —Å–Ω–∏–º–∞–µ–º –≤–µ–±—Ö—É–∫
            await bot.delete_webhook(drop_pending_updates=True)
            logger.info("Webhook —É–¥–∞–ª–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º polling")

            await dp.start_polling(bot)

    except asyncio.CancelledError:
        # –®—Ç–∞—Ç–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ ‚Äî –Ω–µ —à—É–º–∏–º
        logger.info("Polling cancelled (shutdown).")
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (KeyboardInterrupt).")
    finally:
        # –ó–∞–∫—Ä—ã—Ç—å —Å–µ—Ç–µ–≤—ã–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã –∞–∫–∫—É—Ä–∞—Ç–Ω–æ
        try:
            await dp.storage.close()
        except Exception:
            pass
        try:
            await bot.session.close()
        except Exception:
            pass
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")


if __name__ == "__main__":
    asyncio.run(main())
