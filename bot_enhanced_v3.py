#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è EventBot —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º —Å–æ–±—ã—Ç–∏–π (aiogram 3.x)
"""

import asyncio
import html
import logging
import os
import re
from datetime import UTC, datetime
from math import ceil
from urllib.parse import quote_plus, urlparse

from aiogram import Bot, Dispatcher, F, types
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    MenuButtonCommands,
    ReplyKeyboardMarkup,
)

from config import load_settings
from database import Event, Moment, User, create_all, get_session, init_engine
from simple_status_manager import (
    auto_close_events,
    change_event_status,
    format_event_for_display,
    get_status_change_buttons,
    get_user_events,
)
from utils.geo_utils import haversine_km
from utils.static_map import build_static_map_url, fetch_static_map
from utils.unified_events_service import UnifiedEventsService


def is_valid_url(url: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º URL
    """
    try:
        parsed = urlparse(url)
        return parsed.scheme in ("http", "https") and bool(parsed.netloc)
    except Exception:
        return False


def get_source_link(event: dict) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–±—ã—Ç–∏—è
    """
    source = event.get("source", "")

    if source == "ai_generated":
        return "AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"
    elif source == "popular_places":
        return "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ—Å—Ç–∞"
    elif source == "event_calendars":
        return "–ö–∞–ª–µ–Ω–¥–∞—Ä–∏ —Å–æ–±—ã—Ç–∏–π"
    elif source == "social_media":
        return "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏"
    else:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"


def get_short_source_link(event: dict) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–∞—Ä—Ç—ã
    """
    source = event.get("source", "")

    if source == "ai_generated":
        return "ü§ñ"
    elif source == "popular_places":
        return "üèõÔ∏è"
    elif source == "event_calendars":
        return "üìÖ"
    elif source == "social_media":
        return "üì±"
    else:
        return "üìå"


def create_enhanced_google_maps_url(user_lat: float, user_lng: float, events: list) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Google Maps —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–±—ã—Ç–∏—è—Ö
    """
    # –ë–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Google Maps
    base_url = "https://www.google.com/maps/search/"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–∫ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    search_queries = []
    for i, event in enumerate(events[:8], 1):  # –ú–∞–∫—Å–∏–º—É–º 8 —Å–æ–±—ã—Ç–∏–π –¥–ª—è URL
        title = event.get("title", "").replace(" ", "+")
        time_part = event.get("time_local", "").replace(" ", "+") if event.get("time_local") else ""

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: "–ù–∞–∑–≤–∞–Ω–∏–µ+—Å–æ–±—ã—Ç–∏—è+–≤—Ä–µ–º—è+–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"
        search_query = f"{title}"
        if time_part:
            search_query += f"+{time_part}"

        search_queries.append(search_query)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if search_queries:
        combined_search = "+".join(search_queries)
        return f"{base_url}{combined_search}/@{user_lat:.6f},{user_lng:.6f},13z"
    else:
        return f"{base_url}@{user_lat:.6f},{user_lng:.6f},13z"


def sort_events_by_time(events: list) -> list:
    """
    –°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–±–ª–∏–∂–∞–π—à–∏–µ –ø–µ—Ä–≤—ã–º–∏)
    """

    def get_event_time(event):
        time_str = event.get("time_local", "")
        if not time_str:
            return float("inf")  # –°–æ–±—ã—Ç–∏—è –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–æ–Ω–µ—Ü

        try:
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "2025-01-04 19:00"
            from datetime import datetime

            event_time = datetime.strptime(time_str, "%Y-%m-%d %H:%M")
            return event_time.timestamp()
        except (ValueError, TypeError):
            return float("inf")  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –∫–æ–Ω–µ—Ü

    return sorted(events, key=get_event_time)


def enrich_venue_name(e: dict) -> dict:
    """
    –û–±–æ–≥–∞—â–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Å—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    """
    if e.get("venue_name") and e.get("venue_name") not in [
        "",
        "–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è",
        "–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ",
    ]:
        return e

    # 1) –∏–∑ title/description

    VENUE_RX = r"(?:–≤|at|@)\s+([A-Za-z–ê-–Ø–∞-—è0-9''&\s.-]+)$"

    for field in ("title", "description"):
        v = (e.get(field) or "").strip()
        m = re.search(VENUE_RX, v)
        if m:
            venue_name = m.group(1).strip()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
            if len(venue_name) > 3 and venue_name not in ["–º–æ–º–µ–Ω—Ç", "—Å–æ–±—ã—Ç–∏–µ", "–≤—Å—Ç—Ä–µ—á–∞"]:
                e["venue_name"] = venue_name
                return e

    # 2) –µ—Å–ª–∏ –≤—Å—ë –µ—â—ë –ø—É—Å—Ç–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    if not e.get("venue_name") or e.get("venue_name") in [
        "",
        "–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è",
        "–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ",
    ]:
        e["venue_name"] = "üìç –õ–æ–∫–∞—Ü–∏—è —É—Ç–æ—á–Ω—è–µ—Ç—Å—è"

    return e


def create_google_maps_url(event: dict) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ Google Maps —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Å—Ç–∞ (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    """
    return build_maps_url(event)


def get_venue_name(event: dict) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è
    """
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: venue_name -> location_name -> address
    venue_name = event.get("venue_name") or event.get("location_name") or event.get("address") or ""

    # –§–∏–ª—å—Ç—Ä—É–µ–º –º—É—Å–æ—Ä–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    if venue_name in ["–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è", "–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ", "–õ–æ–∫–∞—Ü–∏—è", ""]:
        venue_name = ""

    # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
    if not venue_name and event.get("description"):
        description = event.get("description", "")
        # –ü—Ä–æ—Å—Ç—ã–µ —Ä–µ–≥—É–ª—è—Ä–∫–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Å—Ç–∞

        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "–≤ Canggu Studio", "at Museum", "@Place"
        patterns = [
            r"–≤\s+([^,.\n]+)",
            r"at\s+([^,.\n]+)",
            r"@([^\s,.\n]+)",
            r"–º–µ—Å—Ç–æ:\s*([^,.\n]+)",
            r"–∞–¥—Ä–µ—Å:\s*([^,.\n]+)",
        ]

        for pattern in patterns:
            match = re.search(pattern, description, re.IGNORECASE)
            if match:
                venue_name = match.group(1).strip()
                break

    # –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –ø—É—Å—Ç–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    if not venue_name:
        venue_name = "üìç –õ–æ–∫–∞—Ü–∏—è —É—Ç–æ—á–Ω—è–µ—Ç—Å—è"

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
    if len(venue_name) > 30:
        return venue_name[:27] + "..."

    return venue_name


def get_event_type_info(event: dict) -> tuple[str, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ —Å–æ–±—ã—Ç–∏—è (emoji, –Ω–∞–∑–≤–∞–Ω–∏–µ)
    """
    source = event.get("source", "")
    event_type = event.get("type", "")

    if event_type == "user":
        return "üë•", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ"
    elif event_type == "moment":
        return "‚ö°", "–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ"
    elif source == "ai_generated":
        return "ü§ñ", "AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"
    elif source == "popular_places":
        return "üèõÔ∏è", "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ—Å—Ç–∞"
    elif source == "event_calendars":
        return "üìÖ", "–ö–∞–ª–µ–Ω–¥–∞—Ä–∏"
    elif source == "social_media":
        return "üì±", "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏"
    else:
        return "üìå", "–î—Ä—É–≥–∏–µ"


def create_event_links(event: dict) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏—è (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    """
    maps_url = create_google_maps_url(event)
    source_url = get_source_url(event)

    links = [f"üó∫Ô∏è [–ú–∞—Ä—à—Ä—É—Ç]({maps_url})", f"üîó [–ò—Å—Ç–æ—á–Ω–∏–∫]({source_url})"]
    return " | ".join(links)


def group_events_by_type(events: list) -> dict[str, list]:
    """
    –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ —Ç–∏–ø–∞–º
    """
    groups = {
        "sources": [],  # –ò–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–∫–∞–ª–µ–Ω–¥–∞—Ä–∏, —Å–æ—Ü—Å–µ—Ç–∏)
        "users": [],  # –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        "moments": [],  # –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    }

    for event in events:
        event_type = event.get("type", "")
        event.get("source", "")

        if event_type == "user":
            groups["users"].append(event)
        elif event_type == "moment":
            groups["moments"].append(event)
        else:
            # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—á–∏—Ç–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
            groups["sources"].append(event)

    return groups


def is_mÂûÉÂúæ_url(url: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –º—É—Å–æ—Ä–Ω—ã–º (–ø—É—Å—Ç—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ Google Calendar –∏ —Ç.–¥.)
    """
    return sanitize_url(url) is None


def is_blacklisted_url(url: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –¥–æ–º–µ–Ω–æ–≤
    """
    if not url:
        return True
    try:
        from urllib.parse import urlparse

        p = urlparse(url)
        host = p.netloc.lower()
        return any(host == d or host.endswith("." + d) for d in BLACKLIST_DOMAINS)
    except Exception:
        return True


def prepare_events_for_feed(
    events: list[dict],
    user_point: tuple[float, float] = None,
    radius_km: float = None,
    with_diag: bool = False,
) -> tuple[list[dict], dict] | list[dict]:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤ –ª–µ–Ω—Ç–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç—Ä–∏ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏–π: source, user (moments), ai_parsed
    """
    from config import load_settings
    from logging_helpers import DropStats
    from venue_enrich import enrich_venue_from_text

    settings = load_settings()
    drop = DropStats()
    kept = []
    kept_by_type = {"source": 0, "user": 0, "ai_parsed": 0}

    for e in events:
        # 0) –°–Ω–∞—á–∞–ª–∞ –æ–±–æ–≥–∞—â–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –∏–∑ —Ç–µ–∫—Å—Ç–∞
        e = enrich_venue_from_text(e)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        source = e.get("source", "")
        input_type = e.get("type", "")
        event_type = "source"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –º–æ–º–µ–Ω—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if input_type == "user" or source in ["user_created", "user"]:
            event_type = "user"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ AI-–ø–∞—Ä—Å–∏–Ω–≥–æ–º
        elif input_type in ["ai", "ai_parsed", "ai_generated"] or e.get("ai_parsed") or source == "ai_parsed":
            event_type = input_type if input_type in ["ai", "ai_parsed", "ai_generated"] else "ai_parsed"
        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ - –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        else:
            event_type = "source"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ type –≤ —Å–æ–±—ã—Ç–∏–µ
        e["type"] = event_type

        title = (e.get("title") or "").strip() or "‚Äî"

        # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º URL —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        url = get_source_url(e)

        # –î–ª—è ai_parsed URL –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
        if event_type == "ai_parsed" and not url:
            drop.add("no_url", title)
            continue

        # –î–ª—è user (moments) URL –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
        if event_type == "user" and not url:
            # –ú–æ–º–µ–Ω—Ç—ã –º–æ–≥—É—Ç –Ω–µ –∏–º–µ—Ç—å URL
            pass

        # 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–∫–∞—Ü–∏–∏ (venue_name –ò–õ–ò address –ò–õ–ò coords)
        venue = e.get("venue", {})
        has_loc = any(
            [
                venue.get("name"),
                venue.get("address"),
                (venue.get("lat") is not None and venue.get("lon") is not None),
                e.get("venue_name"),
                e.get("address"),
                (e.get("lat") is not None and e.get("lng") is not None),
            ]
        )

        # –î–ª—è source –∏ ai*: –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –±–µ–∑ URL –ò –±–µ–∑ –ª–æ–∫–∞—Ü–∏–∏
        if event_type in ["source", "ai_parsed", "ai", "ai_generated"] and not url and not has_loc:
            drop.add("source_without_url_and_location", title)
            continue

        if not has_loc:
            drop.add("no_venue_or_location", title)
            continue

        # 3) –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –º–æ–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if event_type == "user":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL –¥–ª—è –º–æ–º–µ–Ω—Ç–æ–≤
            from datetime import UTC, datetime

            expires_utc = e.get("expires_utc")
            if expires_utc:
                if isinstance(expires_utc, str):
                    try:
                        expires_utc = datetime.fromisoformat(expires_utc.replace("Z", "+00:00"))
                    except Exception:
                        drop.add("invalid_expires_time", title)
                        continue

                if expires_utc < datetime.now(UTC):
                    drop.add("moment_expired", title)
                    continue

            # –î–ª—è –º–æ–º–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å
            moment_radius = settings.moment_max_radius_km
            if user_point and moment_radius is not None:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è
                event_lat = None
                event_lng = None

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É venue
                venue = e.get("venue", {})
                if venue.get("lat") is not None and venue.get("lon") is not None:
                    event_lat = venue.get("lat")
                    event_lng = venue.get("lon")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                elif e.get("lat") is not None and e.get("lng") is not None:
                    event_lat = e.get("lat")
                    event_lng = e.get("lng")

                if event_lat is not None and event_lng is not None:
                    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                    from utils.geo_utils import haversine_km

                    distance = haversine_km(user_point[0], user_point[1], event_lat, event_lng)
                    if distance > moment_radius:
                        drop.add("moment_out_of_radius", title)
                        continue
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∫ —Å–æ–±—ã—Ç–∏—é
                    e["distance_km"] = round(distance, 2)

        # 4) –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–¥–∏—É—Å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω user_point –∏ radius_km)
        elif user_point and radius_km is not None:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è
            event_lat = None
            event_lng = None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É venue
            venue = e.get("venue", {})
            if venue.get("lat") is not None and venue.get("lon") is not None:
                event_lat = venue.get("lat")
                event_lng = venue.get("lon")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            elif e.get("lat") is not None and e.get("lng") is not None:
                event_lat = e.get("lat")
                event_lng = e.get("lng")

            if event_lat is not None and event_lng is not None:
                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                from utils.geo_utils import haversine_km

                distance = haversine_km(user_point[0], user_point[1], event_lat, event_lng)
                if distance > radius_km:
                    drop.add("out_of_radius", title)
                    continue
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∫ —Å–æ–±—ã—Ç–∏—é
                e["distance_km"] = round(distance, 2)

        # 5) –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–µ–Ω–Ω—ã–µ/—Å–ø–∞–º-–ø—Ä–∞–≤–∏–ª–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–±—ã—Ç–∏–π —Å URL)
        if url and is_blacklisted_url(url):
            drop.add("blacklist_domain", title)
            continue

        # 6) –ü—Ä–æ–≤–µ—Ä—è–µ–º AI_GENERATE_SYNTHETIC —Ñ–ª–∞–≥
        if event_type == "ai_parsed" and not settings.ai_generate_synthetic:
            # –ï—Å–ª–∏ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É —Å–æ–±—ã—Ç–∏—è –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π URL
            if not url or not sanitize_url(url):
                drop.add("ai_synthetic_blocked", title)
                continue

        # OK ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        e = enrich_venue_name(e)
        kept.append(e)
        kept_by_type[event_type] = kept_by_type.get(event_type, 0) + 1

    # –õ–æ–≥–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
    radius_info = (
        f"radius_km={radius_km}, user_point=({user_point[0]:.4f},{user_point[1]:.4f})"
        if user_point and radius_km is not None
        else "no_radius_filter"
    )
    logger.info(f"{drop.summary(kept_by_type=kept_by_type, total=len(events))} | {radius_info}")

    diag = {
        "in": len(events),
        "kept": len(kept),
        "dropped": sum(drop.reasons.values()),
        "found_by_stream": {
            "source": kept_by_type["source"],
            "ai_parsed": kept_by_type["ai_parsed"],
            "moments": kept_by_type["user"],
        },
        "kept_by_type": kept_by_type,
        "reasons": list(drop.reasons.keys()),
        "reasons_top3": [f"{r}({n})" for r, n in drop.reasons.most_common(3)],
    }

    return (kept, diag) if with_diag else kept


def create_events_summary(events: list) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
    """
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ —Ç–∏–ø–∞–º
    source_count = sum(1 for e in events if e.get("type") == "source")
    ai_parsed_count = sum(1 for e in events if e.get("type") == "ai_parsed")
    moments_count = sum(1 for e in events if e.get("type") == "user")

    summary_lines = [f"üó∫ –ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π —Ä—è–¥–æ–º!"]

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–ª–µ–≤—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
    if source_count > 0:
        summary_lines.append(f"‚Ä¢ –ò–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {source_count}")
    if ai_parsed_count > 0:
        summary_lines.append(f"‚Ä¢ AI-–ø–∞—Ä—Å–∏–Ω–≥: {ai_parsed_count}")
    if moments_count > 0:
        summary_lines.append(f"‚Ä¢ –ú–æ–º–µ–Ω—Ç—ã: {moments_count}")

    return "\n".join(summary_lines)


async def send_compact_events_list(
    message: types.Message,
    events: list,
    user_lat: float,
    user_lng: float,
    page: int = 0,
    user_radius: float = None,
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ
    """
    from config import load_settings

    settings = load_settings()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–¥–∏—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
    radius = get_user_radius(message.from_user.id, settings.default_radius_km)

    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–º–µ–Ω—Ç—ã –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã
    if settings.moments_enable:
        try:
            moments = await get_active_moments_nearby(user_lat, user_lng, radius)
            events.extend(moments)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(moments)} –º–æ–º–µ–Ω—Ç–æ–≤ –∫ {len(events) - len(moments)} —Å–æ–±—ã—Ç–∏—è–º")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–º–µ–Ω—Ç–æ–≤: {e}")

    # 1) –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º (–ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ publishable)
    prepared, diag = prepare_events_for_feed(events, user_point=(user_lat, user_lng), with_diag=True)
    logger.info(f"prepared: kept={diag['kept']} dropped={diag['dropped']} reasons_top3={diag['reasons_top3']}")
    logger.info(
        f"found_by_stream: source={diag['found_by_stream']['source']} ai_parsed={diag['found_by_stream']['ai_parsed']} moments={diag['found_by_stream']['moments']}"
    )
    logger.info(
        f"kept_by_type: source={diag['kept_by_type'].get('source', 0)} user={diag['kept_by_type'].get('user', 0)} ai_parsed={diag['kept_by_type'].get('ai_parsed', 0)}"
    )

    # –û–±–æ–≥–∞—â–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –º–µ—Å—Ç –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º–∏
    for event in prepared:
        enrich_venue_name(event)
        event["distance_km"] = haversine_km(user_lat, user_lng, event["lat"], event["lng"])

    # 2) –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏ —Å—á–∏—Ç–∞–µ–º
    groups = group_by_type(prepared)
    counts = make_counts(groups)

    # 3) –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    region = "bali"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ë–∞–ª–∏
    if 55.0 <= user_lat <= 60.0 and 35.0 <= user_lng <= 40.0:  # –ú–æ—Å–∫–≤–∞
        region = "moscow"
    elif 59.0 <= user_lat <= 60.5 and 29.0 <= user_lng <= 31.0:  # –°–ü–±
        region = "spb"
    elif -9.0 <= user_lat <= -8.0 and 114.0 <= user_lng <= 116.0:  # –ë–∞–ª–∏
        region = "bali"

    # 4) –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞
    user_state[message.chat.id] = {
        "prepared": prepared,
        "counts": counts,
        "lat": user_lat,
        "lng": user_lng,
        "radius": int(radius),
        "page": 1,
        "diag": diag,
        "region": region,  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω
    }

    # 5) –†–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    header_html = render_header(counts, radius_km=int(radius))
    page_html, total_pages = render_page(prepared, page=page + 1, page_size=5)
    text = header_html + "\n\n" + page_html

    # 6) –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞
    inline_kb = kb_pager(page + 1, total_pages, int(radius)) if total_pages > 1 else None

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ
        await message.answer(text, reply_markup=inline_kb, parse_mode="HTML", disable_web_page_preview=True)
        logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} —Å–æ–±—ã—Ç–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (HTML)")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page + 1}: {e}")
        # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await message.answer(f"üìã –°–æ–±—ã—Ç–∏—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}):\n\n{text}", reply_markup=inline_kb)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π
    await send_main_menu(message)


async def edit_events_list_message(
    message: types.Message, events: list, user_lat: float, user_lng: float, page: int = 0
):
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ–±—ã—Ç–∏–π (–¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–¥–∏—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    radius = get_user_radius(message.from_user.id, settings.default_radius_km)

    # 1) —Å–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º (–ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ publishable)
    prepared = prepare_events_for_feed(events, user_point=(user_lat, user_lng))

    # –û–±–æ–≥–∞—â–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –º–µ—Å—Ç
    for event in prepared:
        enrich_venue_name(event)
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        event["distance_km"] = haversine_km(user_lat, user_lng, event["lat"], event["lng"])

    groups = {
        "moment": [e for e in prepared if e["type"] == "moment"],
        "user": [e for e in prepared if e["type"] == "user"],
        "source": [e for e in prepared if e["type"] == "source"],
    }
    counts = {
        "all": len(prepared),
        "moments": len(groups["moment"]),
        "user": len(groups["user"]),
        "sources": len(groups["source"]),
    }

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    events_per_page = 4
    total_pages = (len(prepared) + events_per_page - 1) // events_per_page
    page = max(0, min(page, total_pages - 1))

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * events_per_page
    end_idx = min(start_idx + events_per_page, len(prepared))
    page_events = prepared[start_idx:end_idx]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    header_html = render_header(counts, radius_km=int(radius))

    # –§–æ—Ä–º–∏—Ä—É–µ–º HTML –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏–π
    event_lines = []
    for idx, event in enumerate(page_events, start=start_idx + 1):
        event_html = render_event_html(event, idx)
        event_lines.append(event_html)

    text = header_html + "\n\n" + "\n".join(event_lines)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞
    inline_kb = kb_pager(page + 1, total_pages, int(radius)) if total_pages > 1 else None

    try:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.edit_text(text, reply_markup=inline_kb, parse_mode="HTML", disable_web_page_preview=True)
        logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} —Å–æ–±—ã—Ç–∏–π –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ (HTML)")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page + 1}: {e}")


async def send_detailed_events_list(message: types.Message, events: list, user_lat: float, user_lng: float):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await send_compact_events_list(message, events, user_lat, user_lng, page=0)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ ---


def build_maps_url(e: dict) -> str:
    """–°–æ–∑–¥–∞–µ—Ç URL –¥–ª—è Google Maps —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º venue_name > address > coordinates"""
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É venue –∏ —Å—Ç–∞—Ä—É—é
    venue = e.get("venue", {})
    name = (venue.get("name") or e.get("venue_name") or "").strip()
    addr = (venue.get("address") or e.get("address") or "").strip()
    lat = venue.get("lat") or e.get("lat")
    lng = venue.get("lon") or e.get("lng")

    if name:
        return f"https://www.google.com/maps/search/?api=1&query={quote_plus(name)}"
    if addr:
        return f"https://www.google.com/maps/search/?api=1&query={quote_plus(addr)}"
    if lat and lng:
        return f"https://www.google.com/maps/search/?api=1&query={lat},{lng}"
    return "https://www.google.com/maps"


def get_source_url(e: dict) -> str | None:
    """–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –∏—Å—Ç–∏–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
    t = e.get("type")
    candidates: list[str | None] = []

    if t == "source":
        # –î–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: url > booking_url > ticket_url > source_url
        candidates = [e.get("url"), e.get("booking_url"), e.get("ticket_url"), e.get("source_url"), e.get("link")]
    elif t in ("ai", "ai_parsed", "ai_generated"):
        # –î–ª—è AI-–ø–∞—Ä—Å–∏–Ω–≥–∞: source_url > url > original_url > location_url
        candidates = [e.get("source_url"), e.get("url"), e.get("original_url"), e.get("location_url")]
    elif t == "moment":
        # –î–ª—è –º–æ–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π URL –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
        candidates = [e.get("author_url"), e.get("chat_url"), e.get("location_url")]
    elif t == "user":
        # –î–ª—è –º–æ–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π URL –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
        candidates = [e.get("author_url"), e.get("chat_url")]
    else:
        # Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
        candidates = [e.get("source_url"), e.get("url"), e.get("link")]

    for u in candidates:
        if u:
            sanitized = sanitize_url(u)
            if sanitized:
                return sanitized
    return None  # –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ‚Äî –ª—É—á—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫—É


def render_event_html(e: dict, idx: int) -> str:
    """–†–µ–Ω–¥–µ—Ä–∏—Ç –æ–¥–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É —Å–æ–±—ã—Ç–∏—è –≤ HTML —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
    title = html.escape(e.get("title", "–°–æ–±—ã—Ç–∏–µ"))
    when = e.get("when_str", "")
    dist = f"{e['distance_km']:.1f} –∫–º" if e.get("distance_km") is not None else ""

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    event_type = e.get("type")
    if not event_type:
        source = e.get("source", "")
        if source == "user":
            event_type = "user"
        else:
            event_type = "source"

    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É venue –∏ —Å—Ç–∞—Ä—É—é
    venue = e.get("venue", {})
    venue_name = venue.get("name") or e.get("venue_name")
    venue_address = venue.get("address") or e.get("address")

    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: venue_name ‚Üí address ‚Üí coords
    if venue_name:
        venue_display = html.escape(venue_name)
    elif venue_address:
        venue_display = html.escape(venue_address)
    elif e.get("lat") and e.get("lng"):
        venue_display = f"–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ({e['lat']:.4f}, {e['lng']:.4f})"
    else:
        venue_display = "üìç –õ–æ–∫–∞—Ü–∏—è —É—Ç–æ—á–Ω—è–µ—Ç—Å—è"

    # –ò—Å—Ç–æ—á–Ω–∏–∫/–ê–≤—Ç–æ—Ä —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
    if event_type == "user":
        # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∞
        author_username = e.get("organizer_username") or e.get("creator_username") or e.get("author_username")
        if author_username:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            src_part = (
                f'üë§ <a href="tg://user?id={e.get("organizer_id", "")}">–ê–≤—Ç–æ—Ä @{html.escape(author_username)}</a>'
            )
        else:
            # –ï—Å–ª–∏ username –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å organizer_id, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ ID
            organizer_id = e.get("organizer_id")
            if organizer_id:
                src_part = f'üë§ <a href="tg://user?id={organizer_id}">–ê–≤—Ç–æ—Ä</a>'
            else:
                src_part = "üë§ –ê–≤—Ç–æ—Ä"
    else:
        # –î–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ AI-–ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
        src = get_source_url(e)
        if src:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            from urllib.parse import urlparse

            try:
                domain = urlparse(src).netloc
                src_part = f'üîó <a href="{html.escape(src)}">–ò—Å—Ç–æ—á–Ω–∏–∫ ({domain})</a>'
            except Exception:
                src_part = f'üîó <a href="{html.escape(src)}">–ò—Å—Ç–æ—á–Ω–∏–∫</a>'
        else:
            src_part = "‚ÑπÔ∏è –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω"

    # –ú–∞—Ä—à—Ä—É—Ç —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º venue_name ‚Üí address ‚Üí coords
    map_part = f'üöó <a href="{build_maps_url(e)}">–ú–∞—Ä—à—Ä—É—Ç</a>'

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –º–æ–º–µ–Ω—Ç–æ–≤
    timer_part = ""
    if event_type == "user":
        expires_utc = e.get("expires_utc")
        if expires_utc:
            from datetime import UTC, datetime

            try:
                if isinstance(expires_utc, str):
                    expires_utc = datetime.fromisoformat(expires_utc.replace("Z", "+00:00"))

                now = datetime.now(UTC)
                if expires_utc > now:
                    remaining = expires_utc - now
                    hours = int(remaining.total_seconds() // 3600)
                    minutes = int((remaining.total_seconds() % 3600) // 60)

                    if hours > 0:
                        timer_part = f" ‚è≥ –µ—â—ë {hours}—á {minutes}–º"
                    else:
                        timer_part = f" ‚è≥ –µ—â—ë {minutes}–º"
            except Exception:
                pass

    return f"{idx}) <b>{title}</b> ‚Äî {when} ({dist}){timer_part}\nüìç {venue_display}\n{src_part}  {map_part}\n"


def render_fallback(lat: float, lng: float) -> str:
    """Fallback —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ"""
    return (
        f"üó∫ <b>–ù–∞–π–¥–µ–Ω–æ —Ä—è–¥–æ–º: 0</b>\n"
        f"‚Ä¢ ‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ: 0\n\n"
        f"1) <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–∏—Å–∫</b> ‚Äî (0.0 –∫–º)\n"
        f"üìç –õ–æ–∫–∞—Ü–∏—è —É—Ç–æ—á–Ω—è–µ—Ç—Å—è\n"
        f'‚ÑπÔ∏è –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω  üöó <a href="https://www.google.com/maps/search/?api=1&query={lat},{lng}">–ú–∞—Ä—à—Ä—É—Ç</a>\n\n'
        f"2) <b>–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—ë —Å–æ–±—ã—Ç–∏–µ</b> ‚Äî (0.0 –∫–º)\n"
        f"üìç –õ–æ–∫–∞—Ü–∏—è —É—Ç–æ—á–Ω—è–µ—Ç—Å—è\n"
        f'‚ÑπÔ∏è –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω  üöó <a href="https://www.google.com/maps/search/?api=1&query={lat},{lng}">–ú–∞—Ä—à—Ä—É—Ç</a>\n\n'
        f"3) <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ</b> ‚Äî (0.0 –∫–º)\n"
        f"üìç –õ–æ–∫–∞—Ü–∏—è —É—Ç–æ—á–Ω—è–µ—Ç—Å—è\n"
        f'‚ÑπÔ∏è –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω  üöó <a href="https://www.google.com/maps/search/?api=1&query={lat},{lng}">–ú–∞—Ä—à—Ä—É—Ç</a>'
    )


def render_page(events: list[dict], page: int, page_size: int = 5) -> tuple[str, int]:
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–±—ã—Ç–∏–π
    events ‚Äî —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ prepared (publishable) –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ distance/time
    page    ‚Äî 1..N
    return: (html_text, total_pages)
    """
    if not events:
        return "–ü–æ–±–ª–∏–∑–æ—Å—Ç–∏ –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏.", 1

    total_pages = max(1, ceil(len(events) / page_size))
    page = max(1, min(page, total_pages))
    start = (page - 1) * page_size
    end = start + page_size

    parts = []
    for idx, e in enumerate(events[start:end], start=start + 1):
        parts.append(render_event_html(e, idx))

    return "\n".join(parts).strip(), total_pages


def kb_pager(page: int, total: int, current_radius: int = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞"""
    from config import load_settings

    settings = load_settings()

    prev_cb = f"pg:{page - 1}" if page > 1 else "pg:noop"
    next_cb = f"pg:{page + 1}" if page < total else "pg:noop"

    buttons = [
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=prev_cb),
            InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è", callback_data=next_cb),
        ],
        [InlineKeyboardButton(text=f"–°—Ç—Ä. {page}/{total}", callback_data="pg:noop")],
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ä–∞–¥–∏—É—Å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ
    if current_radius is None:
        current_radius = int(settings.default_radius_km)

    radius_step = int(settings.radius_step_km)
    max_radius = int(settings.max_radius_km)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞
    next_radius = current_radius + radius_step
    while next_radius <= max_radius:
        buttons.append(
            [
                InlineKeyboardButton(
                    text=f"üîç –†–∞—Å—à–∏—Ä–∏—Ç—å –¥–æ {next_radius} –∫–º",
                    callback_data=f"rx:{next_radius}",
                )
            ]
        )
        next_radius += radius_step

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def group_by_type(events):
    """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ —Ç–∏–ø–∞–º —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
    return {
        "source": [e for e in events if e.get("type") == "source"],
        "user": [e for e in events if e.get("type") == "user"],
        "ai_parsed": [e for e in events if e.get("type") == "ai_parsed"],
        "ai": [e for e in events if e.get("type") == "ai"],
        "ai_generated": [e for e in events if e.get("type") == "ai_generated"],
    }


def make_counts(groups):
    """–°–æ–∑–¥–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º"""
    total = sum(len(v) for v in groups.values())
    ai_count = len(groups.get("ai", [])) + len(groups.get("ai_parsed", [])) + len(groups.get("ai_generated", []))
    return {
        "all": total,
        "moments": len(groups.get("user", [])),  # –ú–æ–º–µ–Ω—Ç—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∫–ª—é—á–µ "user"
        "user": len(groups.get("user", [])),
        "sources": len(groups.get("source", [])) + ai_count,  # AI —Å–æ–±—ã—Ç–∏—è —Å—á–∏—Ç–∞—é—Ç—Å—è –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    }


def render_header(counts, radius_km: int = None) -> str:
    """–†–µ–Ω–¥–µ—Ä–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Å—á–µ—Ç—á–∏–∫–∞–º–∏ (—Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–ª–µ–≤—ã–µ)"""
    if radius_km:
        lines = [f"üó∫ –í —Ä–∞–¥–∏—É—Å–µ {radius_km} –∫–º –Ω–∞–π–¥–µ–Ω–æ: <b>{counts['all']}</b>"]
    else:
        lines = [f"üó∫ –ù–∞–π–¥–µ–Ω–æ —Ä—è–¥–æ–º: <b>{counts['all']}</b>"]

    if counts["moments"]:
        lines.append(f"‚Ä¢ ‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ: {counts['moments']}")
    if counts["user"]:
        lines.append(f"‚Ä¢ üë• –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {counts['user']}")
    if counts["sources"]:
        lines.append(f"‚Ä¢ üåê –ò–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {counts['sources']}")
    return "\n".join(lines)


# --- /–≠—Ç–∞–ª–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# –î–ª—è –±–æ—Ç–∞ ‚Äî —Ç–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
settings = load_settings(require_bot=True)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è prepared —Å–æ–±—ã—Ç–∏–π –ø–æ chat_id
user_state = {}

# ---------- –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ ----------
RADIUS_OPTIONS = (5, 10, 15, 20)
CB_RADIUS_PREFIX = "rx:"  # callback_data –≤—Ä–æ–¥–µ "rx:10"
RADIUS_KEY = "radius_km"


def get_user_radius(user_id: int, default_km: int) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–¥–∏—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π"""
    state = user_state.get(user_id) or {}
    value = state.get(RADIUS_KEY)
    return int(value) if isinstance(value, int | float | str) and str(value).isdigit() else default_km


def set_user_radius(user_id: int, radius_km: int) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–¥–∏—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
    st = user_state.setdefault(user_id, {})
    st[RADIUS_KEY] = int(radius_km)


# ---------- URL helpers ----------
BLACKLIST_DOMAINS = {"example.com", "example.org", "example.net"}


def sanitize_url(u: str | None) -> str | None:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –º—É—Å–æ—Ä–Ω—ã–µ URL –≤–∫–ª—é—á–∞—è example.com"""
    if not u:
        return None
    try:
        p = urlparse(u)
    except Exception:
        return None
    if p.scheme not in ("http", "https") or not p.netloc:
        return None
    host = p.netloc.lower()
    if any(host == d or host.endswith("." + d) for d in BLACKLIST_DOMAINS):
        return None
    # –†–∞–∑—Ä–µ—à–∞–µ–º Google Calendar —Å—Å—ã–ª–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–æ–±—ã—Ç–∏—è
    if "calendar.google.com" in host:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ–±—ã—Ç–∏—è
        if any(param in u for param in ["eid=", "event=", "cid="]):
            return u
        # –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        return None
    return u


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–º–µ–Ω—Ç–∞–º–∏
async def check_daily_limit(user_id: int) -> tuple[bool, int]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –º–æ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from datetime import UTC, datetime

    from config import load_settings

    settings = load_settings()

    with get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –ø–æ UTC
        today_start = datetime.now(UTC).replace(hour=0, minute=0, second=0, microsecond=0)

        # –°—á–∏—Ç–∞–µ–º –º–æ–º–µ–Ω—Ç—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
        count = (
            session.query(Moment)
            .filter(
                Moment.user_id == user_id,
                Moment.created_at >= today_start,
                Moment.is_active is True,
            )
            .count()
        )

        return count < settings.moment_daily_limit, count


async def create_moment(user_id: int, username: str, title: str, lat: float, lng: float, ttl_minutes: int) -> Moment:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–æ–≤"""
    from datetime import UTC, datetime, timedelta

    from config import load_settings

    settings = load_settings()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
    can_create, current_count = await check_daily_limit(user_id)
    if not can_create:
        raise ValueError(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç: {settings.moment_daily_limit} –º–æ–º–µ–Ω—Ç–∞ –≤ –¥–µ–Ω—å")

    expires_at = datetime.now(UTC) + timedelta(minutes=ttl_minutes)

    with get_session() as session:
        moment = Moment(
            user_id=user_id,
            username=username,
            title=title,
            location_lat=lat,
            location_lng=lng,
            created_at=datetime.now(UTC),
            expires_at=expires_at,
            is_active=True,
            # Legacy –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            template=title,
            text=title,
            lat=lat,
            lng=lng,
            created_utc=datetime.now(UTC),
            expires_utc=expires_at,
            status="open",
        )
        session.add(moment)
        session.commit()
        session.refresh(moment)
        return moment


async def get_active_moments_nearby(lat: float, lng: float, radius_km: float = None) -> list[dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã —Ä—è–¥–æ–º —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏"""
    from datetime import UTC, datetime

    from config import load_settings

    settings = load_settings()
    if radius_km is None:
        radius_km = settings.moment_max_radius_km

    with get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
        moments = session.query(Moment).filter(Moment.is_active is True, Moment.expires_at > datetime.now(UTC)).all()

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–∞–¥–∏—É—Å—É –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç —Å–æ–±—ã—Ç–∏–π
        nearby_moments = []
        for moment in moments:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è, fallback –Ω–∞ legacy
            moment_lat = moment.location_lat or moment.lat
            moment_lng = moment.location_lng or moment.lng

            if moment_lat and moment_lng:
                distance = haversine_km(lat, lng, moment_lat, moment_lng)
                if distance <= radius_km:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º username –∏–∑ –º–æ–º–µ–Ω—Ç–∞ –∏–ª–∏ –∏–∑ User
                    creator_username = moment.username
                    if not creator_username:
                        try:
                            creator = session.get(User, moment.user_id)
                            if creator and creator.username:
                                creator_username = creator.username
                        except Exception:
                            pass

                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–æ–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç —Å–æ–±—ã—Ç–∏—è
                    event_dict = {
                        "id": f"moment_{moment.id}",
                        "type": "user",
                        "title": moment.title or moment.template or "–ú–æ–º–µ–Ω—Ç",
                        "description": moment.text or moment.title,
                        "lat": moment_lat,
                        "lng": moment_lng,
                        "venue": {"lat": moment_lat, "lon": moment_lng},
                        "creator_id": moment.user_id,
                        "creator_username": creator_username,
                        "expires_utc": (moment.expires_at or moment.expires_utc).isoformat(),
                        "created_utc": (moment.created_at or moment.created_utc).isoformat(),
                        "distance_km": round(distance, 2),
                        "when_str": "—Å–µ–π—á–∞—Å",
                        "source": "user_created",
                    }
                    nearby_moments.append(event_dict)

        return nearby_moments


async def cleanup_expired_moments():
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –º–æ–º–µ–Ω—Ç—ã"""
    from datetime import UTC, datetime

    try:
        with get_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è is_active
            try:
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –º–æ–º–µ–Ω—Ç—ã
                expired_count = (
                    session.query(Moment)
                    .filter(Moment.is_active is True, Moment.expires_at < datetime.now(UTC))
                    .update({"is_active": False})
                )
                session.commit()
                logger.info(f"–û—á–∏—Å—Ç–∫–∞ –º–æ–º–µ–Ω—Ç–æ–≤: –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {expired_count}")
                return expired_count
            except Exception as e:
                if "column" in str(e) and "is_active" in str(e):
                    logger.warning("‚ö†Ô∏è –ü–æ–ª–µ is_active –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É")
                    return 0
                else:
                    raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –º–æ–º–µ–Ω—Ç–æ–≤: {e}")
        return 0


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_engine(settings.database_url)
create_all()

# Health check —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –≤ main() –≤–º–µ—Å—Ç–µ —Å webhook

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=settings.telegram_token)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class EventCreation(StatesGroup):
    waiting_for_title = State()
    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_location_type = State()  # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ª–æ–∫–∞—Ü–∏–∏
    waiting_for_location_link = State()  # –í–≤–æ–¥ —Å—Å—ã–ª–∫–∏ Google Maps
    waiting_for_location = State()  # Legacy - –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    waiting_for_description = State()
    confirmation = State()


class MomentCreation(StatesGroup):
    waiting_for_template = State()
    waiting_for_custom_title = State()
    waiting_for_location = State()
    location_confirmed = State()
    waiting_for_ttl = State()
    preview_confirmed = State()


class EventEditing(StatesGroup):
    choosing_field = State()
    waiting_for_title = State()
    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_location = State()
    waiting_for_description = State()


def edit_event_keyboard(event_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìå –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_title_{event_id}")],
            [InlineKeyboardButton(text="üìÖ –î–∞—Ç–∞", callback_data=f"edit_date_{event_id}")],
            [InlineKeyboardButton(text="‚è∞ –í—Ä–µ–º—è", callback_data=f"edit_time_{event_id}")],
            [InlineKeyboardButton(text="üìç –õ–æ–∫–∞—Ü–∏—è", callback_data=f"edit_location_{event_id}")],
            [InlineKeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_description_{event_id}")],
            [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"edit_finish_{event_id}")],
        ]
    )


def update_event_field(event_id: int, field: str, value: str, user_id: int) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ —Å–æ–±—ã—Ç–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    from datetime import datetime

    try:
        with get_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            event = session.query(Event).filter(Event.id == event_id, Event.organizer_id == user_id).first()

            if not event:
                logging.warning(f"–°–æ–±—ã—Ç–∏–µ {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                return False

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
            if field == "title":
                event.title = value
                logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è {event_id}: '{value}'")
            elif field == "starts_at":
                # –î–ª—è –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –Ω—É–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å
                try:
                    if " " in value:
                        # –ü–æ–ª–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
                        event.starts_at = datetime.strptime(value, "%d.%m.%Y %H:%M")
                    else:
                        # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –≤—Ä–µ–º—è
                        new_date = datetime.strptime(value, "%d.%m.%Y")
                        if event.starts_at:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –≤—Ä–µ–º—è
                            existing_time = event.starts_at.time()
                            event.starts_at = new_date.replace(
                                hour=existing_time.hour, minute=existing_time.minute, second=existing_time.second
                            )
                        else:
                            # –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –±—ã–ª–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 00:00
                            event.starts_at = new_date
                    logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è {event_id}: '{value}'")
                except ValueError as ve:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã '{value}': {ve}")
                    return False
            elif field == "location_name":
                event.location_name = value
                logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è {event_id}: '{value}'")
            elif field == "description":
                event.description = value
                logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è {event_id}: '{value}'")
            else:
                logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {field}")
                return False

            event.updated_at_utc = datetime.now(UTC)
            session.commit()
            logging.info(f"–°–æ–±—ã—Ç–∏–µ {event_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–î")
            return True

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")
        return False


async def send_main_menu(message_or_callback, text: str = "üè† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if hasattr(message_or_callback, "message"):
        # –≠—Ç–æ callback query
        await message_or_callback.message.answer(text, reply_markup=main_menu_kb())
    else:
        # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message_or_callback.answer(text, reply_markup=main_menu_kb())


def main_menu_kb() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    from config import load_settings

    settings = load_settings()

    keyboard = [
        [KeyboardButton(text="üìç –ß—Ç–æ —Ä—è–¥–æ–º"), KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å")],
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –º–æ–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –≤–∫–ª—é—á–µ–Ω—ã
    if settings.moments_enable:
        keyboard.append([KeyboardButton(text="‚ö° –°–æ–∑–¥–∞—Ç—å –ú–æ–º–µ–Ω—Ç")])

    keyboard.extend(
        [
            [KeyboardButton(text="üìã –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è"), KeyboardButton(text="üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è")],
            [KeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–¥–∏—É—Å–∞"), KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")],
            [KeyboardButton(text="üöÄ –°—Ç–∞—Ä—Ç")],
        ]
    )

    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def kb_radius(current: int | None = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∏—Å–∫–∞ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ"""
    buttons = []
    for km in RADIUS_OPTIONS:
        label = f"{'‚úÖ ' if km == current else ''}{km} –∫–º"
        buttons.append(InlineKeyboardButton(text=label, callback_data=f"{CB_RADIUS_PREFIX}{km}"))
    # –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∏–∑ 4 –∫–Ω–æ–ø–æ–∫
    return InlineKeyboardMarkup(inline_keyboard=[buttons])


def radius_selection_kb() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∏—Å–∫–∞ (legacy)"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üîç 5 –∫–º", callback_data="radius:5"),
                InlineKeyboardButton(text="üîç 10 –∫–º", callback_data="radius:10"),
                InlineKeyboardButton(text="üîç 15 –∫–º", callback_data="radius:15"),
            ],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="radius:cancel")],
        ]
    )


@dp.message(F.text == "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–¥–∏—É—Å–∞")
async def cmd_radius_settings(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∏—Å–∫–∞"""
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–¥–∏—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –ë–î
    current_radius = get_user_radius(user_id, settings.default_radius_km)

    await message.answer(
        f"üîß **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∏—Å–∫–∞**\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ä–∞–¥–∏—É—Å: **{current_radius} –∫–º**\n\n"
        f"–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —Ä–∞–¥–∏—É—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π:",
        parse_mode="Markdown",
        reply_markup=kb_radius(current_radius),
    )


@dp.message(Command("start"))
@dp.message(F.text == "üöÄ –°—Ç–∞—Ä—Ç")
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    with get_session() as session:
        user = session.get(User, user_id)
        if not user:
            user = User(
                id=user_id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
            )
            session.add(user)
            session.commit()

    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø EventAroundBot. –ü–æ–º–æ–≥–∞—é –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–æ–±—ã—Ç–∏—è —Ä—è–¥–æ–º –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏.\n\n"
        "üéØ –ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –ò—Å–∫–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞–¥–∏—É—Å–µ 5 –∫–º –æ—Ç –≤–∞—Å\n"
        "‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å AI —Å–æ–±—ã—Ç–∏—è\n"
        "‚Ä¢ –ò—Å–∫–∞—Ç—å –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –≤–∞—à–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è\n\n"
        "–ù–∞–∂–º–∏—Ç–µ 'üìç –ß—Ç–æ —Ä—è–¥–æ–º' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é!"
    )

    await message.answer(welcome_text, reply_markup=main_menu_kb())


@dp.message(Command("nearby"))
@dp.message(F.text == "üìç –ß—Ç–æ —Ä—è–¥–æ–º")
async def on_what_nearby(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ß—Ç–æ —Ä—è–¥–æ–º'"""
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å —Å–≤–µ–∂—É—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é, —á—Ç–æ–±—ã —è –Ω–∞—à–ª–∞ —Å–æ–±—ã—Ç–∏—è —Ä—è–¥–æ–º ‚ú®",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
            resize_keyboard=True,
        ),
    )


@dp.message(F.location)
async def on_location(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    lat = message.location.latitude
    lng = message.location.longitude

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    logger.info(f"üìç –ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: lat={lat} lon={lng} (–∏—Å—Ç–æ—á–Ω–∏–∫=–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loading_message = await message.answer(
        "üîç –ò—â—É —Å–æ–±—ã—Ç–∏—è —Ä—è–¥–æ–º...",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîç", callback_data="loading")]]),
    )

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ —Ä–∞–¥–∏—É—Å
        radius = get_user_radius(message.from_user.id, settings.default_radius_km)
        with get_session() as session:
            user = session.get(User, message.from_user.id)
            if user:
                user.last_lat = lat
                user.last_lng = lng
                user.last_geo_at_utc = datetime.now(UTC)
                session.commit()

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
        logger.info(f"üîé –ü–æ–∏—Å–∫ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏=({lat}, {lng}) —Ä–∞–¥–∏—É—Å={radius}–∫–º –∏—Å—Ç–æ—á–Ω–∏–∫=–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

        # –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        try:
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç ({lat}, {lng}) —Å —Ä–∞–¥–∏—É—Å–æ–º {radius} –∫–º")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
            from database import get_engine
            from utils.simple_timezone import get_city_from_coordinates

            engine = get_engine()
            events_service = UnifiedEventsService(engine)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            city = get_city_from_coordinates(lat, lng)
            logger.info(f"üåç –û–ø—Ä–µ–¥–µ–ª–µ–Ω –≥–æ—Ä–æ–¥: {city}")

            # –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è
            events = events_service.search_events_today(city=city, user_lat=lat, user_lng=lng, radius_km=int(radius))

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            formatted_events = []
            for event in events:
                formatted_events.append(
                    {
                        "title": event["title"],
                        "description": event["description"],
                        "time_local": event["starts_at"].strftime("%Y-%m-%d %H:%M"),
                        "location_name": event["location_name"],
                        "location_url": event["location_url"],
                        "lat": event["lat"],
                        "lng": event["lng"],
                        "source": event["source_type"],
                        "url": event.get("event_url", ""),
                        "community_name": "",
                        "community_link": "",
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
                        "organizer_id": event.get("organizer_id"),
                        "organizer_username": event.get("organizer_username"),
                    }
                )

            events = formatted_events
            logger.info(f"‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π")
        except Exception:
            logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏–π")
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                await loading_message.delete()
            except Exception:
                pass
            fallback = render_fallback(lat, lng)
            await message.answer(
                fallback,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=main_menu_kb(),
            )
            return

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–±–ª–∏–∂–∞–π—à–∏–µ –ø–µ—Ä–≤—ã–º–∏)
        events = sort_events_by_time(events)
        logger.info("üìÖ –°–æ–±—ã—Ç–∏—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏")

        # –ï–¥–∏–Ω—ã–π –∫–æ–Ω–≤–µ–π–µ—Ä: prepared ‚Üí groups ‚Üí counts ‚Üí render
        try:
            prepared, diag = prepare_events_for_feed(
                events, user_point=(lat, lng), radius_km=int(radius), with_diag=True
            )
            logger.info(f"prepared: kept={diag['kept']} dropped={diag['dropped']} reasons_top3={diag['reasons_top3']}")
            logger.info(
                f"kept_by_type: ai={diag['kept_by_type'].get('ai_parsed', 0)} user={diag['kept_by_type'].get('user', 0)} source={diag['kept_by_type'].get('source', 0)}"
            )

            # –û–±–æ–≥–∞—â–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –º–µ—Å—Ç (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —É–∂–µ –≤—ã—á–∏—Å–ª–µ–Ω—ã –≤ prepare_events_for_feed)
            for event in prepared:
                enrich_venue_name(event)

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏ —Å—á–∏—Ç–∞–µ–º
            groups = group_by_type(prepared)
            counts = make_counts(groups)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–±—ã—Ç–∏—è –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            if not prepared:
                logger.info("üì≠ –°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")

                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞
                keyboard_buttons = []
                current_radius = int(radius)
                radius_step = int(settings.radius_step_km)
                max_radius = int(settings.max_radius_km)

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞
                next_radius = current_radius + radius_step
                while next_radius <= max_radius:
                    keyboard_buttons.append(
                        [
                            InlineKeyboardButton(
                                text=f"üîç –†–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–∏—Å–∫ –¥–æ {next_radius} –∫–º",
                                callback_data=f"rx:{next_radius}",
                            )
                        ]
                    )
                    next_radius += radius_step

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
                keyboard_buttons.append(
                    [
                        InlineKeyboardButton(
                            text="‚ûï –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ",
                            callback_data="create_event",
                        )
                    ]
                )

                inline_kb = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
                try:
                    await loading_message.delete()
                except Exception:
                    pass

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                region = "bali"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ë–∞–ª–∏
                if 55.0 <= lat <= 60.0 and 35.0 <= lng <= 40.0:  # –ú–æ—Å–∫–≤–∞
                    region = "moscow"
                elif 59.0 <= lat <= 60.5 and 29.0 <= lng <= 31.0:  # –°–ü–±
                    region = "spb"
                elif -9.0 <= lat <= -8.0 and 114.0 <= lng <= 116.0:  # –ë–∞–ª–∏
                    region = "bali"

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–∂–µ –∫–æ–≥–¥–∞ —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç
                user_state[message.chat.id] = {
                    "prepared": [],
                    "counts": {},
                    "lat": lat,
                    "lng": lng,
                    "radius": int(current_radius),
                    "page": 1,
                    "diag": diag,
                    "region": region,
                }
                logger.info(
                    f"üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}: lat={lat}, lng={lng}, radius={current_radius}, region={region}"
                )

                await message.answer(
                    f"üìÖ –í —Ä–∞–¥–∏—É—Å–µ {current_radius} –∫–º —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                    f"üí° –ü–æ–ø—Ä–æ–±—É–π —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–∏—Å–∫ –¥–æ {current_radius + int(settings.radius_step_km)} –∫–º –∏–ª–∏ —Å–æ–∑–¥–∞–π —Å–≤–æ—ë —Å–æ–±—ã—Ç–∏–µ!",
                    reply_markup=inline_kb,
                )

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
                await send_main_menu(message)
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞
            user_state[message.chat.id] = {
                "prepared": prepared,
                "counts": counts,
                "lat": lat,
                "lng": lng,
                "radius": int(radius),
                "page": 1,
                "diag": diag,
            }
            logger.info(
                f"üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}: lat={lat}, lng={lng}, radius={radius}"
            )

            # 4) –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç—á—ë—Ç–æ–º
            header_html = render_header(counts, radius_km=int(radius))

            # 5) –†–µ–Ω–¥–µ—Ä–∏–º –ø–µ—Ä–≤—ã–µ 3 —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–∞—Ä—Ç—ã
            page_html, _ = render_page(prepared, page=1, page_size=3)
            short_caption = header_html + "\n\n" + page_html

            if len(prepared) > 3:
                short_caption += f"\n\n... –∏ –µ—â–µ {len(prepared) - 3} —Å–æ–±—ã—Ç–∏–π"

            short_caption += "\n\nüí° <b>–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è Google Maps!</b>"

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–π –º–∞–ª–æ
            if counts["all"] < 5:
                next_radius = int(radius) + int(settings.radius_step_km)
                short_caption += f"\nüîç <i>–ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–∏—Å–∫ –¥–æ {next_radius} –∫–º</i>"

            # –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É —Å –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
            points = []
            for i, event in enumerate(prepared[:12], 1):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                event_lat = event.get("lat")
                event_lng = event.get("lng")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–∞–ª–∏–¥–Ω—ã–µ
                if event_lat is not None and event_lng is not None:
                    if -90 <= event_lat <= 90 and -180 <= event_lng <= 180:
                        points.append((str(i), event_lat, event_lng))  # –ú–µ—Ç–∫–∏ 1, 2, 3
                        logger.info(f"–°–æ–±—ã—Ç–∏–µ {i}: {event['title']} - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ({event_lat:.6f}, {event_lng:.6f})")
                    else:
                        logger.warning(f"–°–æ–±—ã—Ç–∏–µ {i}: –Ω–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ({event_lat}, {event_lng})")
                else:
                    logger.warning(f"–°–æ–±—ã—Ç–∏–µ {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")

            # –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –§–û–õ–ë–≠–ö: –ø—Ä–æ–±—É–µ–º –∫–∞—Ä—Ç—É, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –Ω–µ—ë

            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Google Maps —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–±—ã—Ç–∏—è—Ö
            maps_url = create_enhanced_google_maps_url(lat, lng, prepared[:12])

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞
            keyboard_buttons = [[InlineKeyboardButton(text="üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –≤ Google Maps —Å —Å–æ–±—ã—Ç–∏—è–º–∏", url=maps_url)]]

            # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
            current_radius = int(settings.default_radius_km)
            radius_step = int(settings.radius_step_km)
            max_radius = int(settings.max_radius_km)

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞
            next_radius = current_radius + radius_step
            while next_radius <= max_radius:
                keyboard_buttons.append(
                    [
                        InlineKeyboardButton(
                            text=f"üîç –†–∞—Å—à–∏—Ä–∏—Ç—å –¥–æ {next_radius} –∫–º",
                            callback_data=f"rx:{next_radius}",
                        )
                    ]
                )
                next_radius += radius_step

            inline_kb = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã (—Å circuit breaker)
            map_bytes = None
            if settings.google_maps_api_key and points:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º points –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
                event_points = [(p[1], p[2]) for p in points]  # (lat, lng)
                map_bytes = await fetch_static_map(
                    build_static_map_url(lat, lng, event_points, settings.google_maps_api_key)
                )

            # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∫–∞—Ä—Ç—ã/—Å–æ–æ–±—â–µ–Ω–∏—è
            caption = f"üó∫Ô∏è **–í —Ä–∞–¥–∏—É—Å–µ {radius} –∫–º –Ω–∞–π–¥–µ–Ω–æ: {len(events)}**\n"
            caption += f"‚Ä¢ üåü –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ: {counts.get('moments', 0)}\n"
            caption += f"‚Ä¢ üë• –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {counts.get('user', 0)}\n"
            caption += f"‚Ä¢ üåê –ò–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {counts.get('source', 0)}"

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            try:
                await loading_message.delete()
            except Exception:
                pass

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç (—Å –∫–∞—Ä—Ç–æ–π –∏–ª–∏ –±–µ–∑)
            try:
                if map_bytes:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∫–∞—Ä—Ç—ã
                    from aiogram.types import BufferedInputFile

                    map_file = BufferedInputFile(map_bytes, filename="map.png")
                    await message.answer_photo(
                        map_file,
                        caption=caption,
                        reply_markup=inline_kb,
                        parse_mode="HTML",
                    )
                    logger.info("‚úÖ –ö–∞—Ä—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –∫–∞—Ä—Ç—ã (graceful fallback)
                    await message.answer(
                        caption,
                        reply_markup=inline_kb,
                        parse_mode="HTML",
                    )
                    logger.info("‚úÖ –°–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –±–µ–∑ –∫–∞—Ä—Ç—ã (graceful fallback)")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                try:
                    await send_compact_events_list(message, events, lat, lng, page=0, user_radius=radius)
                    logger.info("‚úÖ –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")
                    # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫
                    await message.answer(
                        f"üìã **–í—Å–µ {len(events)} —Å–æ–±—ã—Ç–∏–π:**\n\n"
                        f"üí° –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É 'üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –≤ Google Maps —Å —Å–æ–±—ã—Ç–∏—è–º–∏' –≤—ã—à–µ "
                        f"—á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Å–æ–±—ã—Ç–∏–∏!",
                        parse_mode="Markdown",
                        reply_markup=main_menu_kb(),
                    )

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π fallback - –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.answer(
                    f"üìã –ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –≤ —Ä–∞–¥–∏—É—Å–µ {radius} –∫–º", reply_markup=main_menu_kb()
                )

        except Exception:
            logger.exception(
                "nearby_pipeline_failed | chat=%s lat=%s lng=%s r=%s",
                message.chat.id,
                lat,
                lng,
                int(settings.default_radius_km),
            )
            fallback = render_fallback(lat, lng)
            await message.answer(
                fallback,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=main_menu_kb(),
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_kb())


@dp.message(Command("create"))
@dp.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å")
async def on_create(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å'"""
    await state.set_state(EventCreation.waiting_for_title)
    await message.answer(
        "–°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ! üìù\n\n‚úç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–æ–≥—É–ª–∫–∞):",
        reply_markup=types.ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True),
    )


@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_creation(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    await state.clear()
    await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_kb())


@dp.message(Command("myevents"))
@dp.message(F.text == "üìã –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è")
async def on_my_events(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è' —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞–º–∏"""
    user_id = message.from_user.id

    # –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è: –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ —Å–æ–±—ã—Ç–∏—è
    closed_count = auto_close_events()
    if closed_count > 0:
        await message.answer(f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ {closed_count} –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å–æ–±—ã—Ç–∏–π")

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    events = get_user_events(user_id)

    if not events:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ —á–µ—Ä–µ–∑ '‚ûï –°–æ–∑–¥–∞—Ç—å'!",
            reply_markup=main_menu_kb(),
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if events:
        first_event = events[0]
        text = f"üìã **–í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è:**\n\n{format_event_for_display(first_event)}"

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons = get_status_change_buttons(first_event["id"], first_event["status"])
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=btn["text"], callback_data=btn["callback_data"])] for btn in buttons
            ]
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ" –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Å–æ–±—ã—Ç–∏—è
        if len(events) > 1:
            keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ", callback_data="next_event_1")])

        await message.answer(text, parse_mode="Markdown", reply_markup=keyboard)


@dp.message(Command("share"))
@dp.message(F.text == "üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è")
async def on_share(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è'"""
    bot_info = await bot.get_me()
    text = (
        "–ü—Ä–∏–∫—Ä–µ–ø–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç ‚Äî —á—Ç–æ–±—ã –≤—Å–µ–º –±—ã–ª–æ —É–¥–æ–±–Ω–µ–µ –∏—Å–∫–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–º–µ—Å—Ç–µ.\n\n"
        f"–î–æ–±–∞–≤–∏—Ç—å: t.me/{bot_info.username}?startgroup=true\n"
        f"–õ–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞: t.me/{bot_info.username}\n\n"
        "–ú–æ–∂–µ—à—å –¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å–æ–±—ã—Ç–∏–µ–º, –∫–æ–≥–¥–∞ –æ—Ç–∫—Ä–æ–µ—à—å –µ–≥–æ –∫–∞—Ä—Ç–æ—á–∫—É ‚Äî —è –ø—Ä–∏—à–ª—é deep-link."
    )
    await message.answer(text, reply_markup=main_menu_kb())


@dp.message(Command("admin_event"))
async def on_admin_event(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin_event –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ user_id)
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        command_parts = message.text.split()
        if len(command_parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_event <id_—Å–æ–±—ã—Ç–∏—è>")
            return

        event_id = int(command_parts[1])

        # –ò—â–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –ë–î
        with get_session() as session:
            event = session.get(Event, event_id)
            if not event:
                await message.answer(f"–°–æ–±—ã—Ç–∏–µ —Å ID {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ HTML
            title = html.escape(event.title)
            description = html.escape(event.description or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            location = html.escape(event.location_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            address = html.escape(getattr(event, "address", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"))
            url = html.escape(event.url or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            location_url = html.escape(event.location_url or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            source = html.escape(event.source or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            organizer = html.escape(event.organizer_username or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

            info_lines = [
                f"üîç <b>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è #{event_id}</b>",
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}",
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}",
                f"<b>–í—Ä–µ–º—è:</b> {event.time_local or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}",
                f"<b>–ú–µ—Å—Ç–æ:</b> {location}",
                f"<b>–ê–¥—Ä–µ—Å:</b> {address}",
                f"<b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</b> {event.lat}, {event.lng}",
                f"<b>URL —Å–æ–±—ã—Ç–∏—è:</b> {url}",
                f"<b>URL –º–µ—Å—Ç–∞:</b> {location_url}",
                f"<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {source}",
                f"<b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä:</b> {organizer}",
                f"<b>AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è:</b> {'–î–∞' if event.is_generated_by_ai else '–ù–µ—Ç'}",
            ]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ venue_name
            if not hasattr(event, "venue_name") or not getattr(event, "venue_name", None):
                info_lines.append("‚ö†Ô∏è <b>–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï:</b> venue_name –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
                logger.warning(f"–°–æ–±—ã—Ç–∏–µ {event_id}: venue_name –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º publishable
            is_publishable = bool(event.url or event.location_url)
            info_lines.append(f"<b>–ü—É–±–ª–∏–∫—É–µ–º–æ:</b> {'–î–∞' if is_publishable else '–ù–µ—Ç'}")

            if not is_publishable:
                info_lines.append("‚ö†Ô∏è <b>–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï:</b> –ù–µ—Ç source_url –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!")

            text = "\n".join(info_lines)
            await message.answer(text, parse_mode="HTML", disable_web_page_preview=True)

    except ValueError:
        await message.answer("ID —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ admin_event: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏–∏")


@dp.message(Command("diag_webhook"))
async def on_diag_webhook(message: types.Message):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ webhook"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
        webhook_info = await bot.get_webhook_info()

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        run_mode = os.getenv("BOT_RUN_MODE", "webhook")
        webhook_url = os.getenv("WEBHOOK_URL", "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        info_lines = [
            "üîó <b>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Webhook</b>",
            "",
            f"<b>–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞:</b> {run_mode}",
            f"<b>WEBHOOK_URL:</b> {webhook_url}",
            f"<b>–¢–µ–∫—É—â–∏–π webhook:</b> {webhook_info.url or '–ø—É—Å—Ç–æ–π'}",
            f"<b>Pending updates:</b> {webhook_info.pending_update_count}",
            f"<b>Has custom certificate:</b> {webhook_info.has_custom_certificate}",
            f"<b>Allowed updates:</b> {', '.join(webhook_info.allowed_updates) if webhook_info.allowed_updates else '–≤—Å–µ'}",
        ]

        await message.answer("\n".join(info_lines), parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ webhook: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")


@dp.message(Command("diag_last"))
async def on_diag_last(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /diag_last –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        state = user_state.get(message.chat.id)
        if not state:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–ø—Ä–æ—Å–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        diag = state.get("diag", {})
        state.get("counts", {})
        prepared = state.get("prepared", [])

        found_by_stream = diag.get("found_by_stream", {})
        kept_by_type = diag.get("kept_by_type", {})

        info_lines = [
            "<b>üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞</b>",
            f"<b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</b> {state.get('lat', 'N/A')}, {state.get('lng', 'N/A')}",
            f"<b>–†–∞–¥–∏—É—Å:</b> {state.get('radius', 'N/A')} –∫–º",
            f"<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</b> {state.get('page', 'N/A')}",
            "",
            "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Ç–æ–∫–∞–º:</b>",
            f"‚Ä¢ found_by_stream: source={found_by_stream.get('source', 0)}, ai_parsed={found_by_stream.get('ai_parsed', 0)}, moments={found_by_stream.get('moments', 0)}",
            f"‚Ä¢ kept_by_type: source={kept_by_type.get('source', 0)}, ai_parsed={kept_by_type.get('ai_parsed', 0)}, user={kept_by_type.get('user', 0)}",
            f"‚Ä¢ dropped: {diag.get('dropped', 0)}, top_reasons={diag.get('reasons_top3', [])}",
            "",
        ]

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–æ–±—ã—Ç–∏–π —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        if prepared:
            info_lines.extend(["", f"<b>üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ {min(5, len(prepared))} –∫–∞—Ä—Ç–æ—á–µ–∫:</b>"])
            for i, event in enumerate(prepared[:5], 1):
                event_type = event.get("type", "unknown")
                title = html.escape(event.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"))
                when = event.get("when_str", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
                if event_type == "user":
                    # –î–ª—è –º–æ–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∞
                    author_username = event.get("creator_username")
                    source_info = f"–∞–≤—Ç–æ—Ä-—é–∑–µ—Ä @{author_username}" if author_username else "–∞–≤—Ç–æ—Ä-—é–∑–µ—Ä"
                else:
                    # –î–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ AI - –¥–æ–º–µ–Ω –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                    url = get_source_url(event)
                    if url:
                        try:
                            from urllib.parse import urlparse

                            domain = urlparse(url).netloc
                            source_info = f"–¥–æ–º–µ–Ω {domain}"
                        except Exception:
                            source_info = "–¥–æ–º–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
                    else:
                        source_info = "–±–µ–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
                venue = event.get("venue", {})
                if venue.get("name") or event.get("venue_name"):
                    location_info = "venue"
                elif venue.get("address") or event.get("address"):
                    location_info = "address"
                elif venue.get("lat") or event.get("lat"):
                    location_info = "coords"
                else:
                    location_info = "–Ω–µ—Ç –ª–æ–∫–∞—Ü–∏–∏"

                info_lines.append(f"{i}) <b>{title}</b>")
                info_lines.append(
                    f"   —Ç–∏–ø: {event_type}, –≤—Ä–µ–º—è: {when}, {source_info}, —á–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è: {location_info}"
                )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–º–µ–Ω—Ç–∞—Ö –∏ –ª–∏–º–∏—Ç–∞—Ö
        from config import load_settings

        settings = load_settings()

        if settings.moments_enable:
            info_lines.extend(
                [
                    "",
                    "<b>‚ö° –ú–æ–º–µ–Ω—Ç—ã:</b>",
                    f"‚Ä¢ –≤—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {len([e for e in prepared if e.get('type') == 'user'])}",
                    f"‚Ä¢ –ª–∏–º–∏—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {settings.moment_daily_limit}/–¥–µ–Ω—å",
                    f"‚Ä¢ TTL –≤–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(map(str, settings.moment_ttl_options))} –º–∏–Ω",
                ]
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–º–µ–Ω—Ç—ã —Å –¥–µ—Ç–∞–ª—è–º–∏
            moments = [e for e in prepared if e.get("type") == "user"]
            if moments:
                info_lines.extend(["", "<b>üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:</b>"])
                for moment in moments[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    author = moment.get("creator_username", "–ê–Ω–æ–Ω–∏–º")
                    title = moment.get("title", "–ú–æ–º–µ–Ω—Ç")
                    expires = moment.get("expires_utc")
                    if expires:
                        try:
                            from datetime import datetime

                            exp_dt = datetime.fromisoformat(expires.replace("Z", "+00:00"))
                            now = datetime.now(exp_dt.tzinfo)
                            remaining = exp_dt - now
                            hours = int(remaining.total_seconds() // 3600)
                            minutes = int((remaining.total_seconds() % 3600) // 60)
                            time_left = f"{hours}—á {minutes}–º" if hours > 0 else f"{minutes}–º"
                        except Exception:
                            time_left = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    else:
                        time_left = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                    lat = moment.get("lat", 0)
                    lng = moment.get("lng", 0)
                    info_lines.append(f'üë§ @{author} | "{title}" | –µ—â—ë {time_left} | ({lat:.4f}, {lng:.4f})')

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ—Ç–±—Ä–æ—à–µ–Ω–Ω–æ–µ source —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        if diag.get("dropped", 0) > 0:
            info_lines.extend(["", "<b>üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Ç–±—Ä–æ—à–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π:</b>"])
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–±—Ä–æ—à–µ–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
            info_lines.append("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–±—Ä–æ—à–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö")

        text = "\n".join(info_lines)
        await message.answer(text, parse_mode="HTML", disable_web_page_preview=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ diag_last: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")


@dp.message(Command("diag_all"))
async def on_diag_all(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /diag_all –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        with get_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–±—ã—Ç–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            from datetime import UTC, datetime, timedelta

            now = datetime.now(UTC)
            yesterday = now - timedelta(hours=24)

            # –°–æ–±—ã—Ç–∏—è –ø–æ —Ç–∏–ø–∞–º –∑–∞ 24—á
            source_events = (
                session.query(Event).filter(Event.created_at_utc >= yesterday, Event.source.isnot(None)).count()
            )

            user_events = (
                session.query(Event)
                .filter(
                    Event.created_at_utc >= yesterday,
                    Event.source.is_(None),
                    Event.organizer_id.isnot(None),
                )
                .count()
            )

            ai_events = (
                session.query(Event).filter(Event.created_at_utc >= yesterday, Event.is_generated_by_ai is True).count()
            )

            # –ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
            active_moments = session.query(Moment).filter(Moment.is_active is True, Moment.expires_at > now).count()

            # –ò—Å—Ç–µ–∫—à–∏–µ –º–æ–º–µ–Ω—Ç—ã
            expired_moments = session.query(Moment).filter(Moment.is_active is True, Moment.expires_at <= now).count()

            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
            total_events = session.query(Event).count()
            total_moments = session.query(Moment).count()

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            sources = session.query(Event.source).filter(Event.source.isnot(None)).distinct().all()

            source_list = [s[0] for s in sources if s[0]]

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            info_lines = [
                "<b>üîç –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>",
                "",
                "<b>üìä –°–æ–±—ã—Ç–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á:</b>",
                f"‚Ä¢ –í–Ω–µ—à–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {source_events}",
                f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ: {user_events}",
                f"‚Ä¢ AI-—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {ai_events}",
                f"‚Ä¢ –í—Å–µ–≥–æ: {source_events + user_events + ai_events}",
                "",
                "<b>‚ö° –ú–æ–º–µ–Ω—Ç—ã:</b>",
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {active_moments}",
                f"‚Ä¢ –ò—Å—Ç–µ–∫—à–∏–µ (—Ç—Ä–µ–±—É—é—Ç –æ—á–∏—Å—Ç–∫–∏): {expired_moments}",
                f"‚Ä¢ –í—Å–µ–≥–æ –≤ –ë–î: {total_moments}",
                "",
                "<b>üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>",
                f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –≤ –ë–î: {total_events}",
                f"‚Ä¢ –í—Å–µ–≥–æ –º–æ–º–µ–Ω—Ç–æ–≤ –≤ –ë–î: {total_moments}",
                "",
                "<b>üîó –ê–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:</b>",
            ]

            if source_list:
                for source in sorted(source_list)[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    info_lines.append(f"‚Ä¢ {source}")
                if len(source_list) > 10:
                    info_lines.append(f"‚Ä¢ ... –∏ –µ—â–µ {len(source_list) - 10}")
            else:
                info_lines.append("‚Ä¢ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            settings = load_settings()
            info_lines.extend(
                [
                    "",
                    "<b>‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>",
                    f"‚Ä¢ –ú–æ–º–µ–Ω—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã: {'‚úÖ' if settings.moments_enable else '‚ùå'}",
                    f"‚Ä¢ AI –ø–∞—Ä—Å–∏–Ω–≥: {'‚úÖ' if settings.ai_parse_enable else '‚ùå'}",
                    f"‚Ä¢ Meetup API: {'‚úÖ' if settings.enable_meetup_api else '‚ùå'}",
                    f"‚Ä¢ ICS –∫–∞–ª–µ–Ω–¥–∞—Ä–∏: {'‚úÖ' if settings.enable_ics_feeds else '‚ùå'}",
                    f"‚Ä¢ Eventbrite API: {'‚úÖ' if settings.enable_eventbrite_api else '‚ùå'}",
                    f"‚Ä¢ –†–∞–¥–∏—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {settings.default_radius_km}–∫–º",
                    f"‚Ä¢ –ú–∞–∫—Å. —Ä–∞–¥–∏—É—Å: {settings.max_radius_km}–∫–º",
                ]
            )

            await message.answer("\n".join(info_lines))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ diag_all: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")


@dp.message(Command("diag_search"))
async def on_diag_search(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /diag_search –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        state = user_state.get(message.chat.id)
        if not state:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–ø—Ä–æ—Å–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        diag = state.get("diag", {})
        counts = state.get("counts", {})
        prepared = state.get("prepared", [])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        lat = state.get("lat", "N/A")
        lng = state.get("lng", "N/A")
        radius = state.get("radius", "N/A")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö
        kept_by_type = diag.get("kept_by_type", {})
        reasons_top3 = diag.get("reasons_top3", [])

        info_lines = [
            "<b>üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞</b>",
            f"<b>user_point=</b>({lat}, {lng}) <b>radius_km=</b>{radius}",
            f"<b>found_total=</b>{diag.get('in', 0)}",
            f"<b>kept_by_type:</b> ai_parsed={kept_by_type.get('ai_parsed', 0)} user={kept_by_type.get('user', 0)} source={kept_by_type.get('source', 0)}",
            f"<b>dropped=</b>{diag.get('dropped', 0)} <b>reasons_top3=</b>{reasons_top3}",
            "",
            "<b>üìä –î–µ—Ç–∞–ª–∏ –ø–æ —Ç–∏–ø–∞–º:</b>",
            f"‚Ä¢ AI —Å–æ–±—ã—Ç–∏—è: {kept_by_type.get('ai_parsed', 0)}",
            f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ: {kept_by_type.get('user', 0)}",
            f"‚Ä¢ –í–Ω–µ—à–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {kept_by_type.get('source', 0)}",
            "",
            "<b>üìà –ò—Ç–æ–≥–æ–≤—ã–µ —Å—á–µ—Ç—á–∏–∫–∏:</b>",
            f"‚Ä¢ –í—Å–µ–≥–æ: {counts.get('all', 0)}",
            f"‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ: {counts.get('moments', 0)}",
            f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ: {counts.get('user', 0)}",
            f"‚Ä¢ –í–Ω–µ—à–Ω–∏–µ: {counts.get('sources', 0)}",
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏—á–∏–Ω–∞—Ö –æ—Ç–±—Ä–∞–∫–æ–≤–∫–∏
        if reasons_top3:
            info_lines.extend(
                [
                    "",
                    "<b>üö´ –¢–æ–ø –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–±—Ä–∞–∫–æ–≤–∫–∏:</b>",
                ]
            )
            for reason in reasons_top3:
                info_lines.append(f"‚Ä¢ {reason}")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ—Ç–±—Ä–æ—à–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        if prepared:
            info_lines.extend(
                [
                    "",
                    "<b>‚úÖ –ü—Ä–∏–º–µ—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π:</b>",
                ]
            )
            for i, event in enumerate(prepared[:3], 1):
                title = event.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")[:50]
                distance = event.get("distance_km", "N/A")
                info_lines.append(f"‚Ä¢ {i}) {title} ({distance} –∫–º)")

        await message.answer("\n".join(info_lines), parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ diag_search: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞")


@dp.message(Command("help"))
@dp.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def on_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'"""
    help_text = (
        "ü§ñ **EventAroundBot - –ü–æ–º–æ—â—å**\n\n"
        "**üìç –ß—Ç–æ —Ä—è–¥–æ–º** - –∏—â–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞–¥–∏—É—Å–µ 5 –∫–º –æ—Ç –≤–∞—Å\n"
        "**‚ûï –°–æ–∑–¥–∞—Ç—å** - —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ\n"
        "**üìã –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è** - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è\n"
        "**üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è** - —Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞\n\n"
        "**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
        "1. –ù–∞–∂–º–∏—Ç–µ 'üìç –ß—Ç–æ —Ä—è–¥–æ–º'\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π —Å –∫–∞—Ä—Ç–æ–π\n\n"
        "**–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π:**\n"
        "ü§ñ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è\n"
        "üèõÔ∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ—Å—Ç–∞\n"
        "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä–∏ —Å–æ–±—ã—Ç–∏–π\n"
        "üì± –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏\n"
        "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞"
    )
    await message.answer(help_text, reply_markup=main_menu_kb(), parse_mode="Markdown")


# FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ü–ï–†–ï–î –æ–±—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º)
@dp.message(EventCreation.waiting_for_title)
async def process_title(message: types.Message, state: FSMContext):
    """–®–∞–≥ 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    title = message.text.strip()
    logger.info(f"process_title: –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ '{title}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    await state.update_data(title=title)
    await state.set_state(EventCreation.waiting_for_date)
    await message.answer(
        f"–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: *{title}* ‚úÖ\n\nüìÖ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12.09.2025):", parse_mode="Markdown"
    )


@dp.message(EventCreation.waiting_for_date)
async def process_date(message: types.Message, state: FSMContext):
    """–®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è"""
    date = message.text.strip()
    logger.info(f"process_date: –ø–æ–ª—É—á–∏–ª–∏ –¥–∞—Ç—É '{date}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    await state.update_data(date=date)
    await state.set_state(EventCreation.waiting_for_time)
    await message.answer(
        f"–î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: *{date}* ‚úÖ\n\n‚è∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 17:30):", parse_mode="Markdown"
    )


@dp.message(EventCreation.waiting_for_time)
async def process_time(message: types.Message, state: FSMContext):
    """–®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è"""
    time = message.text.strip()
    logger.info(f"process_time: –ø–æ–ª—É—á–∏–ª–∏ –≤—Ä–µ–º—è '{time}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    await state.update_data(time=time)
    await state.set_state(EventCreation.waiting_for_location_type)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ª–æ–∫–∞—Ü–∏–∏
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîó –í—Å—Ç–∞–≤–∏—Ç—å –≥–æ—Ç–æ–≤—É—é —Å—Å—ã–ª–∫—É", callback_data="location_link")],
            [InlineKeyboardButton(text="üåç –ù–∞–π—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç–µ", callback_data="location_map")],
        ]
    )

    await message.answer(
        f"–í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: *{time}* ‚úÖ\n\nüìç –ö–∞–∫ —É–∫–∞–∂–µ–º –º–µ—Å—Ç–æ?", parse_mode="Markdown", reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ª–æ–∫–∞—Ü–∏–∏
@dp.callback_query(F.data == "location_link")
async def handle_location_link_choice(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≤–≤–æ–¥–∞ –≥–æ—Ç–æ–≤–æ–π —Å—Å—ã–ª–∫–∏"""
    await state.set_state(EventCreation.waiting_for_location_link)
    await callback.message.answer("üîó –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å—Å—ã–ª–∫—É –∏–∑ Google Maps:")
    await callback.answer()


@dp.callback_query(F.data == "location_map")
async def handle_location_map_choice(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–æ–∏—Å–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–µ"""
    await state.set_state(EventCreation.waiting_for_location_link)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Google Maps
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üåç –û—Ç–∫—Ä—ã—Ç—å Google Maps", url="https://www.google.com/maps")]]
    )

    await callback.message.answer("üåç –û—Ç–∫—Ä–æ–π –∫–∞—Ä—Ç—É, –Ω–∞–π–¥–∏ –º–µ—Å—Ç–æ –∏ –≤—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É —Å—é–¥–∞ üëá", reply_markup=keyboard)
    await callback.answer()


@dp.message(EventCreation.waiting_for_location_link)
async def process_location_link(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ Google Maps"""
    link = message.text.strip()
    logger.info(f"process_location_link: –ø–æ–ª—É—á–∏–ª–∏ —Å—Å—ã–ª–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    # –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫—É
    from utils.geo_utils import parse_google_maps_link

    location_data = parse_google_maps_link(link)

    if not location_data:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Å—ã–ª–∫—É Google Maps.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Google Maps\n"
            "‚Ä¢ –ò–ª–∏ –≤–≤–µ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —à–∏—Ä–æ—Ç–∞,–¥–æ–ª–≥–æ—Ç–∞"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
    await state.update_data(
        location_name=location_data.get("name", "–ú–µ—Å—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–µ"),
        location_lat=location_data["lat"],
        location_lng=location_data["lng"],
        location_url=location_data["raw_link"],
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    location_name = location_data.get("name", "–ú–µ—Å—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–µ")
    lat = location_data.get("lat")
    lng = location_data.get("lng")

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üåç –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ", url=link)],
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="location_confirm"),
                InlineKeyboardButton(text="‚ùå –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="location_change"),
            ],
        ]
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    if lat is not None and lng is not None:
        location_text = f"üìç **–õ–æ–∫–∞—Ü–∏—è:** {location_name}\nüåç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.6f}, {lng:.6f}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?"
    else:
        location_text = f"üìç **–õ–æ–∫–∞—Ü–∏—è:** {location_name}\nüåç –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?"

    await message.answer(
        location_text,
        parse_mode="Markdown",
        reply_markup=keyboard,
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
@dp.callback_query(F.data == "location_confirm")
async def handle_location_confirm(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏"""
    await state.set_state(EventCreation.waiting_for_description)
    await callback.message.answer(
        "üìç –ú–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! ‚úÖ\n\nüìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –í–µ—á–µ—Ä–Ω—è—è –ø—Ä–æ–≥—É–ª–∫–∞ —É –æ–∫–µ–∞–Ω–∞):",
        parse_mode="Markdown",
    )
    await callback.answer()


@dp.callback_query(F.data == "location_change")
async def handle_location_change(callback: types.CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏"""
    await state.set_state(EventCreation.waiting_for_location_type)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ª–æ–∫–∞—Ü–∏–∏
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîó –í—Å—Ç–∞–≤–∏—Ç—å –≥–æ—Ç–æ–≤—É—é —Å—Å—ã–ª–∫—É", callback_data="location_link")],
            [InlineKeyboardButton(text="üåç –ù–∞–π—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç–µ", callback_data="location_map")],
        ]
    )

    await callback.message.answer("üìç –ö–∞–∫ —É–∫–∞–∂–µ–º –º–µ—Å—Ç–æ?", reply_markup=keyboard)
    await callback.answer()


@dp.message(EventCreation.waiting_for_location)
async def process_location(message: types.Message, state: FSMContext):
    """–®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–∞ —Å–æ–±—ã—Ç–∏—è"""
    location = message.text.strip()
    logger.info(f"process_location: –ø–æ–ª—É—á–∏–ª–∏ –º–µ—Å—Ç–æ '{location}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    await state.update_data(location=location)
    await state.set_state(EventCreation.waiting_for_description)
    await message.answer(
        f"–ú–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: *{location}* ‚úÖ\n\nüìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –í–µ—á–µ—Ä–Ω—è—è –ø—Ä–æ–≥—É–ª–∫–∞ —É –æ–∫–µ–∞–Ω–∞):",
        parse_mode="Markdown",
    )


@dp.message(EventCreation.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    """–®–∞–≥ 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    description = message.text.strip()
    logger.info(f"process_description: –ø–æ–ª—É—á–∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    await state.update_data(description=description)
    data = await state.get_data()
    await state.set_state(EventCreation.confirmation)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥ –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    location_text = data.get("location", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    if "location_name" in data:
        location_text = data["location_name"]
        if "location_url" in data:
            location_text += f"\nüåç [–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ]({data['location_url']})"

    await message.answer(
        f"üìå **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:**\n\n"
        f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {data['title']}\n"
        f"**–î–∞—Ç–∞:** {data['date']}\n"
        f"**–í—Ä–µ–º—è:** {data['time']}\n"
        f"**–ú–µ—Å—Ç–æ:** {location_text}\n"
        f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {data['description']}\n\n"
        f"–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ ‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞.",
        parse_mode="Markdown",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="event_confirm"),
                    types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="event_cancel"),
                ]
            ]
        ),
    )


@dp.callback_query(F.data == "event_confirm")
async def confirm_event(callback: types.CallbackQuery, state: FSMContext):
    """–®–∞–≥ 6: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    data = await state.get_data()
    logger.info(f"confirm_event: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")

    # –°–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏–µ –≤ –ë–î
    with get_session() as session:
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        user = session.get(User, callback.from_user.id)
        if not user:
            user = User(
                id=callback.from_user.id,
                username=callback.from_user.username,
            )
            session.add(user)
            session.commit()

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        time_local = f"{data['date']} {data['time']}"

        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è starts_at
        from datetime import datetime

        try:
            starts_at = datetime.strptime(time_local, "%d.%m.%Y %H:%M")
        except ValueError:
            starts_at = None

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
        location_name = data.get("location_name", data.get("location", "–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"))
        location_url = data.get("location_url")
        lat = data.get("location_lat")
        lng = data.get("location_lng")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
        try:
            from database import get_engine
            from utils.simple_timezone import get_city_from_coordinates

            engine = get_engine()
            events_service = UnifiedEventsService(engine)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            city = get_city_from_coordinates(lat, lng) if lat and lng else "bali"

            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
            event_id = events_service.create_user_event(
                organizer_id=callback.from_user.id,
                title=data["title"],
                description=data["description"],
                starts_at_utc=starts_at,
                city=city,
                lat=lat,
                lng=lng,
                location_name=location_name,
                location_url=location_url,
                max_participants=data.get("max_participants"),
                organizer_username=callback.from_user.username,
            )

            logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å ID: {event_id}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
            # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
            event = Event(
                title=data["title"],
                description=data["description"],
                time_local=time_local,
                starts_at=starts_at,
                location_name=location_name,
                location_url=location_url,
                lat=lat,
                lng=lng,
                organizer_id=callback.from_user.id,
                organizer_username=callback.from_user.username,
                status="open",
                is_generated_by_ai=False,
            )
            session.add(event)
            session.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
            raise

    await state.clear()
    await callback.message.edit_text(
        f"üéâ **–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!**\n\n"
        f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {data['title']}\n"
        f"**–î–∞—Ç–∞:** {data['date']}\n"
        f"**–í—Ä–µ–º—è:** {data['time']}\n"
        f"**–ú–µ—Å—Ç–æ:** {location_name}\n"
        f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {data['description']}\n\n"
        f"–¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ –µ–≥–æ —á–µ—Ä–µ–∑ 'üìç –ß—Ç–æ —Ä—è–¥–æ–º'.",
        parse_mode="Markdown",
    )
    await callback.answer("–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!")


@dp.callback_query(F.data == "event_cancel")
async def cancel_event_creation(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    await state.clear()
    await callback.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


@dp.message(~StateFilter(EventCreation, EventEditing))
async def echo_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π)"""
    current_state = await state.get_state()
    logger.info(
        f"echo_message: –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ '{message.text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}"
    )
    logger.info("echo_message: –æ—Ç–≤–µ—á–∞–µ–º –æ–±—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:", reply_markup=main_menu_kb())


@dp.callback_query(F.data.startswith("pg:"))
async def handle_pagination(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π"""

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
        token = callback.data.split(":", 1)[1]
        if token == "noop":
            await callback.answer("–≠—Ç–æ –∫—Ä–∞–π–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
            return

        page = int(token)

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state = user_state.get(callback.message.chat.id)
        if not state:
            logger.warning(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.message.chat.id}")
            await callback.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.")
            return

        prepared = state["prepared"]
        counts = state["counts"]
        current_radius = state.get("radius", 5)

        # –†–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page_html, total_pages = render_page(prepared, page, page_size=5)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
        try:
            await callback.message.edit_text(
                render_header(counts, radius_km=current_radius) + "\n\n" + page_html,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=kb_pager(page, total_pages, current_radius),
            )
        except TelegramBadRequest:
            await callback.message.answer(
                render_header(counts, radius_km=current_radius) + "\n\n" + page_html,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=kb_pager(page, total_pages, current_radius),
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state["page"] = page
        user_state[callback.message.chat.id] = state

        await callback.answer()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        await send_main_menu(callback)

    except (ValueError, IndexError) as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@dp.callback_query(F.data == "loading")
async def handle_loading_button(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ - –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ–º"""
    await callback.answer("üîç –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è...", show_alert=False)


@dp.callback_query(F.data.startswith("rx:"))
async def handle_expand_radius(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∏—Å–∫–∞"""

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–¥–∏—É—Å –∏–∑ callback_data: rx:radius
        new_radius = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state = user_state.get(callback.message.chat.id)
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.message.chat.id}: {state is not None}")
        if not state:
            logger.warning(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.message.chat.id}")
            logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {list(user_state.keys())}")
            await callback.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.")
            return

        lat = state.get("lat")
        lng = state.get("lng")

        if not lat or not lng:
            logger.warning(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.message.chat.id}")
            await callback.answer("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.")
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        logger.info(f"üîé –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã=({lat}, {lng}) —Ä–∞–¥–∏—É—Å={new_radius}–∫–º –∏—Å—Ç–æ—á–Ω–∏–∫=–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        logger.info(
            f"üîç –†–∞—Å—à–∏—Ä—è–µ–º –ø–æ–∏—Å–∫ –¥–æ {new_radius} –∫–º –æ—Ç ({lat}, {lng}) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.message.chat.id}"
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loading_message = await callback.message.answer(
            "üîç –ò—â—É...",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîç", callback_data="loading")]]
            ),
        )

        # –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ä–∞–¥–∏—É—Å–æ–º –∏—Å–ø–æ–ª—å–∑—É—è —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π
            from database import get_engine
            from utils.simple_timezone import get_city_from_coordinates

            engine = get_engine()
            events_service = UnifiedEventsService(engine)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            city = get_city_from_coordinates(lat, lng)
            logger.info(f"üîç –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –≥–æ—Ä–æ–¥–µ {city} —Å —Ä–∞–¥–∏—É—Å–æ–º {new_radius} –∫–º")

            # –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
            events = events_service.search_events_today(city=city, user_lat=lat, user_lng=lng, radius_km=new_radius)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            converted_events = []
            for event in events:
                converted_event = {
                    "title": event.get("title", ""),
                    "description": event.get("description", ""),
                    "start_time": event.get("starts_at"),
                    "venue_name": event.get("location_name", ""),
                    "address": event.get("location_url", ""),
                    "lat": event.get("lat"),
                    "lng": event.get("lng"),
                    "source_url": event.get("event_url", ""),
                    "type": "source" if event.get("source_type") == "parser" else "user",
                    "source": event.get("source_type", "user_created"),
                }
                converted_events.append(converted_event)

            events = converted_events
            events = sort_events_by_time(events)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º –ø–æ–∏—Å–∫–µ: {e}")
            events = []
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏–π")
            return

        if not events:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            try:
                await loading_message.delete()
            except Exception:
                pass
            await callback.answer("–°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–∂–µ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ")
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ–±–æ–≥–∞—â–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        prepared, diag = prepare_events_for_feed(events, user_point=(lat, lng), radius_km=new_radius, with_diag=True)
        logger.info(f"prepared: kept={diag['kept']} dropped={diag['dropped']} reasons_top3={diag['reasons_top3']}")
        logger.info(
            f"kept_by_type: ai_parsed={diag['kept_by_type'].get('ai_parsed', 0)} user={diag['kept_by_type'].get('user', 0)} source={diag['kept_by_type'].get('source', 0)}"
        )

        for event in prepared:
            enrich_venue_name(event)

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏ —Å—á–∏—Ç–∞–µ–º
        groups = group_by_type(prepared)
        counts = make_counts(groups)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_state[callback.message.chat.id] = {
            "prepared": prepared,
            "counts": counts,
            "lat": lat,
            "lng": lng,
            "radius": new_radius,
            "page": 1,
            "diag": diag,
            "region": city,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥
        }

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        try:
            await loading_message.delete()
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è

        # –†–µ–Ω–¥–µ—Ä–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        header_html = render_header(counts, radius_km=new_radius)
        page_html, total_pages = render_page(prepared, page=1, page_size=5)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
        try:
            await callback.message.edit_text(
                header_html + "\n\n" + page_html,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=kb_pager(1, total_pages, new_radius),
            )
        except TelegramBadRequest:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (—Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ/—É–¥–∞–ª–µ–Ω–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer(
                header_html + "\n\n" + page_html,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=kb_pager(1, total_pages, new_radius),
            )

        await callback.answer(f"–†–∞–¥–∏—É—Å —Ä–∞—Å—à–∏—Ä–µ–Ω –¥–æ {new_radius} –∫–º")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        await send_main_menu(callback)

    except (ValueError, IndexError) as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ —Ä–∞–¥–∏—É—Å–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@dp.callback_query(F.data == "create_event")
async def handle_create_event(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Å–æ–±—ã—Ç–∏—è
        await callback.message.edit_text(
            "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è</b>\n\n"
            "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚ûï –°–æ–∑–¥–∞—Ç—å' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n\n"
            "–í—ã —Å–º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å:\n"
            "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\n"
            "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ\n"
            "‚Ä¢ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è\n"
            "‚Ä¢ –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è\n"
            "‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏–µ",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="start_create")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="back_to_search")],
                ]
            ),
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@dp.callback_query(F.data == "start_create")
async def handle_start_create(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    try:
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
        await callback.message.edit_text(
            "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_search")]]
            ),
        )
        await callback.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@dp.callback_query(F.data == "back_to_search")
async def handle_back_to_search(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–æ–∏—Å–∫—É"""
    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        await callback.message.edit_text(
            "üîç <b>–ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏—è —Ä—è–¥–æ–º —Å –≤–∞–º–∏.",
            parse_mode="HTML",
            reply_markup=main_menu_kb(),
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–æ–∏—Å–∫—É: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–º–µ–Ω—Ç–æ–≤
@dp.message(Command("moment"))
@dp.message(F.text == "‚ö° –°–æ–∑–¥–∞—Ç—å –ú–æ–º–µ–Ω—Ç")
async def start_moment_creation(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–º–µ–Ω—Ç–∞ - Step 0"""
    from config import load_settings

    settings = load_settings()

    if not settings.moments_enable:
        await message.answer("–§—É–Ω–∫—Ü–∏—è –º–æ–º–µ–Ω—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞.", reply_markup=main_menu_kb())
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —à–∞–±–ª–æ–Ω–∞–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ UX
    keyboard = [
        [InlineKeyboardButton(text="‚òï –ö–æ—Ñ–µ", callback_data="m:tpl:coffee")],
        [InlineKeyboardButton(text="üö∂ –ü—Ä–æ–≥—É–ª–∫–∞", callback_data="m:tpl:walk")],
        [InlineKeyboardButton(text="üí¨ Small talk", callback_data="m:tpl:talk")],
        [InlineKeyboardButton(text="üèê –ò–≥—Ä–∞/—Å–ø–æ—Ä—Ç", callback_data="m:tpl:sport")],
        [InlineKeyboardButton(text="‚úèÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="m:tpl:custom")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="m:cancel")],
    ]

    await message.answer(
        "**–°–æ–∑–¥–∞–¥–∏–º –ú–æ–º–µ–Ω—Ç ‚Äî –±—ã—Å—Ç—Ä—É—é –≤—Å—Ç—Ä–µ—á—É —Ä—è–¥–æ–º.**\n–í—ã–±–µ—Ä–∏ —à–∞–±–ª–æ–Ω –∏–ª–∏ –∑–∞–¥–∞–π —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
    )
    await state.set_state(MomentCreation.waiting_for_template)


@dp.callback_query(F.data.startswith("m:tpl:"))
async def handle_template_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ - Step 1"""
    template_data = callback.data[6:]  # —É–±–∏—Ä–∞–µ–º "m:tpl:"

    # –ú–∞–ø–ø–∏–Ω–≥ —à–∞–±–ª–æ–Ω–æ–≤
    template_map = {
        "coffee": "‚òï –ö–æ—Ñ–µ",
        "walk": "üö∂ –ü—Ä–æ–≥—É–ª–∫–∞",
        "talk": "üí¨ Small talk",
        "sport": "üèê –ò–≥—Ä–∞/—Å–ø–æ—Ä—Ç",
    }

    if template_data == "custom":
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ú–æ–º–µ–Ω—Ç–∞ (–¥–æ 40 —Å–∏–º–≤–æ–ª–æ–≤):\n*–ø—Ä–∏–º–µ—Ä: ¬´–∫–æ—Ñ–µ —É Marina¬ª, ¬´–ø—Ä–æ–±–µ–∂–∫–∞ –≤ –ø–∞—Ä–∫–µ¬ª*",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="m:cancel")]]
            ),
        )
        await state.set_state(MomentCreation.waiting_for_custom_title)
    else:
        title = template_map.get(template_data, template_data)
        await state.update_data(title=title)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ª–æ–∫–∞—Ü–∏–∏
        await callback.message.edit_text(
            "–û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (üìé ‚Üí Location)\n–∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å: *¬´Jl. Danau Tamblingan 80, Sanur¬ª*",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üìç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ—é —Ç–µ–∫—É—â—É—é –≥–µ–æ", callback_data="m:loc:ask")],
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="m:cancel")],
                ]
            ),
        )
        await state.set_state(MomentCreation.waiting_for_location)

    await callback.answer()


@dp.message(MomentCreation.waiting_for_custom_title)
async def handle_custom_title(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è - Step 1B"""
    title = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ UX
    if not title or len(title) < 1:
        await message.answer(
            "‚ùó –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ. –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ (1-40 —Å–∏–º–≤–æ–ª–æ–≤).",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="m:cancel")]]
            ),
        )
        return

    if len(title) > 40:
        await message.answer(
            "‚ùó –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ. –°–¥–µ–ª–∞–π –∫–æ—Ä–æ—á–µ (–¥–æ 40 —Å–∏–º–≤–æ–ª–æ–≤).",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="m:cancel")]]
            ),
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º/—Å—Å—ã–ª–∫–∏
    if any(word in title.lower() for word in ["http", "www", "@", "—Ç–µ–ª–µ—Ñ–æ–Ω", "–∑–≤–æ–Ω–∏"]):
        await message.answer(
            "‚ùó –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="m:cancel")]]
            ),
        )
        return

    await state.update_data(title=title)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ª–æ–∫–∞—Ü–∏–∏
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (üìé ‚Üí Location)\n–∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å: *¬´Jl. Danau Tamblingan 80, Sanur¬ª*",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ—é —Ç–µ–∫—É—â—É—é –≥–µ–æ", callback_data="m:loc:ask")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="m:cancel")],
            ]
        ),
    )
    await state.set_state(MomentCreation.waiting_for_location)


@dp.callback_query(F.data == "m:loc:ask")
async def handle_location_help(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Å–∫–∞–∑–∫–∞ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é"""
    await callback.message.edit_text(
        "üìç **–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:**\n\n"
        "1. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üìé (—Å–∫—Ä–µ–ø–∫–∞) —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞\n"
        "2. –í—ã–±–µ—Ä–∏ ¬´Location¬ª –∏–ª–∏ ¬´–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ¬ª\n"
        "3. –í—ã–±–µ—Ä–∏ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é¬ª\n\n"
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º.",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="m:cancel")]]
        ),
    )
    await callback.answer()


@dp.message(MomentCreation.waiting_for_location, F.location)
async def handle_moment_location(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –º–æ–º–µ–Ω—Ç–∞ - Step 2"""
    try:
        await state.get_data()
        lat = message.location.latitude
        lng = message.location.longitude

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        await state.update_data(lat=lat, lng=lng, location_type="geo")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–∫–∞—Ü–∏–∏
        await message.answer(
            f"üìç **–õ–æ–∫–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞:**\n({lat:.4f}, {lng:.4f})",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –î–∞–ª—å—à–µ", callback_data="m:ok:loc")],
                    [InlineKeyboardButton(text="üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", callback_data="m:loc:redo")],
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="m:cancel")],
                ]
            ),
        )
        await state.set_state(MomentCreation.location_confirmed)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="m:cancel")]]
            ),
        )


@dp.message(MomentCreation.waiting_for_location, F.text)
async def handle_moment_address(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –º–æ–º–µ–Ω—Ç–∞ - Step 2"""
    try:
        from utils.geo_utils import geocode_address

        address = message.text.strip()

        if not address:
            await message.answer(
                "üìç –ù—É–∂–Ω–∞ –ª–æ–∫–∞—Ü–∏—è. –û—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç—É-–ø–∏–Ω –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="m:cancel")]]
                ),
            )
            return

        coords = await geocode_address(address)

        if not coords:
            await message.answer(
                "üòï –ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–π –∞–¥—Ä–µ—Å. –û—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∞-–ø–∏–Ω (üìé ‚Üí Location) –∏–ª–∏ —É—Ç–æ—á–Ω–∏ –∞–¥—Ä–µ—Å.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="m:cancel")]]
                ),
            )
            return

        lat, lng = coords

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –∞–¥—Ä–µ—Å
        await state.update_data(lat=lat, lng=lng, address=address, location_type="address")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–∫–∞—Ü–∏–∏
        await message.answer(
            f"üìç **–õ–æ–∫–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞:**\n*{address}*\n({lat:.4f}, {lng:.4f})",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –î–∞–ª—å—à–µ", callback_data="m:ok:loc")],
                    [InlineKeyboardButton(text="üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", callback_data="m:loc:redo")],
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="m:cancel")],
                ]
            ),
        )
        await state.set_state(MomentCreation.location_confirmed)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥—Ä–µ—Å–∞: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="m:cancel")]]
            ),
        )


@dp.callback_query(F.data == "m:ok:loc")
async def handle_location_confirmed(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ TTL"""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏, —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –ú–æ–º–µ–Ω—Ç:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚è≥ 30 –º–∏–Ω", callback_data="m:ttl:30")],
                [InlineKeyboardButton(text="‚è∞ 1 —á–∞—Å", callback_data="m:ttl:60")],
                [InlineKeyboardButton(text="üïë 2 —á–∞—Å–∞", callback_data="m:ttl:120")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="m:back:loc")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="m:cancel")],
            ]
        ),
    )
    await state.set_state(MomentCreation.waiting_for_ttl)
    await callback.answer()


@dp.callback_query(F.data == "m:loc:redo")
async def handle_location_redo(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥ –ª–æ–∫–∞—Ü–∏–∏"""
    await callback.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (üìé ‚Üí Location)\n–∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å: *¬´Jl. Danau Tamblingan 80, Sanur¬ª*",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ—é —Ç–µ–∫—É—â—É—é –≥–µ–æ", callback_data="m:loc:ask")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="m:cancel")],
            ]
        ),
    )
    await state.set_state(MomentCreation.waiting_for_location)
    await callback.answer()


@dp.callback_query(F.data.startswith("m:ttl:"))
async def handle_ttl_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ TTL - Step 3"""
    ttl_minutes = int(callback.data[7:])  # —É–±–∏—Ä–∞–µ–º "m:ttl:"

    # –í–∞–ª–∏–¥–∞—Ü–∏—è TTL - —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    allowed_ttl = [30, 60, 120]
    if ttl_minutes not in allowed_ttl:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.", show_alert=True)
        return

    await state.update_data(ttl_minutes=ttl_minutes)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    data = await state.get_data()
    title = data.get("title", "–ú–æ–º–µ–Ω—Ç")
    lat = data.get("lat", 0)
    lng = data.get("lng", 0)
    address = data.get("address", "")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º TTL
    if ttl_minutes < 60:
        ttl_human = f"{ttl_minutes} –º–∏–Ω"
    else:
        hours = ttl_minutes // 60
        minutes = ttl_minutes % 60
        if minutes == 0:
            ttl_human = f"{hours} —á–∞—Å" if hours == 1 else f"{hours} —á–∞—Å–∞"
        else:
            ttl_human = f"{hours}—á {minutes}–º"

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å
    if address:
        short_address = address[:30] + "..." if len(address) > 30 else address
    else:
        short_address = f"({lat:.4f}, {lng:.4f})"

    await callback.message.edit_text(
        f"**–ü—Ä–æ–≤–µ—Ä—å:**\n‚ú® *{title}*\nüìç *{short_address}*\n‚è≥ *{ttl_human}*",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="m:create")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="m:back:ttl")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="m:cancel")],
            ]
        ),
    )
    await state.set_state(MomentCreation.preview_confirmed)
    await callback.answer()


@dp.callback_query(F.data == "m:back:loc")
async def handle_back_to_location(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ª–æ–∫–∞—Ü–∏–∏"""
    await callback.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (üìé ‚Üí Location)\n–∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å: *¬´Jl. Danau Tamblingan 80, Sanur¬ª*",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ—é —Ç–µ–∫—É—â—É—é –≥–µ–æ", callback_data="m:loc:ask")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="m:cancel")],
            ]
        ),
    )
    await state.set_state(MomentCreation.waiting_for_location)
    await callback.answer()


@dp.callback_query(F.data == "m:back:ttl")
async def handle_back_to_ttl(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É TTL"""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏, —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –ú–æ–º–µ–Ω—Ç:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚è≥ 30 –º–∏–Ω", callback_data="m:ttl:30")],
                [InlineKeyboardButton(text="‚è∞ 1 —á–∞—Å", callback_data="m:ttl:60")],
                [InlineKeyboardButton(text="üïë 2 —á–∞—Å–∞", callback_data="m:ttl:120")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="m:back:loc")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="m:cancel")],
            ]
        ),
    )
    await state.set_state(MomentCreation.waiting_for_ttl)
    await callback.answer()


@dp.callback_query(F.data == "m:create")
async def handle_create_moment(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–º–µ–Ω—Ç–∞ - —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥"""
    try:
        data = await state.get_data()
        user_id = callback.from_user.id
        username = callback.from_user.username

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
        can_create, current_count = await check_daily_limit(user_id)
        if not can_create:
            await callback.message.edit_text(
                f"‚ùå –¢—ã —É–∂–µ —Å–æ–∑–¥–∞–ª {current_count} –ú–æ–º–µ–Ω—Ç–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="m:cancel")]]
                ),
            )
            await state.clear()
            await callback.answer()
            return

        # –°–æ–∑–¥–∞–µ–º –º–æ–º–µ–Ω—Ç
        await create_moment(
            user_id=user_id,
            username=username or "–ê–Ω–æ–Ω–∏–º",
            title=data["title"],
            lat=data["lat"],
            lng=data["lng"],
            ttl_minutes=data["ttl_minutes"],
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å username –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if username:
            with get_session() as session:
                user = session.get(User, user_id)
                if user:
                    user.username = username
                    session.commit()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º TTL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        ttl_minutes = data["ttl_minutes"]
        if ttl_minutes < 60:
            ttl_human = f"{ttl_minutes} –º–∏–Ω"
        else:
            hours = ttl_minutes // 60
            minutes = ttl_minutes % 60
            if minutes == 0:
                ttl_human = f"{hours} —á–∞—Å" if hours == 1 else f"{hours} —á–∞—Å–∞"
            else:
                ttl_human = f"{hours}—á {minutes}–º"

        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç
        from utils.geo_utils import to_google_maps_link

        route_url = to_google_maps_link(data["lat"], data["lng"])

        await callback.message.edit_text(
            f"‚úÖ **–ú–æ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω!**\n\n"
            f"üë§ –ê–≤—Ç–æ—Ä: @{username or '–ê–Ω–æ–Ω–∏–º'}\n"
            f"‚ú® *{data['title']}*\n"
            f"‚è≥ –∏—Å—Ç–µ—á—ë—Ç —á–µ—Ä–µ–∑ *{ttl_human}*\n\n"
            f"üöó [–ú–∞—Ä—à—Ä—É—Ç]({route_url})",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="m:cancel")]]
            ),
        )

        await state.clear()
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–º–µ–Ω—Ç–∞: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="m:cancel")]]
            ),
        )
        await state.clear()
        await callback.answer()


@dp.callback_query(F.data == "m:cancel")
async def handle_cancel_moment(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–º–µ–Ω—Ç–∞"""
    await callback.message.edit_text(
        "–û–∫, –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ú–æ–º–µ–Ω—Ç–∞.\n(–ø–æ–¥—Å–∫–∞–∑–∫–∞) –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∂–º–∏ **‚ûï –ú–æ–º–µ–Ω—Ç**, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.",
        parse_mode="Markdown",
        reply_markup=main_menu_kb(),
    )
    await state.clear()
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–¥–∏—É—Å–∞
@dp.callback_query(F.data.startswith(CB_RADIUS_PREFIX))
async def on_radius_change(cb: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–¥–∏—É—Å–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏"""
    try:
        km = int(cb.data.split(":", 1)[1])
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–¥–∏—É—Å", show_alert=True)
        return

    if km not in RADIUS_OPTIONS:
        await cb.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π —Ä–∞–¥–∏—É—Å", show_alert=True)
        return

    set_user_radius(cb.from_user.id, km)
    await cb.answer(f"–†–∞–¥–∏—É—Å: {km} –∫–º")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–∞–¥–∏—É—Å–æ–º
    await cb.message.edit_reply_markup(reply_markup=kb_radius(km))


@dp.callback_query(F.data.startswith("radius:"))
async def handle_radius_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∏—Å–∫–∞"""
    try:
        if callback.data == "radius:cancel":
            try:
                await callback.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–¥–∏—É—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã.", reply_markup=main_menu_kb())
            except TelegramBadRequest:
                await callback.message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–¥–∏—É—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã.", reply_markup=main_menu_kb())
            await callback.answer()
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–¥–∏—É—Å –∏–∑ callback_data: radius:5
        radius = int(callback.data.split(":")[1])
        user_id = callback.from_user.id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–¥–∏—É—Å –≤ –ë–î
        with get_session() as session:
            user = session.get(User, user_id)
            if user:
                user.default_radius_km = radius
                session.commit()
            else:
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                user = User(
                    id=user_id,
                    username=callback.from_user.username,
                    full_name=callback.from_user.full_name,
                    default_radius_km=radius,
                )
                session.add(user)
                session.commit()

        try:
            await callback.message.edit_text(
                f"‚úÖ **–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {radius} –∫–º**\n\n"
                f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–∞–¥–∏—É—Å {radius} –∫–º.\n"
                f"–≠—Ç–æ—Ç —Ä–∞–¥–∏—É—Å —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–º–µ–Ω—Ç–æ–≤.",
                parse_mode="Markdown",
                reply_markup=main_menu_kb(),
            )
        except TelegramBadRequest:
            await callback.message.answer(
                f"‚úÖ **–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {radius} –∫–º**\n\n"
                f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–∞–¥–∏—É—Å {radius} –∫–º.\n"
                f"–≠—Ç–æ—Ç —Ä–∞–¥–∏—É—Å —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–º–µ–Ω—Ç–æ–≤.",
                parse_mode="Markdown",
                reply_markup=main_menu_kb(),
            )
        await callback.answer(f"–†–∞–¥–∏—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {radius} –∫–º")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–¥–∏—É—Å–∞: {e}")
        try:
            await callback.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=main_menu_kb(),
            )
        except TelegramBadRequest:
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=main_menu_kb(),
            )
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def cleanup_moments_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤"""
    while True:
        try:
            count = await cleanup_expired_moments()
            if count > 0:
                logger.info(f"–û—á–∏—â–µ–Ω–æ {count} –∏—Å—Ç–µ–∫—à–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –º–æ–º–µ–Ω—Ç–æ–≤: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        await asyncio.sleep(300)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ EventBot (aiogram 3.x)...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –º–æ–º–µ–Ω—Ç–æ–≤
    from config import load_settings

    settings = load_settings()
    if settings.moments_enable:
        asyncio.create_task(cleanup_moments_task())
        logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –º–æ–º–µ–Ω—Ç–æ–≤")

    # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    RUN_MODE = os.getenv("BOT_RUN_MODE", "webhook")
    WEBHOOK_URL = os.getenv("WEBHOOK_URL")
    int(os.getenv("PORT", "8000"))

    # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    logger.info(f"–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞: {RUN_MODE}")
    if WEBHOOK_URL:
        logger.info(f"WEBHOOK_URL: {WEBHOOK_URL}")
    else:
        logger.info("WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π webhook
    try:
        webhook_info = await bot.get_webhook_info()
        logger.info(f"–¢–µ–∫—É—â–∏–π webhook: {webhook_info.url or '–ø—É—Å—Ç–æ–π'}")
        logger.info(f"Pending updates: {webhook_info.pending_update_count}")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook info: {e}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try:
        commands = [
            types.BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
            types.BotCommand(command="help", description="‚ùì –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
            types.BotCommand(command="nearby", description="üìç –ù–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏—è —Ä—è–¥–æ–º"),
            types.BotCommand(command="create", description="‚ûï –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ"),
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –º–æ–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –≤–∫–ª—é—á–µ–Ω—ã
        if settings.moments_enable:
            commands.append(types.BotCommand(command="moment", description="‚ö° –°–æ–∑–¥–∞—Ç—å –ú–æ–º–µ–Ω—Ç"))

        commands.extend(
            [
                types.BotCommand(command="myevents", description="üìã –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è"),
                types.BotCommand(command="share", description="üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º"),
                types.BotCommand(command="admin_event", description="üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è (–∞–¥–º–∏–Ω)"),
                types.BotCommand(command="diag_last", description="üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"),
                types.BotCommand(command="diag_search", description="üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π"),
                types.BotCommand(command="diag_webhook", description="üîó –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ webhook"),
            ]
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        await bot.set_my_commands(commands)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
        await bot.set_chat_menu_button(menu_button=MenuButtonCommands())

        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: {e}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
    RUN_MODE = os.getenv("BOT_RUN_MODE", "webhook")
    PORT = os.getenv("PORT", "8000")
    WEBHOOK_URL = os.getenv("WEBHOOK_URL")

    logger.info(f"–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞: {RUN_MODE}")
    logger.info(f"–ü–æ—Ä—Ç: {PORT}")
    logger.info(f"Webhook URL: {WEBHOOK_URL}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    try:
        if RUN_MODE == "webhook":
            # Webhook —Ä–µ–∂–∏–º –¥–ª—è Railway
            if not WEBHOOK_URL:
                logger.error("WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è webhook —Ä–µ–∂–∏–º–∞")
                return

            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤—ã–∫–ª—é—á–∞–µ–º getUpdates –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Telegram
            await bot.delete_webhook(drop_pending_updates=True)
            logger.info("–°—Ç–∞—Ä—ã–π webhook —É–¥–∞–ª–µ–Ω")

            # –ó–∞–ø—É—Å–∫–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ä—Ç—É
            from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
            from aiohttp import web

            # –°–æ–∑–¥–∞–µ–º aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            app = web.Application()

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π webhook handler
            webhook_path = "/webhook"

            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π handler –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
            webhook_handler = SimpleRequestHandler(
                dispatcher=dp,
                bot=bot,
            )

            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π wrapper
            async def safe_webhook_handler(request):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ JSON
                    try:
                        data = await request.json()
                    except Exception:
                        logger.debug("Webhook: –Ω–µ JSON, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
                        return web.Response(status=204)

                    # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ "–ø–æ—Ö–æ–∂–µ –ª–∏ –Ω–∞ Telegram Update"
                    if not isinstance(data, dict) or "update_id" not in data:
                        logger.debug("Webhook: –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ Telegram Update, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
                        return web.Response(status=204)

                    # –ü–µ—Ä–µ–¥–∞–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π handler
                    return await webhook_handler.handle(request)

                except Exception as e:
                    logger.debug(f"Webhook: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º: {e}")
                    return web.Response(status=204)

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π handler
            app.router.add_post(webhook_path, safe_webhook_handler)

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            setup_application(app, dp, bot=bot)

            # –î–æ–±–∞–≤–ª—è–µ–º health check endpoint –≤ webhook —Å–µ—Ä–≤–µ—Ä

            async def health_check(request):
                return web.json_response({"ok": True})

            app.router.add_get("/health", health_check)
            app.router.add_get("/", health_check)

            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
            logger.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:")
            for route in app.router.routes():
                logger.info(f"  {route.method} {route.resource.canonical}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä (webhook + health check)
            port = int(PORT)
            logger.info(f"–ó–∞–ø—É—Å–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (webhook + health) –Ω–∞ –ø–æ—Ä—Ç—É {port}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
            runner = web.AppRunner(app)
            await runner.setup()
            site = web.TCPSite(runner, "0.0.0.0", port)
            await site.start()
            logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:{port}")

            # –¢–ï–ü–ï–†–¨ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
            try:
                await bot.set_webhook(url=WEBHOOK_URL)
                logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
                # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É

            logger.info("Webhook —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

            # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
            try:
                while True:
                    await asyncio.sleep(3600)  # –°–ø–∏–º –ø–æ —á–∞—Å—É
            except asyncio.CancelledError:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            finally:
                await runner.cleanup()

        else:
            # Polling —Ä–µ–∂–∏–º –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            # –ü–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º —Å–Ω–∏–º–∞–µ–º –≤–µ–±—Ö—É–∫
            await bot.delete_webhook(drop_pending_updates=True)
            logger.info("Webhook —É–¥–∞–ª–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º polling")

            await dp.start_polling(bot)

    except asyncio.CancelledError:
        # –®—Ç–∞—Ç–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ ‚Äî –Ω–µ —à—É–º–∏–º
        logger.info("Polling cancelled (shutdown).")
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (KeyboardInterrupt).")
    finally:
        # –ó–∞–∫—Ä—ã—Ç—å —Å–µ—Ç–µ–≤—ã–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã –∞–∫–∫—É—Ä–∞—Ç–Ω–æ
        try:
            await dp.storage.close()
        except Exception:
            pass
        try:
            await bot.session.close()
        except Exception:
            pass
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏ —Å–æ–±—ã—Ç–∏–π
@dp.callback_query(F.data.startswith("close_event_"))
async def handle_close_event(callback: types.CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    event_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id

    success = change_event_status(event_id, "closed", user_id)
    if success:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        events = get_user_events(user_id)
        event_name = "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        if events:
            event = next((e for e in events if e["id"] == event_id), None)
            if event:
                event_name = event["title"]

        await callback.answer(f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{event_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if events:
            first_event = events[0]
            text = f"üìã **–í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è:**\n\n{format_event_for_display(first_event)}"
            buttons = get_status_change_buttons(first_event["id"], first_event["status"])
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=btn["text"], callback_data=btn["callback_data"])] for btn in buttons
                ]
            )
            await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=keyboard)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")


@dp.callback_query(F.data.startswith("open_event_"))
async def handle_open_event(callback: types.CallbackQuery):
    """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    event_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id

    success = change_event_status(event_id, "open", user_id)
    if success:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        events = get_user_events(user_id)
        event_name = "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        if events:
            event = next((e for e in events if e["id"] == event_id), None)
            if event:
                event_name = event["title"]

        await callback.answer(f"üîÑ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{event_name}' —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω–æ!")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if events:
            first_event = events[0]
            text = f"üìã **–í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è:**\n\n{format_event_for_display(first_event)}"
            buttons = get_status_change_buttons(first_event["id"], first_event["status"])
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=btn["text"], callback_data=btn["callback_data"])] for btn in buttons
                ]
            )
            await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=keyboard)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")


@dp.callback_query(F.data.startswith("edit_event_"))
async def handle_edit_event(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    event_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    events = get_user_events(user_id)
    event_exists = any(event["id"] == event_id for event in events)

    if not event_exists:
        await callback.answer("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–±—ã—Ç–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(event_id=event_id)
    await state.set_state(EventEditing.choosing_field)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = edit_event_keyboard(event_id)
    await callback.message.answer(
        "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è**\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", parse_mode="Markdown", reply_markup=keyboard
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–µ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query(F.data.startswith("edit_title_"))
async def handle_edit_title_choice(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è"""
    event_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id

    logging.info(f"handle_edit_title_choice: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è {event_id}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–±—ã—Ç–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(event_id=event_id)
    await state.set_state(EventEditing.waiting_for_title)

    logging.info("handle_edit_title_choice: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ EventEditing.waiting_for_title")

    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    await callback.answer()


@dp.callback_query(F.data.startswith("edit_date_"))
async def handle_edit_date_choice(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã"""
    await state.set_state(EventEditing.waiting_for_date)
    await callback.message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12.09.2025):")
    await callback.answer()


@dp.callback_query(F.data.startswith("edit_time_"))
async def handle_edit_time_choice(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏"""
    await state.set_state(EventEditing.waiting_for_time)
    await callback.message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18:30):")
    await callback.answer()


@dp.callback_query(F.data.startswith("edit_location_"))
async def handle_edit_location_choice(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏"""
    await state.set_state(EventEditing.waiting_for_location)
    await callback.message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:")
    await callback.answer()


@dp.callback_query(F.data.startswith("edit_description_"))
async def handle_edit_description_choice(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è"""
    await state.set_state(EventEditing.waiting_for_description)
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    await callback.answer()


@dp.callback_query(F.data.startswith("edit_finish_"))
async def handle_edit_finish(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    event_id = data.get("event_id")

    if event_id:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        events = get_user_events(callback.from_user.id)
        updated_event = next((event for event in events if event["id"] == event_id), None)

        if updated_event:
            text = f"‚úÖ **–°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!**\n\n{format_event_for_display(updated_event)}"
            buttons = get_status_change_buttons(updated_event["id"], updated_event["status"])
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=btn["text"], callback_data=btn["callback_data"])] for btn in buttons
                ]
            )
            await callback.message.answer(text, parse_mode="Markdown", reply_markup=keyboard)

    await state.clear()
    await callback.answer("‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message(EventEditing.waiting_for_title)
async def handle_title_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    event_id = data.get("event_id")

    logging.info(
        f"handle_title_input: –ø–æ–ª—É—á–µ–Ω –≤–≤–æ–¥ '{message.text}' –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}"
    )

    if event_id and message.text:
        logging.info(f"handle_title_input: –≤—ã–∑—ã–≤–∞–µ–º update_event_field –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}")
        success = update_event_field(event_id, "title", message.text.strip(), message.from_user.id)
        logging.info(f"handle_title_input: —Ä–µ–∑—É–ª—å—Ç–∞—Ç update_event_field: {success}")

        if success:
            await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            keyboard = edit_event_keyboard(event_id)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=keyboard)
            await state.set_state(EventEditing.choosing_field)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è")
    else:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")


@dp.message(EventEditing.waiting_for_date)
async def handle_date_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã"""
    data = await state.get_data()
    event_id = data.get("event_id")

    if event_id and message.text:
        success = update_event_field(event_id, "starts_at", message.text.strip(), message.from_user.id)
        if success:
            await message.answer("‚úÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            keyboard = edit_event_keyboard(event_id)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=keyboard)
            await state.set_state(EventEditing.choosing_field)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç (–î–î.–ú–ú.–ì–ì–ì–ì)")
    else:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É")


@dp.message(EventEditing.waiting_for_time)
async def handle_time_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    data = await state.get_data()
    event_id = data.get("event_id")

    if event_id and message.text:
        # –î–ª—è –≤—Ä–µ–º–µ–Ω–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å –Ω–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        try:
            from datetime import datetime

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è
            events = get_user_events(message.from_user.id)
            current_event = next((event for event in events if event["id"] == event_id), None)

            if current_event and current_event["starts_at"]:
                current_date = current_event["starts_at"].strftime("%d.%m.%Y")
                new_datetime = f"{current_date} {message.text.strip()}"
                success = update_event_field(event_id, "starts_at", new_datetime, message.from_user.id)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é
                today = datetime.now().strftime("%d.%m.%Y")
                new_datetime = f"{today} {message.text.strip()}"
                success = update_event_field(event_id, "starts_at", new_datetime, message.from_user.id)

            if success:
                await message.answer("‚úÖ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
                keyboard = edit_event_keyboard(event_id)
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=keyboard)
                await state.set_state(EventEditing.choosing_field)
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç (–ß–ß:–ú–ú)")
        except Exception:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç (–ß–ß:–ú–ú)")
    else:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è")


@dp.message(EventEditing.waiting_for_location)
async def handle_location_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏"""
    data = await state.get_data()
    event_id = data.get("event_id")

    if event_id and message.text:
        success = update_event_field(event_id, "location_name", message.text.strip(), message.from_user.id)
        if success:
            await message.answer("‚úÖ –õ–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            keyboard = edit_event_keyboard(event_id)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=keyboard)
            await state.set_state(EventEditing.choosing_field)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–∏")
    else:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ª–æ–∫–∞—Ü–∏—é")


@dp.message(EventEditing.waiting_for_description)
async def handle_description_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
    data = await state.get_data()
    event_id = data.get("event_id")

    if event_id and message.text:
        success = update_event_field(event_id, "description", message.text.strip(), message.from_user.id)
        if success:
            await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            keyboard = edit_event_keyboard(event_id)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=keyboard)
            await state.set_state(EventEditing.choosing_field)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è")
    else:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")


@dp.callback_query(F.data.startswith("next_event_"))
async def handle_next_event(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–±—ã—Ç–∏—é"""
    user_id = callback.from_user.id
    events = get_user_events(user_id)

    if len(events) > 1:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–±—ã—Ç–∏–µ
        second_event = events[1]
        text = f"üìã **–í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è:**\n\n{format_event_for_display(second_event)}"
        buttons = get_status_change_buttons(second_event["id"], second_event["status"])
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=btn["text"], callback_data=btn["callback_data"])] for btn in buttons
            ]
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ"
        keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ", callback_data="prev_event_0")])

        await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=keyboard)
        await callback.answer()
    else:
        await callback.answer("–≠—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ")


@dp.callback_query(F.data.startswith("back_to_main_"))
async def handle_back_to_main(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.answer("üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_kb())
    await callback.answer("üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")


@dp.callback_query(F.data.startswith("prev_event_"))
async def handle_prev_event(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ–±—ã—Ç–∏—é"""
    user_id = callback.from_user.id
    events = get_user_events(user_id)

    if events:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
        first_event = events[0]
        text = f"üìã **–í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è:**\n\n{format_event_for_display(first_event)}"
        buttons = get_status_change_buttons(first_event["id"], first_event["status"])
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=btn["text"], callback_data=btn["callback_data"])] for btn in buttons
            ]
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ" –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Å–æ–±—ã—Ç–∏—è
        if len(events) > 1:
            keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ", callback_data="next_event_1")])

        await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=keyboard)
        await callback.answer()


if __name__ == "__main__":
    asyncio.run(main())
