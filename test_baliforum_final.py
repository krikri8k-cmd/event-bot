#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Baliforum –ø–∞—Ä—Å–µ—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Å–µ—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¢–ó
"""

import asyncio
import logging
import os
from datetime import UTC, datetime
from zoneinfo import ZoneInfo

from database import init_engine
from ingest import upsert_events
from sources.baliforum import _ru_date_to_dt, fetch_baliforum_events

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)


def test_datetime_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç...")

    tz = ZoneInfo("Asia/Makassar")
    now = datetime.now(tz)

    test_cases = [
        # (input, expected_start_hour, expected_start_minute, should_parse)
        ("—Å–µ–≥–æ–¥–Ω—è 19:00", 19, 0, True),
        ("–∑–∞–≤—Ç—Ä–∞ 07:30", 7, 30, True),
        ("10 —Å–µ–Ω—Ç—è–±—Ä—è 20:15", 20, 15, True),
        ("10.09 20:15", 20, 15, True),
        ("—á—Ç 19:30", 19, 30, True),  # –ë–ª–∏–∂–∞–π—à–∏–π —á–µ—Ç–≤–µ—Ä–≥
        ("19:00‚Äì21:00", 19, 0, True),  # –î–∏–∞–ø–∞–∑–æ–Ω - –±–µ—Ä–µ–º –Ω–∞—á–∞–ª–æ
        ("—Å–µ–≥–æ–¥–Ω—è", None, None, False),  # –ë–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å None
        ("10 —Å–µ–Ω—Ç—è–±—Ä—è", None, None, False),  # –ë–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å None
    ]

    passed = 0
    total = len(test_cases)

    for input_text, expected_hour, expected_minute, should_parse in test_cases:
        start, end = _ru_date_to_dt(input_text, now, tz)

        if should_parse:
            if start and start.hour == expected_hour and start.minute == expected_minute:
                logger.info(f"  ‚úÖ '{input_text}' ‚Üí {start.strftime('%H:%M')}")
                passed += 1
            else:
                logger.error(f"  ‚ùå '{input_text}' ‚Üí {start} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_hour:02d}:{expected_minute:02d})")
        else:
            if start is None:
                logger.info(f"  ‚úÖ '{input_text}' ‚Üí None (–ø—Ä–æ–ø—É—â–µ–Ω–æ)")
                passed += 1
            else:
                logger.error(f"  ‚ùå '{input_text}' ‚Üí {start} (–æ–∂–∏–¥–∞–ª–æ—Å—å None)")

    logger.info(f"üìä –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    return passed == total


def test_baliforum_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ Baliforum"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Baliforum...")

    events = fetch_baliforum_events(limit=20)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è —Å —Ç–æ—á–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
    events_with_time = [e for e in events if e.get("start_time")]
    events_without_time = [e for e in events if not e.get("start_time")]

    logger.info(f"üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")
    logger.info(f"üìä –° —Ç–æ—á–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º: {len(events_with_time)}")
    logger.info(f"üìä –ë–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ (–ø—Ä–æ–ø—É—â–µ–Ω—ã): {len(events_without_time)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏–º–µ—é—Ç UTC
    utc_events = 0
    for event in events_with_time:
        start_time = event["start_time"]
        if start_time and start_time.tzinfo == UTC:
            utc_events += 1

    logger.info(f"üìä –°–æ–±—ã—Ç–∏–π –≤ UTC: {utc_events}/{len(events_with_time)}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    for i, event in enumerate(events_with_time[:3], 1):
        logger.info(f"  {i}. {event['title']}")
        logger.info(f"     –í—Ä–µ–º—è: {event['start_time']}")
        logger.info(f"     External ID: {event.get('external_id', 'N/A')}")

    return len(events_with_time) > 0 and utc_events == len(events_with_time)


def test_idempotent_upsert():
    """–¢–µ—Å—Ç –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ–≥–æ upsert"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–π upsert...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    database_url = os.getenv(
        "DATABASE_URL",
        "postgresql://postgres:GHeScaRnEXJEPRRXpFGJCdTPgcQOtzlw@interchange.proxy.rlwy.net:23764/railway?sslmode=require",
    )

    try:
        init_engine(database_url)
        from database import engine

        if not engine:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å engine")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
    events = fetch_baliforum_events(limit=5)
    from event_apis import RawEvent

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RawEvent
    raw_events = []
    for event in events:
        if event.get("start_time"):  # –¢–æ–ª—å–∫–æ —Å –≤—Ä–µ–º–µ–Ω–µ–º
            raw_event = RawEvent(
                title=event["title"],
                lat=event["lat"] or 0.0,
                lng=event["lng"] or 0.0,
                starts_at=event["start_time"],
                source="baliforum",
                external_id=event.get("external_id", "test"),
                url=event["url"],
            )
            raw_events.append(raw_event)

    if not raw_events:
        logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è upsert")
        return False

    # –ü–µ—Ä–≤—ã–π upsert
    logger.info("üîÑ –ü–µ—Ä–≤—ã–π upsert...")
    result1 = upsert_events(raw_events, engine)

    # –í—Ç–æ—Ä–æ–π upsert (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–º)
    logger.info("üîÑ –í—Ç–æ—Ä–æ–π upsert (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–π)...")
    result2 = upsert_events(raw_events, engine)

    logger.info(f"üìä –ü–µ—Ä–≤—ã–π upsert: {result1} —Å–æ–±—ã—Ç–∏–π")
    logger.info(f"üìä –í—Ç–æ—Ä–æ–π upsert: {result2} —Å–æ–±—ã—Ç–∏–π")

    # –í—Ç–æ—Ä–æ–π upsert –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—å—à–µ –≤—Å—Ç–∞–≤–æ–∫ (–±–æ–ª—å—à–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
    success = result2 >= 0  # –ì–ª–∞–≤–Ω–æ–µ - –Ω–µ—Ç –æ—à–∏–±–æ–∫
    logger.info(f"‚úÖ –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {'—Ä–∞–±–æ—Ç–∞–µ—Ç' if success else '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")

    return success


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Baliforum –ø–∞—Ä—Å–µ—Ä–∞...")

    tests = [
        ("–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç", test_datetime_parsing),
        ("–ü–∞—Ä—Å–∏–Ω–≥ Baliforum", test_baliforum_parsing),
        ("–ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–π upsert", test_idempotent_upsert),
    ]

    passed = 0
    total = len(tests)

    for test_name, test_func in tests:
        logger.info(f"\n{'='*50}")
        logger.info(f"üß™ {test_name}")
        logger.info(f"{'='*50}")

        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()

            if result:
                logger.info(f"‚úÖ {test_name}: –ü–†–û–®–ï–õ")
                passed += 1
            else:
                logger.error(f"‚ùå {test_name}: –ù–ï –ü–†–û–®–ï–õ")
        except Exception as e:
            logger.error(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")

    logger.info(f"\n{'='*50}")
    logger.info(f"üìä –ò–¢–û–ì–ò: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    logger.info(f"{'='*50}")

    if passed == total:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! Baliforum –ø–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
    else:
        logger.error("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")


if __name__ == "__main__":
    asyncio.run(main())
