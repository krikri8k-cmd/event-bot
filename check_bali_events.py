#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –ë–∞–ª–∏
"""

import asyncio
import logging

from sqlalchemy import text

from config import load_settings
from database import get_engine, init_engine

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def check_bali_events():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –ë–∞–ª–∏"""
    print("üèùÔ∏è –ü–†–û–í–ï–†–ö–ê –°–û–ë–´–¢–ò–ô –ù–ê –ë–ê–õ–ò")
    print("=" * 50)

    settings = load_settings()
    init_engine(settings.database_url)
    engine = get_engine()

    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_lat = -8.679649
    user_lon = 115.230388

    print(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ({user_lat}, {user_lon})")
    print()

    with engine.connect() as conn:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –ë–∞–ª–∏ –≤ events_parser
        print("1Ô∏è‚É£ –°–û–ë–´–¢–ò–Ø –ù–ê –ë–ê–õ–ò –í EVENTS_PARSER")
        print("-" * 30)

        try:
            # –°–æ–±—ã—Ç–∏—è –Ω–∞ –ë–∞–ª–∏
            bali_events = conn.execute(
                text("""
                SELECT id, title, starts_at, lat, lng, country, city
                FROM events_parser
                WHERE (country = 'ID' OR city = 'bali' OR city ILIKE '%bali%')
                ORDER BY starts_at DESC
                LIMIT 20
            """)
            ).fetchall()

            print(f"üìä –°–æ–±—ã—Ç–∏–π –Ω–∞ –ë–∞–ª–∏ –≤ events_parser: {len(bali_events)}")
            for event in bali_events:
                print(f"   ID {event[0]}: '{event[1]}' - {event[2]}")
                print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({event[3]}, {event[4]})")
                print(f"      –†–µ–≥–∏–æ–Ω: {event[5]}, {event[6]}")

            print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–∞–ª–∏: {e}")
            print()

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –≤ events_parser
        print("2Ô∏è‚É£ –í–°–ï –°–û–ë–´–¢–ò–Ø –í EVENTS_PARSER")
        print("-" * 30)

        try:
            # –í—Å–µ —Å–æ–±—ã—Ç–∏—è
            all_events = conn.execute(
                text("""
                SELECT id, title, starts_at, lat, lng, country, city
                FROM events_parser
                ORDER BY starts_at DESC
                LIMIT 20
            """)
            ).fetchall()

            print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –≤ events_parser: {len(all_events)}")
            for event in all_events:
                print(f"   ID {event[0]}: '{event[1]}' - {event[2]}")
                print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({event[3]}, {event[4]})")
                print(f"      –†–µ–≥–∏–æ–Ω: {event[5]}, {event[6]}")

            print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π: {e}")
            print()

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ events_user
        print("3Ô∏è‚É£ –°–û–ë–´–¢–ò–Ø –í EVENTS_USER")
        print("-" * 30)

        try:
            # –°–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_events = conn.execute(
                text("""
                SELECT id, title, starts_at, lat, lng, country, city
                FROM events_user
                ORDER BY starts_at DESC
                LIMIT 20
            """)
            ).fetchall()

            print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –≤ events_user: {len(user_events)}")
            for event in user_events:
                print(f"   ID {event[0]}: '{event[1]}' - {event[2]}")
                print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({event[3]}, {event[4]})")
                print(f"      –†–µ–≥–∏–æ–Ω: {event[5]}, {event[6]}")

            print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π: {e}")
            print()

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ events (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è)
        print("4Ô∏è‚É£ –°–û–ë–´–¢–ò–Ø –í EVENTS (–û–ë–™–ï–î–ò–ù–ï–ù–ù–ê–Ø)")
        print("-" * 30)

        try:
            # –°–æ–±—ã—Ç–∏—è –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
            events = conn.execute(
                text("""
                SELECT id, title, starts_at, lat, lng, country, city
                FROM events
                ORDER BY starts_at DESC
                LIMIT 20
            """)
            ).fetchall()

            print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –≤ events: {len(events)}")
            for event in events:
                print(f"   ID {event[0]}: '{event[1]}' - {event[2]}")
                print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({event[3]}, {event[4]})")
                print(f"      –†–µ–≥–∏–æ–Ω: {event[5]}, {event[6]}")

            print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã: {e}")
            print()

        # 5. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
        print("5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´")
        print("-" * 30)

        print("üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   1. –°–æ–±—ã—Ç–∏—è –Ω–∞ –ë–∞–ª–∏ –Ω–µ –ø–∞—Ä—Å—è—Ç—Å—è")
        print("   2. –°–æ–±—ã—Ç–∏—è –ø–∞—Ä—Å—è—Ç—Å—è, –Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è")
        print("   3. –°–æ–±—ã—Ç–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è, –Ω–æ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–µ–≥–∏–æ–Ω–æ–º")
        print("   4. –°–æ–±—ã—Ç–∏—è –≤ –ø—Ä–æ—à–ª–æ–º")
        print("   5. –°–æ–±—ã—Ç–∏—è –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
        print()

    print("=" * 50)
    print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –ë–∞–ª–∏")
    print("2. –ü—Ä–æ–≤–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î")
    print("3. –ü—Ä–æ–≤–µ—Ä—å —Ä–µ–≥–∏–æ–Ω —Å–æ–±—ã—Ç–∏–π")
    print("4. –ü—Ä–æ–≤–µ—Ä—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–±—ã—Ç–∏–π")
    print("5. –ü—Ä–æ–≤–µ—Ä—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await check_bali_events()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)
