#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ moments schema fix
"""

from __future__ import annotations

import logging
import sys
from pathlib import Path

from sqlalchemy import text

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# –ò–º–ø–æ—Ä—Ç—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–∏
from config import load_settings  # noqa: E402
from database import get_engine, init_engine  # noqa: E402

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def apply_migration():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é moments schema fix"""
    try:
        # –ß–∏—Ç–∞–µ–º SQL –º–∏–≥—Ä–∞—Ü–∏—é
        migration_file = project_root / "migrations" / "003_moments_schema_fix.sql"

        if not migration_file.exists():
            logger.error(f"‚ùå –§–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {migration_file}")
            return False

        with open(migration_file, encoding="utf-8") as f:
            migration_sql = f.read()

        logger.info("üìÑ –ß–∏—Ç–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é moments schema fix...")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        settings = load_settings()
        init_engine(settings.database_url)
        engine = get_engine()

        with engine.connect() as conn:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
            logger.info("üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é moments schema fix...")
            conn.execute(text(migration_sql))
            conn.commit()

        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è moments schema fix —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


def check_moments_table():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã moments"""
    try:
        settings = load_settings()
        init_engine(settings.database_url)
        engine = get_engine()

        with engine.connect() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            result = conn.execute(
                text("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_name = 'moments'
                );
            """)
            )

            table_exists = result.scalar()

            if not table_exists:
                logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ moments –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            result = conn.execute(
                text("""
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_name = 'moments'
                ORDER BY ordinal_position;
            """)
            )

            columns = result.fetchall()

            logger.info("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã moments:")
            for col in columns:
                logger.info(
                    f"  - {col[0]}: {col[1]} {'NULL' if col[2] == 'YES' else 'NOT NULL'} {f'DEFAULT {col[3]}' if col[3] else ''}"
                )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
            result = conn.execute(
                text("""
                SELECT indexname, indexdef
                FROM pg_indexes 
                WHERE tablename = 'moments'
                ORDER BY indexname;
            """)
            )

            indexes = result.fetchall()

            logger.info("üîç –ò–Ω–¥–µ–∫—Å—ã —Ç–∞–±–ª–∏—Ü—ã moments:")
            for idx in indexes:
                logger.info(f"  - {idx[0]}")

            return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã moments: {e}")
        return False


if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ moments schema fix...")

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    if apply_migration():
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã...")
        check_moments_table()

    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é")
        sys.exit(1)
