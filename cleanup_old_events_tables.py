#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü events_parser –∏ events_user
–ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ events
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from sqlalchemy import create_engine, text

from config import load_settings


def check_migration_success(engine) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"""
    with engine.connect() as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ events –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        result = conn.execute(
            text("""
            SELECT
                COUNT(*) as total,
                COUNT(CASE WHEN source = 'user' THEN 1 END) as user_events,
                COUNT(CASE WHEN source != 'user' AND source IS NOT NULL THEN 1 END) as parser_events
            FROM events
        """)
        )

        row = result.fetchone()
        total, user_events, parser_events = row

        print(f"üìä –°–æ–±—ã—Ç–∏—è –≤ events: –≤—Å–µ–≥–æ={total}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ={user_events}, –æ—Ç –ø–∞—Ä—Å–µ—Ä–æ–≤={parser_events}")

        # –ú–∏–≥—Ä–∞—Ü–∏—è —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ–π –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è –æ—Ç –ø–∞—Ä—Å–µ—Ä–æ–≤ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        return parser_events > 0 or user_events > 0


def get_table_counts(engine) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö"""
    counts = {}
    tables = ["events", "events_parser", "events_user"]

    with engine.connect() as conn:
        for table in tables:
            try:
                result = conn.execute(text(f"SELECT COUNT(*) FROM {table}"))
                counts[table] = result.fetchone()[0]
            except Exception:
                counts[table] = 0

    return counts


def create_backup_tables(engine) -> bool:
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Ç–∞–±–ª–∏—Ü"""
    try:
        with engine.connect() as conn:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
            conn.execute(
                text("""
                CREATE TABLE IF NOT EXISTS events_parser_backup AS
                SELECT * FROM events_parser
            """)
            )

            conn.execute(
                text("""
                CREATE TABLE IF NOT EXISTS events_user_backup AS
                SELECT * FROM events_user
            """)
            )

            conn.commit()

        print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {e}")
        return False


def drop_old_tables(engine) -> bool:
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        with engine.connect() as conn:
            # –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–Ω–∞—á–∞–ª–∞ foreign keys)
            conn.execute(text("DROP TABLE IF EXISTS events_user CASCADE"))
            conn.execute(text("DROP TABLE IF EXISTS events_parser CASCADE"))
            conn.commit()

        print("‚úÖ –°—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        return False


def main():
    print("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü events_parser –∏ events_user")
    print("=" * 60)

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = load_settings()
        engine = create_engine(settings.database_url)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        with engine.connect() as conn:
            conn.execute(text("SELECT 1"))
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
        if not check_migration_success(engine):
            print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ!")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É events")
            return 1

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
        counts = get_table_counts(engine)
        print(f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü: {counts}")

        if counts["events_parser"] == 0 and counts["events_user"] == 0:
            print("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü—ã events_parser –∏ events_user —É–∂–µ –ø—É—Å—Ç—ã")
            return 0

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
        print("\nüíæ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏...")
        if not create_backup_tables(engine):
            return 1

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã events_parser –∏ events_user!")
        print("–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ–∑–¥–∞–Ω—ã –≤ events_parser_backup –∏ events_user_backup")

        response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ? (yes/no): ").strip().lower()
        if response not in ["yes", "y", "–¥–∞", "–¥"]:
            print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return 0

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        print("\nüóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã...")
        if not drop_old_tables(engine):
            return 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        counts_after = get_table_counts(engine)
        print(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {counts_after}")

        if counts_after["events_parser"] == 0 and counts_after["events_user"] == 0:
            print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("üéâ –¢–µ–ø–µ—Ä—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –µ–¥–∏–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ events")
            return 0
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏!")
            return 1

    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
