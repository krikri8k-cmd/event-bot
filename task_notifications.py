#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –¥–µ–¥–ª–∞–π–Ω–∞—Ö –∑–∞–¥–∞–Ω–∏–π
"""

import asyncio
import logging
import os

from aiogram import Bot
from dotenv import load_dotenv

from tasks_service import get_tasks_approaching_deadline, mark_tasks_as_expired

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv("app.local.env")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=os.getenv("TELEGRAM_TOKEN"))


async def send_deadline_notifications():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –¥–µ–¥–ª–∞–π–Ω–∞—Ö"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è, –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–µ—Å—è –∫ –¥–µ–¥–ª–∞–π–Ω—É (–∑–∞ 2 —á–∞—Å–∞)
        approaching_tasks = get_tasks_approaching_deadline(hours_before=2)

        if not approaching_tasks:
            logger.info("–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π, –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –∫ –¥–µ–¥–ª–∞–π–Ω—É")
            return

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(approaching_tasks)} –∑–∞–¥–∞–Ω–∏–π, –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –∫ –¥–µ–¥–ª–∞–π–Ω—É")

        for task_info in approaching_tasks:
            user_id = task_info["user_id"]
            task_title = task_info["task_title"]
            hours_left = task_info["hours_left"]

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if hours_left < 1:
                message = (
                    f"‚è∞ **–°—Ä–æ—á–Ω–æ!**\n\n"
                    f"–ó–∞–¥–∞–Ω–∏–µ **{task_title}** –∏—Å—Ç–µ–∫–∞–µ—Ç –º–µ–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ —á–∞—Å!\n\n"
                    f"–£—Å–ø–µ–π—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∫–µ—Ç—ã! üöÄ"
                )
            else:
                message = (
                    f"‚è∞ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ**\n\n"
                    f"–ó–∞–¥–∞–Ω–∏–µ **{task_title}** –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {int(hours_left)} —á–∞—Å–æ–≤.\n\n"
                    f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ–∏–¥–±–µ–∫! üìù"
                )

            try:
                await bot.send_message(chat_id=user_id, text=message, parse_mode="Markdown")
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –∑–∞–¥–∞–Ω–∏–∏ {task_title}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")


async def mark_expired_tasks():
    """–ü–æ–º–µ—á–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∏–µ"""
    try:
        expired_count = mark_tasks_as_expired()
        if expired_count > 0:
            logger.info(f"–ü–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∏–µ: {expired_count} –∑–∞–¥–∞–Ω–∏–π")
        else:
            logger.info("–ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–¥–∞–Ω–∏—è—Ö")

    try:
        # –ü–æ–º–µ—á–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        await mark_expired_tasks()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –¥–µ–¥–ª–∞–π–Ω–∞—Ö
        await send_deadline_notifications()

        logger.info("–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
