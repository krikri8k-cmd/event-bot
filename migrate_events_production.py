#!/usr/bin/env python3
"""
–ü–†–û–î–ê–ö–®–ï–ù –º–∏–≥—Ä–∞—Ü–∏—è: –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ events_parser –∏ events_user –≤ events
–í–∫–ª—é—á–∞–µ—Ç: –¥–µ–¥—É–ø-–∫–ª—é—á–∏, CONCURRENTLY –∏–Ω–¥–µ–∫—Å—ã, –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é TZ/–≥–µ–æ, –±–∞—Ç—á-–º–∏–≥—Ä–∞—Ü–∏—é, –±–µ–∑–æ–ø–∞—Å–Ω—ã–π cleanup
"""

import argparse
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from sqlalchemy import create_engine, text

from config import load_settings


class ProductionMigration:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é"""

    def __init__(self, dry_run: bool = False, force: bool = False):
        self.dry_run = dry_run
        self.force = force
        self.engine = None
        self.stats = {}

    def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            settings = load_settings()
            self.engine = create_engine(settings.database_url)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            with self.engine.connect() as conn:
                conn.execute(text("SELECT 1"))

            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    def check_prerequisites(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π...")

        with self.engine.connect() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            result = conn.execute(
                text("""
                SELECT table_name
                FROM information_schema.tables
                WHERE table_schema = 'public'
                AND table_name IN ('events', 'events_parser', 'events_user')
            """)
            )

            existing_tables = {row[0] for row in result.fetchall()}

            if "events" not in existing_tables:
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ events –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                return False

            if "events_parser" not in existing_tables and "events_user" not in existing_tables:
                print("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü—ã events_parser –∏ events_user –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç - –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü
            for table in ["events", "events_parser", "events_user"]:
                if table in existing_tables:
                    result = conn.execute(text(f"SELECT COUNT(*) FROM {table}"))
                    count = result.fetchone()[0]
                    self.stats[f"{table}_count"] = count
                    print(f"üìä {table}: {count:,} –∑–∞–ø–∏—Å–µ–π")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            result = conn.execute(
                text("""
                SELECT count(*) as active_connections
                FROM pg_stat_activity
                WHERE state = 'active' AND datname = current_database()
            """)
            )
            active_connections = result.fetchone()[0]

            if active_connections > 10 and not self.force:
                print(f"‚ö†Ô∏è –ú–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π ({active_connections}). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
                return False

            print(f"üì° –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {active_connections}")

        return True

    def run_pre_migration_check(self) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É"""
        print("üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É...")

        try:
            with open("migrations/pre_migration_check.sql", encoding="utf-8") as f:
                sql_content = f.read()

            with self.engine.connect() as conn:
                # –í—ã–ø–æ–ª–Ω—è–µ–º SQL –ø–æ –±–ª–æ–∫–∞–º
                for block in sql_content.split(";"):
                    block = block.strip()
                    if block and not block.startswith("--"):
                        try:
                            result = conn.execute(text(block))
                            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
                            if result.returns_rows:
                                rows = result.fetchall()
                                for row in rows:
                                    if isinstance(row, tuple) and len(row) > 1:
                                        print(f"  {row[0]}: {row[1]}")
                                    else:
                                        print(f"  {row[0]}")
                        except Exception as e:
                            print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")

            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return False

    def run_migration(self) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é"""
        if self.dry_run:
            print("üß™ DRY RUN: –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            return True

        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–¥–∞–∫—à–µ–Ω –º–∏–≥—Ä–∞—Ü–∏—é...")

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é
            with open("migrations/merge_events_tables_production.sql", encoding="utf-8") as f:
                sql_content = f.read()

            with self.engine.connect() as conn:
                # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –±–ª–æ–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
                blocks = sql_content.split("COMMIT;")

                for i, block in enumerate(blocks):
                    block = block.strip()
                    if not block:
                        continue

                    print(f"üì¶ –í—ã–ø–æ–ª–Ω—è–µ–º –±–ª–æ–∫ {i+1}/{len(blocks)}...")

                    # –í—ã–ø–æ–ª–Ω—è–µ–º –±–ª–æ–∫
                    for statement in block.split(";"):
                        statement = statement.strip()
                        if statement and not statement.startswith("--"):
                            try:
                                conn.execute(text(statement))
                                conn.commit()
                            except Exception as e:
                                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ {i+1}: {e}")
                                print(f"Statement: {statement[:100]}...")
                                return False

                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
                    time.sleep(0.5)

            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            return False

    def verify_migration(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏"""
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏...")

        try:
            with self.engine.connect() as conn:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                result = conn.execute(
                    text("""
                    SELECT
                        source,
                        COUNT(*) as count,
                        MIN(created_at_utc) as earliest,
                        MAX(created_at_utc) as latest
                    FROM events
                    WHERE source IS NOT NULL
                    GROUP BY source
                    ORDER BY count DESC
                """)
                )

                print("üìä –°–æ–±—ã—Ç–∏—è –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
                total_migrated = 0
                for row in result.fetchall():
                    source, count, earliest, latest = row
                    print(f"  {source}: {count:,} —Å–æ–±—ã—Ç–∏–π ({earliest} - {latest})")
                    total_migrated += count

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                result = conn.execute(
                    text("""
                    SELECT COUNT(*) as duplicates FROM (
                        SELECT source, external_id, COUNT(*) as cnt
                        FROM events
                        WHERE source IS NOT NULL AND external_id IS NOT NULL
                        GROUP BY source, external_id
                        HAVING COUNT(*) > 1
                    ) dup_check
                """)
                )

                duplicates = result.fetchone()[0]
                if duplicates > 0:
                    print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates}")
                else:
                    print("‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é
                result = conn.execute(
                    text("""
                    SELECT
                        COUNT(*) as total,
                        COUNT(geo_hash) as with_geo_hash,
                        COUNT(starts_at_normalized) as with_normalized_time
                    FROM events
                """)
                )

                total, with_geo, with_time = result.fetchone()
                print(
                    f"üìä –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: {with_geo:,}/{total:,} —Å geo_hash, "
                    f"{with_time:,}/{total:,} —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º"
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
                result = conn.execute(
                    text("""
                    SELECT indexname
                    FROM pg_indexes
                    WHERE tablename = 'events'
                    AND indexname LIKE 'idx_events_%'
                    ORDER BY indexname
                """)
                )

                indexes = [row[0] for row in result.fetchall()]
                print(f"üìä –°–æ–∑–¥–∞–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: {len(indexes)}")

                return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return False

    def run_safe_cleanup(self) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π cleanup"""
        print("üóëÔ∏è –í—ã–ø–æ–ª–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π cleanup...")

        if self.dry_run:
            print("üß™ DRY RUN: Cleanup –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω")
            return True

        try:
            with open("migrations/safe_cleanup_old_tables.sql", encoding="utf-8") as f:
                sql_content = f.read()

            with self.engine.connect() as conn:
                # –í—ã–ø–æ–ª–Ω—è–µ–º cleanup
                for block in sql_content.split(";"):
                    block = block.strip()
                    if block and not block.startswith("--"):
                        try:
                            result = conn.execute(text(block))
                            conn.commit()

                            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                            if result.returns_rows:
                                rows = result.fetchall()
                                for row in rows:
                                    print(f"  {row[0]}")
                        except Exception as e:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ cleanup: {e}")
                            return False

            print("‚úÖ Cleanup –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ cleanup: {e}")
            return False

    def run_full_migration(self) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é"""
        print("üîÑ –ü–†–û–î–ê–ö–®–ï–ù –ú–ò–ì–†–ê–¶–ò–Ø: –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å–æ–±—ã—Ç–∏–π")
        print("=" * 60)

        # –≠—Ç–∞–ø 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not self.connect():
            return False

        # –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        if not self.check_prerequisites():
            return False

        # –≠—Ç–∞–ø 3: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if not self.run_pre_migration_check():
            return False

        # –≠—Ç–∞–ø 4: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if not self.dry_run:
            print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
            print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º.")

            if not self.force:
                response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (yes/no): ").strip().lower()
                if response not in ["yes", "y", "–¥–∞", "–¥"]:
                    print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    return False

        # –≠—Ç–∞–ø 5: –ú–∏–≥—Ä–∞—Ü–∏—è
        if not self.run_migration():
            return False

        # –≠—Ç–∞–ø 6: –ü—Ä–æ–≤–µ—Ä–∫–∞
        if not self.verify_migration():
            return False

        # –≠—Ç–∞–ø 7: Cleanup (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if not self.dry_run:
            cleanup_response = input("\n–í—ã–ø–æ–ª–Ω–∏—Ç—å cleanup —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü? (yes/no): ").strip().lower()
            if cleanup_response in ["yes", "y", "–¥–∞", "–¥"]:
                if not self.run_safe_cleanup():
                    print("‚ö†Ô∏è Cleanup –Ω–µ —É–¥–∞–ª—Å—è, –Ω–æ –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        print("\nüéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        return True


def main():
    parser = argparse.ArgumentParser(description="–ü—Ä–æ–¥–∞–∫—à–µ–Ω –º–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü —Å–æ–±—ã—Ç–∏–π")
    parser.add_argument("--dry-run", action="store_true", help="–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∏, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    parser.add_argument("--force", action="store_true", help="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π")
    parser.add_argument("--check-only", action="store_true", help="–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∏")

    args = parser.parse_args()

    migration = ProductionMigration(dry_run=args.dry_run, force=args.force)

    if args.check_only:
        # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if migration.connect() and migration.check_prerequisites():
            migration.run_pre_migration_check()
            migration.verify_migration()
        return 0

    # –ü–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è
    success = migration.run_full_migration()
    return 0 if success else 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
