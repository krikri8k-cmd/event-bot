#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import os

from sqlalchemy import text

from database import get_session, init_engine


def check_real_events():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db_url = os.getenv("DATABASE_URL", "sqlite:///event_bot.db")
    init_engine(db_url)

    session = get_session()
    try:
        # –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ username (–Ω–µ "None")
        result = session.execute(
            text("""
            SELECT id, title, organizer_id, organizer_username, status, created_at_utc
            FROM events 
            WHERE organizer_username IS NOT NULL 
            AND organizer_username != "None"
            AND organizer_username != ""
            ORDER BY created_at_utc DESC
            LIMIT 10
        """)
        )

        events_with_username = result.fetchall()

        print("üîç –°–æ–±—ã—Ç–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ username:")
        print("=" * 70)

        if events_with_username:
            for i, event in enumerate(events_with_username, 1):
                print(f"–°–æ–±—ã—Ç–∏–µ {i}:")
                print(f"  ID: {event[0]}")
                print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {event[1]}")
                print(f"  Organizer ID: {event[2]}")
                print(f'  Organizer Username: "{event[3]}"')
                print(f"  –°—Ç–∞—Ç—É—Å: {event[4]}")
                print(f"  –°–æ–∑–¥–∞–Ω–æ: {event[5]}")

                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—à—É –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                organizer_id = event[2]
                organizer_username = event[3]

                print("\n  üéØ –ö–∞–∫ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∞–≤—Ç–æ—Ä:")
                if organizer_id and organizer_username and organizer_username != "None":
                    display = f"üë§ @{organizer_username}"
                    print(f"    {display}")
                    print("    ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º username!")
                else:
                    display = "üë§ –ê–≤—Ç–æ—Ä"
                    print(f"    {display}")
                    print('    ‚ö†Ô∏è  –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ê–≤—Ç–æ—Ä"')

                print("-" * 50)
        else:
            print("‚ùå –°–æ–±—ã—Ç–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ username –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        print("\nüìã –í—Å–µ —Å–æ–±—ã—Ç–∏—è (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è):")
        result = session.execute(
            text("""
            SELECT id, title, organizer_id, organizer_username, status
            FROM events 
            WHERE organizer_id IS NOT NULL
            ORDER BY created_at_utc DESC 
            LIMIT 5
        """)
        )

        all_events = result.fetchall()
        for event in all_events:
            print(f"ID {event[0]}: {event[1]}")
            print(f'  Organizer ID: {event[2]}, Username: "{event[3]}"')
            print("-" * 30)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
    finally:
        session.close()


if __name__ == "__main__":
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π —Å username...")
    print()
    check_real_events()
