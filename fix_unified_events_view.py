#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ VIEW –¥–ª—è –µ–¥–∏–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
"""

from sqlalchemy import text

from config import load_settings
from database import get_engine, init_engine


def fix_unified_events_view():
    settings = load_settings()
    init_engine(settings.database_url)
    engine = get_engine()

    with engine.connect() as conn:
        # 1. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ VIEW
        conn.execute(text("DROP VIEW IF EXISTS events_all_msk"))
        print("‚úÖ –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π VIEW events_all_msk")

        # 2. –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π VIEW –¥–ª—è –í–°–ï–• —Å–æ–±—ã—Ç–∏–π –í–°–ï–• –≥–æ—Ä–æ–¥–æ–≤
        conn.execute(
            text("""
            CREATE VIEW events_all AS
            SELECT
                'parser' as source_type,
                id,
                title,
                description,
                starts_at,
                city,
                lat,
                lng,
                location_name,
                location_url,
                url as event_url,
                NULL as organizer_id,
                NULL as max_participants,
                NULL as current_participants,
                'open' as status,
                created_at_utc
            FROM events_parser

            UNION ALL

            SELECT
                'user' as source_type,
                id,
                title,
                description,
                starts_at,
                city,
                lat,
                lng,
                location_name,
                location_url,
                NULL as event_url,
                organizer_id,
                max_participants,
                current_participants,
                status,
                created_at_utc
            FROM events_user
        """)
        )

        conn.commit()
        print("‚úÖ –°–æ–∑–¥–∞–Ω –µ–¥–∏–Ω—ã–π VIEW events_all –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤")

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = conn.execute(text("SELECT COUNT(*) FROM events_all")).fetchone()
        print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –≤ events_all: {result[0]}")

        # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–æ–¥–∞–º
        result = conn.execute(
            text("""
            SELECT city, COUNT(*) as count
            FROM events_all
            GROUP BY city
            ORDER BY count DESC
        """)
        ).fetchall()

        print("üåç –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø–æ –≥–æ—Ä–æ–¥–∞–º:")
        for row in result:
            print(f"  - {row[0]}: {row[1]} —Å–æ–±—ã—Ç–∏–π")

        # 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–æ–±—ã—Ç–∏–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
        result = conn.execute(
            text("""
            SELECT city, title, source_type
            FROM events_all
            ORDER BY city, title
            LIMIT 5
        """)
        ).fetchall()

        print("üìù –ü—Ä–∏–º–µ—Ä—ã —Å–æ–±—ã—Ç–∏–π:")
        for row in result:
            print(f"  - {row[0]}: '{row[1]}' ({row[2]})")


if __name__ == "__main__":
    fix_unified_events_view()
