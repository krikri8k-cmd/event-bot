#!/usr/bin/env python3
"""
–ò—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–±—ã—Ç–∏–π –∏–∑ KudaGo –¥–ª—è –†–æ—Å—Å–∏–∏
"""

import asyncio
import logging
import math
import os
import time
from datetime import UTC, datetime, timedelta
from typing import Any
from zoneinfo import ZoneInfo

try:
    import httpx
except ImportError:
    httpx = None

from sources.base import BaseSource

logger = logging.getLogger(__name__)

# ---- ENV (–≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑–æ–ø–∞—Å–Ω—ã) -------------------
KUDAGO_ENABLED = os.getenv("KUDAGO_ENABLED", "false").lower() == "true"
KUDAGO_DRY_RUN = os.getenv("KUDAGO_DRY_RUN", "true").lower() == "true"
KUDAGO_PAGE_SIZE = int(os.getenv("KUDAGO_PAGE_SIZE", "100"))
KUDAGO_RPS = float(os.getenv("KUDAGO_RPS", "3"))
KUDAGO_TIMEOUT_S = float(os.getenv("KUDAGO_TIMEOUT_S", "8"))
TODAY_MAX_EVENTS = int(os.getenv("TODAY_MAX_EVENTS", "60"))
TODAY_SHOW_TOP = int(os.getenv("TODAY_SHOW_TOP", "12"))
CACHE_TTL_S = int(os.getenv("CACHE_TTL_S", "300"))

# ---- –ú–µ—Ç—Ä–∏–∫–∏ ------------------------------------------------------
METRICS = {
    "kudago_requests": 0,
    "kudago_pages": 0,
    "events_received": 0,
    "events_after_geo": 0,
    "events_saved": 0,
    "api_errors": 0,
    "cache_hits": 0,
}

# ---- –õ—ë–≥–∫–∏–π in-memory –∫—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è ----------
_CACHE: dict[str, tuple[float, list[dict[str, Any]]]] = {}


def _cache_get(key: str) -> list[dict[str, Any]] | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞"""
    rec = _CACHE.get(key)
    if not rec:
        return None
    ts, data = rec
    if time.time() - ts <= CACHE_TTL_S:
        METRICS["cache_hits"] += 1
        return data
    return None


def _cache_put(key: str, data: list[dict[str, Any]]) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à"""
    _CACHE[key] = (time.time(), data)


def today_window_utc(tz: ZoneInfo = ZoneInfo("Europe/Moscow")) -> tuple[datetime, datetime]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–∫–Ω–æ '—Å–µ–≥–æ–¥–Ω—è' –≤ UTC —Å —É—á—ë—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    now_tz = datetime.now(tz)
    start = datetime(now_tz.year, now_tz.month, now_tz.day, 0, 0, 0, tzinfo=tz).astimezone(UTC)
    end = (start + timedelta(days=1) - timedelta(seconds=1)).astimezone(UTC)
    return start, end


def _iso(dt: datetime) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç datetime –≤ ISO —Ñ–æ—Ä–º–∞—Ç –¥–ª—è KudaGo"""
    return dt.replace(tzinfo=UTC).isoformat().replace("+00:00", "Z")


class RateLimiter:
    """–û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""

    def __init__(self, rps: float):
        self.min_interval = 1.0 / max(rps, 0.1)
        self._last = 0.0

    async def wait(self):
        """–ñ–¥–µ—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        now = time.time()
        gap = self.min_interval - (now - self._last)
        if gap > 0:
            await asyncio.sleep(gap)
        self._last = time.time()


async def _fetch_json(
    client: httpx.AsyncClient, url: str, params: dict[str, Any], limiter: RateLimiter
) -> dict[str, Any]:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å —Å retry –∏ rate limiting"""
    backoff = 0.5
    start_time = time.time()

    for attempt in range(5):
        await limiter.wait()
        try:
            METRICS["kudago_requests"] += 1
            r = await client.get(url, params=params, timeout=KUDAGO_TIMEOUT_S)
            if r.status_code >= 500:
                raise httpx.HTTPStatusError("5xx", request=r.request, response=r)
            r.raise_for_status()

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ health-–º–µ—Ç—Ä–∏–∫–∏
            latency_ms = (time.time() - start_time) * 1000
            try:
                from web.health import record_kudago_request

                record_kudago_request(success=True, latency_ms=latency_ms)
            except ImportError:
                pass  # Health –º–æ–¥—É–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

            return r.json()
        except Exception as e:
            METRICS["api_errors"] += 1
            logger.warning(f"KudaGo request error ({attempt+1}/5): {e}")
            logger.warning(f"URL: {url}")
            logger.warning(f"Params: {params}")
            await asyncio.sleep(backoff)
            backoff *= 2

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ health-–º–µ—Ç—Ä–∏–∫–∏
    latency_ms = (time.time() - start_time) * 1000
    try:
        from web.health import record_kudago_request

        record_kudago_request(success=False, latency_ms=latency_ms)
    except ImportError:
        pass  # Health –º–æ–¥—É–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

    raise RuntimeError("KudaGo API failed after retries")


def _normalize_event(raw: dict[str, Any], city_slug: str) -> dict[str, Any]:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–∑ KudaGo –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    logger.info(f"–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è: '{raw.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}'")
    # –î–∞—Ç—ã: –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –±–ª–∏–∂–∞–π—à—É—é
    start_ts = None
    end_ts = None
    dates = raw.get("dates", [])

    if dates:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
        valid_dates = [d for d in dates if d.get("start")]
        if valid_dates:
            first = sorted(valid_dates, key=lambda d: d.get("start") or 0)[0]
            start_ts = int(first.get("start") or 0)
            end_ts = int(first.get("end") or 0) or None
        else:
            logger.info(f"–°–æ–±—ã—Ç–∏–µ '{raw.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}' –±–µ–∑ –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞—Ç")
    else:
        logger.info(f"–°–æ–±—ã—Ç–∏–µ '{raw.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}' –±–µ–∑ –ø–æ–ª—è dates")

    lat = lon = None
    place = raw.get("place") or {}
    coords = place.get("coords") or {}
    if "lat" in coords and "lon" in coords:
        lat = float(coords["lat"])
        lon = float(coords["lon"])

    return {
        "source": "kudago",
        "source_id": raw.get("id"),
        "country_code": "RU",
        "city": "moscow" if city_slug == "msk" else "spb" if city_slug == "spb" else city_slug,
        "title": (raw.get("title") or "").strip(),
        "description": (raw.get("description") or "").strip(),  # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        "start_ts": start_ts,
        "end_ts": end_ts,
        "lat": lat,
        "lon": lon,
        "venue_name": (place.get("title") or "").strip(),
        "address": (place.get("address") or "").strip(),
        "source_url": raw.get("site_url") or raw.get("url") or "",
        "raw": {"kudago_city": city_slug},
    }


class KudaGoSource(BaseSource):
    """–ò—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–±—ã—Ç–∏–π –∏–∑ KudaGo"""

    @property
    def name(self) -> str:
        return "kudago"

    @property
    def display_name(self) -> str:
        return "KudaGo"

    @property
    def country_code(self) -> str:
        return "RU"

    def is_enabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ KudaGo"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        from config import load_settings

        settings = load_settings()
        return settings.kudago_enabled

    async def fetch_events(self, lat: float, lng: float, radius_km: float) -> list[dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑ KudaGo –¥–ª—è –ú–æ—Å–∫–≤—ã –∏ –°–ü–±
        """
        if not self.is_enabled():
            logger.info("KudaGo –∏—Å—Ç–æ—á–Ω–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω")
            return []

        logger.info(f"üåç –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è –≤ KudaGo –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç ({lat}, {lng}) —Å —Ä–∞–¥–∏—É—Å–æ–º {radius_km} –∫–º")

        all_events = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –ë–∞–ª–∏ –ª–∏ –º—ã (KudaGo —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –†–æ—Å—Å–∏–∏)
        if -9.0 <= lat <= -8.0 and 114.0 <= lng <= 116.0:
            logger.info("üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ë–∞–ª–∏, KudaGo –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            return all_events

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –≥–æ—Ä–æ–¥ –±–ª–∏–∂–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç)
        moscow_lat, moscow_lng = 55.7558, 37.6173
        spb_lat, spb_lng = 59.9343, 30.3351

        moscow_distance = self._haversine_km(lat, lng, moscow_lat, moscow_lng)
        spb_distance = self._haversine_km(lat, lng, spb_lat, spb_lng)

        # –í—ã–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–π –≥–æ—Ä–æ–¥
        if moscow_distance < spb_distance:
            city_slug = "msk"
            city_name = "–ú–æ—Å–∫–≤–∞"
        else:
            city_slug = "spb"
            city_name = "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"

        logger.info(f"üìç –í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: {city_name} ({city_slug})")

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        try:
            events = await self._fetch_today_kudago(city_slug, (lat, lng), int(radius_km * 1000))
            all_events.extend(events)
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –≤ {city_name}")

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            try:
                from web.health import record_kudago_request

                record_kudago_request(
                    success=True,
                    latency_ms=0,  # –õ–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ _fetch_json
                    events_count=len(events),
                    events_after_geo=len(events),  # –°–æ–±—ã—Ç–∏—è —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã
                )
            except ImportError:
                pass  # Health –º–æ–¥—É–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π –∏–∑ {city_name}: {e}")

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –æ—à–∏–±–∫–∏
            try:
                from web.health import record_kudago_request

                record_kudago_request(success=False, latency_ms=0)
            except ImportError:
                pass  # Health –º–æ–¥—É–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

        return all_events

    async def _fetch_today_kudago(
        self, city_slug: str, user_point: tuple[float, float] | None = None, radius_m: int | None = None
    ) -> list[dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–∑ KudaGo"""

        start_utc, end_utc = today_window_utc()
        lat_str = f"{round(user_point[0],3)}" if user_point else "na"
        lon_str = f"{round(user_point[1],3)}" if user_point else "na"
        cache_key = f"today:{city_slug}:{lat_str}:{lon_str}:{radius_m or 0}"

        cached = _cache_get(cache_key)
        if cached is not None:
            return cached

        base_url = "https://kudago.com/public-api/v1.4/events/"
        params = {
            "location": city_slug,
            # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
            # "actual_since": _iso(start_utc),
            # "actual_until": _iso(end_utc),
            "expand": "place,dates,location",
            "fields": "id,title,place,dates,site_url,location",
            "page_size": KUDAGO_PAGE_SIZE,
        }
        if user_point and radius_m:
            params.update({"lat": user_point[0], "lon": user_point[1], "radius": radius_m})

        limiter = RateLimiter(KUDAGO_RPS)
        results: list[dict[str, Any]] = []

        if httpx is None:
            raise RuntimeError("Install httpx or port this code to requests")

        async with httpx.AsyncClient(headers={"User-Agent": "events-bot/1.0 (+ok)"}) as client:
            url = base_url
            while url and len(results) < TODAY_MAX_EVENTS:
                data = await _fetch_json(client, url, params, limiter)
                METRICS["kudago_pages"] += 1
                for item in data.get("results", []):
                    results.append(item)
                    if len(results) >= TODAY_MAX_EVENTS:
                        break
                url = data.get("next")
                params = {}  # next —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç querystring

        METRICS["events_received"] += len(results)

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        normalized: list[dict[str, Any]] = [_normalize_event(r, city_slug) for r in results]

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
        try:
            from utils.event_validator import validate_events_batch

            validated = validate_events_batch(normalized, city_slug)
            logger.info(f"–í–∞–ª–∏–¥–∞—Ü–∏—è {city_slug}: {len(validated)}/{len(normalized)} —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
        except Exception as e:
            logger.warning(f"validator unavailable, skip: {e}")
            validated = normalized

        # –ì–µ–æ-—Ñ–∏–ª—å—Ç—Ä (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á—ë–Ω)
        try:
            from utils.geo_bounds import is_allowed

            filtered: list[dict[str, Any]] = []
            for ev in validated:
                lat, lon = ev.get("lat"), ev.get("lon")
                if lat is None or lon is None:
                    filtered.append(ev)
                    continue
                if is_allowed(lat, lon, ev.get("country_code")):
                    filtered.append(ev)
            METRICS["events_after_geo"] += len(filtered)
        except Exception as e:
            logger.warning(f"geo filter unavailable, skip: {e}")
            filtered = validated

        # DRY_RUN: –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–≤–µ—Ä—Ö
        from config import load_settings

        settings = load_settings()
        if settings.kudago_dry_run:
            logger.info(f"DRY_RUN: fetched={len(results)} normalized={len(normalized)} after_geo={len(filtered)}")
            _cache_put(cache_key, filtered)
            return filtered

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î —á–µ—Ä–µ–∑ EventsService
        saved = 0
        try:
            from database import get_engine
            from storage.events_service import EventsService

            engine = get_engine()
            events_service = EventsService(engine)

            for ev in filtered:
                try:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–∏–æ–Ω–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–æ—É—Ç–∏–Ω–≥–∞
                    if city_slug == "msk":
                        ev["country_code"] = "RU"
                        ev["city"] = "moscow"
                    elif city_slug == "spb":
                        ev["country_code"] = "RU"
                        ev["city"] = "spb"

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
                    success = await events_service.upsert_parser_event(ev)
                    if success:
                        saved += 1
                except Exception as e:
                    logger.warning(f"save failed for event {ev.get('title', 'unknown')}: {e}")
        except ImportError as e:
            logger.warning(f"EventsService not available, skipping save: {e}")
        except Exception as e:
            logger.error(f"Error initializing EventsService: {e}")

        METRICS["events_saved"] += saved

        _cache_put(cache_key, filtered)
        return filtered

    def _haversine_km(self, lat1: float, lng1: float, lat2: float, lng2: float) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö"""
        lat1, lng1, lat2, lng2 = map(math.radians, [lat1, lng1, lat2, lng2])
        dlat = lat2 - lat1
        dlng = lng2 - lng1
        a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlng / 2) ** 2
        c = 2 * math.asin(math.sqrt(a))
        return 6371 * c  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º

    def get_metrics(self) -> dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        return METRICS.copy()
