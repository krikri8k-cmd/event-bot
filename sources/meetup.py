"""
Meetup API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
"""

import asyncio
import datetime as dt

import httpx

from api.oauth_meetup import MeetupOAuth
from config import load_settings
from event_apis import RawEvent
from utils.geo_utils import get_bbox


async def fetch(lat: float, lng: float, radius_km: float = 5.0) -> list[RawEvent]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑ Meetup API –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ
    """
    settings = load_settings()

    if not settings.meetup_api_key:
        print("‚ö†Ô∏è MEETUP_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
        return []

    # –í—ã—á–∏—Å–ª—è–µ–º bounding box –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
    min_lat, min_lng, max_lat, max_lng = get_bbox(lat, lng, radius_km)

    # Meetup API endpoint
    url = "https://api.meetup.com/find/upcoming_events"

    params = {
        "lat": lat,
        "lon": lng,
        "radius": radius_km,
        "fields": "group_key_photo",
        "page": 50,
    }

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º OAuth –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ fallback –Ω–∞ API key
    headers = {}
    oauth_mgr = MeetupOAuth()
    if oauth_mgr.headers():
        headers = oauth_mgr.headers()
        print("üîê –ò—Å–ø–æ–ª—å–∑—É–µ–º OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è Meetup")
    elif settings.meetup_api_key:
        params["key"] = settings.meetup_api_key
        print("üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º API key –¥–ª—è Meetup")
    else:
        print("‚ö†Ô∏è –ù–∏ OAuth —Ç–æ–∫–µ–Ω—ã, –Ω–∏ API key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return []

    # Retry –ª–æ–≥–∏–∫–∞ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    max_retries = 3
    base_delay = 1.0

    for attempt in range(max_retries):
        try:
            async with httpx.AsyncClient(timeout=30) as client:
                response = await client.get(url, params=params, headers=headers)
                response.raise_for_status()
                data = response.json()

                events = []
                for event_data in data.get("events", []):
                    try:
                        event = _normalize_event(event_data)
                        if event:
                            events.append(event)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
                        continue

                print(f"üìÖ Meetup: –Ω–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π")
                return events

        except httpx.HTTPStatusError as e:
            if e.response.status_code == 429:  # Rate limit
                if attempt < max_retries - 1:
                    delay = base_delay * (2**attempt)
                    print(f"‚ö†Ô∏è Rate limit, retry {attempt + 1}/{max_retries} —á–µ—Ä–µ–∑ {delay}s")
                    await asyncio.sleep(delay)
                    continue
            elif e.response.status_code >= 500:  # Server error
                if attempt < max_retries - 1:
                    delay = base_delay * (2**attempt)
                    print(f"‚ö†Ô∏è Server error {e.response.status_code}, retry {attempt + 1}/{max_retries} —á–µ—Ä–µ–∑ {delay}s")
                    await asyncio.sleep(delay)
                    continue
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ Meetup API: {e}")
            return []

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Meetup API: {e}")
            return []

    print(f"‚ùå Meetup API: –≤—Å–µ {max_retries} –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
    return []


def _normalize_event(event_data: dict) -> RawEvent | None:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–∑ Meetup API –≤ RawEvent
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        title = event_data.get("name", "").strip()
        if not title:
            return None

        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ venue
        venue = event_data.get("venue", {})
        event_lat = venue.get("lat")
        event_lng = venue.get("lon")

        # –ï—Å–ª–∏ –Ω–µ—Ç venue, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥—Ä—É–ø–ø—ã
        if event_lat is None or event_lng is None:
            group = event_data.get("group", {})
            event_lat = group.get("lat")
            event_lng = group.get("lon")

        if event_lat is None or event_lng is None:
            return None

        # –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
        starts_at = None
        if event_data.get("local_date") and event_data.get("local_time"):
            try:
                date_str = f"{event_data['local_date']} {event_data['local_time']}"
                # Meetup –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –Ω–æ –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ UTC
                starts_at = dt.datetime.strptime(date_str, "%Y-%m-%d %H:%M")
            except ValueError:
                pass

        # URL —Å–æ–±—ã—Ç–∏—è
        url = event_data.get("link")

        # –û–ø–∏—Å–∞–Ω–∏–µ
        description = event_data.get("description", "")
        if description:
            description = description[:500]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É

        return RawEvent(
            title=title,
            lat=float(event_lat),
            lng=float(event_lng),
            starts_at=starts_at,
            source="meetup",
            external_id=str(event_data.get("id")),
            url=url,
            description=description,
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏—è Meetup: {e}")
        return None
