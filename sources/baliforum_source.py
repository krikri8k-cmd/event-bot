#!/usr/bin/env python3
"""
–ò—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–±—ã—Ç–∏–π –∏–∑ BaliForum
"""

import logging
from typing import Any

from sources.baliforum import fetch as fetch_baliforum_events

logger = logging.getLogger(__name__)


class BaliForumSource:
    """–ò—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–±—ã—Ç–∏–π –∏–∑ BaliForum"""

    def __init__(self):
        self.name = "baliforum"
        self.display_name = "BaliForum"

    @property
    def country_code(self) -> str:
        return "ID"

    def is_enabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ BaliForum"""
        import os

        return os.getenv("ENABLE_BALIFORUM", "0").strip() == "1"

    def get_metrics(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        return {}

    async def fetch_events(self, lat: float, lng: float, radius_km: float) -> list[dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑ BaliForum

        Args:
            lat: –®–∏—Ä–æ—Ç–∞
            lng: –î–æ–ª–≥–æ—Ç–∞
            radius_km: –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –≤ –∫–º

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è enhanced_event_search
        """
        try:
            logger.info(f"üå¥ –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è –≤ {self.display_name}...")

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ BaliForum
            raw_events = fetch_baliforum_events(limit=100)

            if not raw_events:
                logger.info(f"   ‚ö†Ô∏è {self.display_name} –Ω–µ –≤–µ—Ä–Ω—É–ª —Å–æ–±—ã—Ç–∏—è")
                return []

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º RawEvent –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è enhanced_event_search
            events = []
            for event in raw_events:
                try:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏—è –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                    if not event.lat or not event.lng:
                        logger.debug(f"   ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {event.title}")
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –≤ —Ä–∞–¥–∏—É—Å–µ
                    distance = self._calculate_distance(lat, lng, event.lat, event.lng)
                    if distance > radius_km:
                        logger.debug(f"   ‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ –≤–Ω–µ —Ä–∞–¥–∏—É—Å–∞ ({distance:.1f} –∫–º): {event.title}")
                        continue

                    events.append(
                        {
                            "type": "source",
                            "title": event.title,
                            "description": event.description or "",
                            "time_local": event.starts_at.strftime("%Y-%m-%d %H:%M") if event.starts_at else "",
                            "start_time": event.starts_at,
                            "venue": {
                                "name": "",  # BaliForum –Ω–µ –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç venue
                                "address": "",
                                "lat": event.lat,
                                "lon": event.lng,
                            },
                            "source_url": event.url or "",
                            "lat": event.lat,
                            "lng": event.lng,
                            "source": self.name,
                            "distance_km": round(distance, 2),
                        }
                    )
                except Exception as e:
                    logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è '{event.title}': {e}")
                    continue

            if events:
                logger.info(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –≤ {self.display_name}")
            else:
                logger.info(f"   ‚ö†Ô∏è {self.display_name} –Ω–µ –≤–µ—Ä–Ω—É–ª —Å–æ–±—ã—Ç–∏–π –≤ —Ä–∞–¥–∏—É—Å–µ {radius_km}–∫–º")

            return events

        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ {self.display_name}: {e}")
            return []

    def _calculate_distance(self, lat1: float, lng1: float, lat2: float, lng2: float) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –≤ –∫–º (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        from math import asin, cos, radians, sin, sqrt

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä–∞–¥–∏–∞–Ω—ã
        lat1, lng1, lat2, lng2 = map(radians, [lat1, lng1, lat2, lng2])

        # –§–æ—Ä–º—É–ª–∞ Haversine
        dlat = lat2 - lat1
        dlng = lng2 - lng1
        a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlng / 2) ** 2
        c = 2 * asin(sqrt(a))

        # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
        r = 6371
        return c * r
