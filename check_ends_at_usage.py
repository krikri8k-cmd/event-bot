#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª—è ends_at
"""

import asyncio
import logging

from sqlalchemy import text

from config import load_settings
from database import get_engine, init_engine

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def check_ends_at_usage():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª–µ ends_at"""
    print("üïí –ü–†–û–í–ï–†–ö–ê –ü–û–õ–Ø ENDS_AT")
    print("=" * 50)

    settings = load_settings()
    init_engine(settings.database_url)
    engine = get_engine()

    with engine.connect() as conn:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º events_user
        print("1Ô∏è‚É£ EVENTS_USER - –ü–æ–ª–µ ends_at")
        print("-" * 30)

        try:
            result = conn.execute(
                text("""
                SELECT 
                    COUNT(*) as total,
                    COUNT(ends_at) as with_ends_at,
                    COUNT(*) - COUNT(ends_at) as without_ends_at
                FROM events_user
            """)
            ).fetchone()

            print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {result[0]}")
            print(f"üìä –° ends_at: {result[1]}")
            print(f"üìä –ë–µ–∑ ends_at: {result[2]}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
            examples = conn.execute(
                text("""
                SELECT id, title, starts_at, ends_at
                FROM events_user
                ORDER BY id
                LIMIT 5
            """)
            ).fetchall()

            print("\nüìù –ü—Ä–∏–º–µ—Ä—ã —Å–æ–±—ã—Ç–∏–π:")
            for event in examples:
                ends_at_str = str(event[3]) if event[3] else "NULL"
                print(f"   ID {event[0]}: '{event[1]}' - {event[2]} ‚Üí {ends_at_str}")

            print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            print()

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º events_parser
        print("2Ô∏è‚É£ EVENTS_PARSER - –ü–æ–ª–µ ends_at")
        print("-" * 30)

        try:
            result = conn.execute(
                text("""
                SELECT 
                    COUNT(*) as total,
                    COUNT(ends_at) as with_ends_at,
                    COUNT(*) - COUNT(ends_at) as without_ends_at
                FROM events_parser
            """)
            ).fetchone()

            print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {result[0]}")
            print(f"üìä –° ends_at: {result[1]}")
            print(f"üìä –ë–µ–∑ ends_at: {result[2]}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
            examples = conn.execute(
                text("""
                SELECT id, title, starts_at, ends_at
                FROM events_parser
                ORDER BY id
                LIMIT 5
            """)
            ).fetchall()

            print("\nüìù –ü—Ä–∏–º–µ—Ä—ã —Å–æ–±—ã—Ç–∏–π:")
            for event in examples:
                ends_at_str = str(event[3]) if event[3] else "NULL"
                print(f"   ID {event[0]}: '{event[1]}' - {event[2]} ‚Üí {ends_at_str}")

            print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            print()

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º events
        print("3Ô∏è‚É£ EVENTS - –ü–æ–ª–µ ends_at")
        print("-" * 30)

        try:
            result = conn.execute(
                text("""
                SELECT 
                    COUNT(*) as total,
                    COUNT(ends_at) as with_ends_at,
                    COUNT(*) - COUNT(ends_at) as without_ends_at
                FROM events
            """)
            ).fetchone()

            print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {result[0]}")
            print(f"üìä –° ends_at: {result[1]}")
            print(f"üìä –ë–µ–∑ ends_at: {result[2]}")

            print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            print()

        # 4. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
        print("4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´")
        print("-" * 30)

        print("üéØ –ü—Ä–æ–±–ª–µ–º—ã —Å ends_at:")
        print("   1. –ú–Ω–æ–≥–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ –∏–º–µ—é—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è")
        print("   2. –°–ª–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–≥–¥–∞ —Å–æ–±—ã—Ç–∏–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è")
        print("   3. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–æ–∂–Ω–æ–π")
        print()

        print("üí° –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ:")
        print("   1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ starts_at –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
        print("   2. –°–æ–±—ã—Ç–∏—è –æ—á–∏—â–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è")
        print("   3. ends_at –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ NULL –∏–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å")
        print()

        print("üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   1. –í –∑–∞–ø—Ä–æ—Å–∞—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ starts_at")
        print("   2. –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –ø–æ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞")
        print("   3. –û—á–∏—â–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –ø–æ—Å–ª–µ midnight —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è")
        print()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await check_ends_at_usage()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)
