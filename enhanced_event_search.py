#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
"""

import asyncio
import logging
import random
import re
from datetime import datetime
from math import cos, radians
from typing import Any
from urllib.parse import urlparse

from ai_utils import fetch_ai_events_nearby
from config import load_settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –•–µ–ª–ø–µ—Ä—ã –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
VENUE_RX = r"(?:–≤|at|in)\s+([A-Z–ê-–Ø–Å][\w\s'&.-]{2,})"  # –ø—Ä–∏–º–∏—Ç–∏–≤: ¬´–≤ –ö–∞—Ñ–µ –†–æ–º–∞—à–∫–∞¬ª
ADDR_RX = r"((?:Jl\.|Jalan|—É–ª\.|—É–ª–∏—Ü–∞|street|st\.|road|rd\.|avenue|ave\.)[^\n,;]{5,80})"


def extract_venue_from_text(title: str, desc: str) -> str | None:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    for txt in (title, desc):
        if not txt:
            continue
        m = re.search(VENUE_RX, txt, flags=re.I)
        if m:
            return m.group(1).strip()[:80]
    return None


def extract_address_from_text(desc: str) -> str | None:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–¥—Ä–µ—Å –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    if not desc:
        return None
    m = re.search(ADDR_RX, desc, flags=re.I)
    return m.group(1).strip()[:120] if m else None


def sanitize_url(u: str | None) -> str | None:
    """–°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ—Ç URL, –æ—Ç–±—Ä–∞—Å—ã–≤–∞—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ"""
    if not u:
        return None
    u = u.strip()
    p = urlparse(u)
    if p.scheme not in ("http", "https") or not p.netloc:
        return None
    host = p.netloc.lower()
    if host.endswith(("example.com", "example.org", "example.net")):
        return None
    if "calendar.google.com" in host and "eid=" not in u:
        return None
    return u


def normalize_source_event(e: dict) -> dict:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    title = e.get("title", "")
    desc = e.get("description", "")

    # 1) –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    if "type" not in e:
        e["type"] = "source"

    # 2) –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º venue –µ—Å–ª–∏ –µ—Å—Ç—å
    if "venue" in e and isinstance(e["venue"], dict):
        venue = e["venue"]
        # –ò–∑–≤–ª–µ–∫–∞–µ–º venue_name –∏ address –∏–∑ —Ç–µ–∫—Å—Ç–∞ –µ—Å–ª–∏ –Ω–µ—Ç
        if not venue.get("name"):
            venue["name"] = extract_venue_from_text(title, desc)
        if not venue.get("address"):
            venue["address"] = extract_address_from_text(desc)
    else:
        # –°–æ–∑–¥–∞–µ–º venue –∏–∑ —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª–µ–π
        e["venue"] = {
            "name": e.get("venue_name") or extract_venue_from_text(title, desc),
            "address": e.get("address") or extract_address_from_text(desc),
            "lat": e.get("lat"),
            "lon": e.get("lng"),
        }

    # 3) –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º URL
    e["source_url"] = sanitize_url(e.get("source_url") or e.get("url") or e.get("link"))

    # 4) –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –ø–æ–ª—è–º–∏
    if "venue_name" not in e and e.get("venue", {}).get("name"):
        e["venue_name"] = e["venue"]["name"]
    if "address" not in e and e.get("venue", {}).get("address"):
        e["address"] = e["venue"]["address"]

    # 5) –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    import json

    logger.debug("norm.source=%s", json.dumps(e, ensure_ascii=False))

    return e


class EventSearchEngine:
    def __init__(self):
        self.settings = load_settings()

    async def search_all_sources(
        self, lat: float, lng: float, radius_km: int = 5
    ) -> list[dict[str, Any]]:
        """
        –ò—â–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        """
        all_events = []

        logger.info(f"üîç –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞–¥–∏—É—Å–µ {radius_km} –∫–º –æ—Ç ({lat}, {lng})")

        # 1. AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
        logger.info("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI —Å–æ–±—ã—Ç–∏—è...")
        try:
            ai_events = await fetch_ai_events_nearby(lat, lng)
            if ai_events:
                logger.info(f"   ‚úÖ AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª {len(ai_events)} —Å–æ–±—ã—Ç–∏–π")
                for event in ai_events:
                    event["source"] = "ai_generated"
                    all_events.append(event)
            else:
                logger.info("   ‚ö†Ô∏è AI –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Å–æ–±—ã—Ç–∏—è")
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

        # 2. –ü–æ–∏—Å–∫ –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö (–ø–∞—Ä–∫–∏, –º—É–∑–µ–∏, —Ç–µ–∞—Ç—Ä—ã)
        logger.info("üèõÔ∏è –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö...")
        try:
            popular_events = await self._search_popular_places(lat, lng, radius_km)
            if popular_events:
                logger.info(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(popular_events)} —Å–æ–±—ã—Ç–∏–π –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö")
                # –°—ã—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                import json

                logger.debug(
                    "raw.popular[:3]=%s", json.dumps(popular_events[:3], ensure_ascii=False)
                )
                all_events.extend(popular_events)
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö: {e}")

        # 3. –ü–æ–∏—Å–∫ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è—Ö —Å–æ–±—ã—Ç–∏–π
        logger.info("üìÖ –ò—â–µ–º –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è—Ö —Å–æ–±—ã—Ç–∏–π...")
        try:
            calendar_events = await self._search_event_calendars(lat, lng, radius_km)
            if calendar_events:
                logger.info(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(calendar_events)} —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è—Ö")
                # –°—ã—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                import json

                logger.debug("raw.cals[:3]=%s", json.dumps(calendar_events[:3], ensure_ascii=False))
                all_events.extend(calendar_events)
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è—Ö: {e}")

        # 4. –ü–æ–∏—Å–∫ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö (—Å–∏–º—É–ª—è—Ü–∏—è)
        logger.info("üì± –ò—â–µ–º –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö...")
        try:
            social_events = await self._search_social_media(lat, lng, radius_km)
            if social_events:
                logger.info(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(social_events)} —Å–æ–±—ã—Ç–∏–π –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö")
                # –°—ã—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                import json

                logger.debug("raw.social[:3]=%s", json.dumps(social_events[:3], ensure_ascii=False))
                all_events.extend(social_events)
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö: {e}")

        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: —Å—á–∏—Ç–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ —Ç–∏–ø–∞–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        ai_count = sum(1 for e in all_events if e.get("source") == "ai_generated")
        user_count = sum(1 for e in all_events if e.get("source") in ["user_created", "user"])
        source_count = sum(
            1
            for e in all_events
            if e.get("source") in ["event_calendars", "social_media", "popular_places"]
        )

        logger.info(f"üéØ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(all_events)} —Å–æ–±—ã—Ç–∏–π")
        logger.info(
            f"üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ai={ai_count}, user={user_count}, source={source_count}"
        )

        return all_events

    async def _search_popular_places(
        self, lat: float, lng: float, radius_km: int
    ) -> list[dict[str, Any]]:
        """
        –ò—â–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        """
        events = []

        try:
            # –ò—â–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ Google Places API
            places = await self._search_nearby_places(lat, lng, radius_km)

            for place in places:
                # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
                place_events = await self._generate_events_for_place(place)
                events.extend(place_events)

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö: {e}")

        return events

    async def _search_nearby_places(self, lat: float, lng: float, radius_km: int) -> list[dict]:
        """
        –ò—â–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
        """
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å Google Places API, Foursquare, –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ç–∏–ø–∞–º –º–µ—Å—Ç

        place_types = [
            "restaurant",
            "cafe",
            "bar",
            "park",
            "museum",
            "theater",
            "cinema",
            "shopping_mall",
            "gym",
            "spa",
            "hotel",
        ]

        places = []
        for place_type in place_types:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API)
            nearby_place = await self._find_place_by_type(lat, lng, place_type, radius_km)
            if nearby_place:
                places.append(nearby_place)

        return places

    async def _find_place_by_type(
        self, lat: float, lng: float, place_type: str, radius_km: int
    ) -> dict:
        """
        –ò—â–µ—Ç –º–µ—Å—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
        """
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç

        import random

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ä–∞–¥–∏—É—Å–µ
        lat_offset = (random.random() - 0.5) * radius_km / 111  # –ø—Ä–∏–º–µ—Ä–Ω–æ 111 –∫–º –Ω–∞ –≥—Ä–∞–¥—É—Å
        lng_offset = (random.random() - 0.5) * radius_km / (111 * cos(radians(lat)))

        place_lat = lat + lat_offset
        place_lng = lng + lng_offset

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Å—Ç–æ –≤ —Ä–∞–¥–∏—É—Å–µ
        distance = self._haversine_km(lat, lng, place_lat, place_lng)
        if distance > radius_km:
            return None

        return {
            "name": f"{place_type.title()}",
            "lat": place_lat,
            "lng": place_lng,
            "type": place_type,
            "distance": distance,
        }

    async def _generate_events_for_place(self, place: dict) -> list[dict]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—Ç–∞
        """
        events = []

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
        if place["type"] == "restaurant":
            event = {
                "type": "source",
                "title": f"–£–∂–∏–Ω –≤ {place['name']}",
                "description": "–û—Ç–ª–∏—á–Ω–∞—è –∫—É—Ö–Ω—è –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ",
                "time_local": f"{datetime.now().strftime('%Y-%m-%d')} 19:00",
                "start_time": datetime.strptime(
                    f"{datetime.now().strftime('%Y-%m-%d')} 19:00", "%Y-%m-%d %H:%M"
                ),
                "venue": {
                    "name": place["name"],
                    "address": "–†–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–π —Ä–∞–π–æ–Ω",
                    "lat": place["lat"],
                    "lon": place["lng"],
                },
                "source_url": f"https://restaurants.com/{place['name'].lower().replace(' ', '-')}",
                "lat": place["lat"],
                "lng": place["lng"],
                "source": "popular_places",
            }
            event = normalize_source_event(event)
            events.append(event)
        elif place["type"] == "park":
            event = {
                "type": "source",
                "title": f"–ü—Ä–æ–≥—É–ª–∫–∞ –≤ {place['name']}",
                "description": "–ü—Ä–∏—è—Ç–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ –≤ –ø–∞—Ä–∫–µ",
                "time_local": f"{datetime.now().strftime('%Y-%m-%d')} 16:00",
                "start_time": datetime.strptime(
                    f"{datetime.now().strftime('%Y-%m-%d')} 16:00", "%Y-%m-%d %H:%M"
                ),
                "venue": {
                    "name": place["name"],
                    "address": "–ü–∞—Ä–∫–æ–≤–∞—è –∑–æ–Ω–∞",
                    "lat": place["lat"],
                    "lon": place["lng"],
                },
                "source_url": f"https://parks.com/{place['name'].lower().replace(' ', '-')}",
                "lat": place["lat"],
                "lng": place["lng"],
                "source": "popular_places",
            }
            event = normalize_source_event(event)
            events.append(event)
        elif place["type"] == "museum":
            event = {
                "type": "source",
                "title": f"–ü–æ—Å–µ—â–µ–Ω–∏–µ {place['name']}",
                "description": "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —ç–∫—Å–ø–æ–Ω–∞—Ç—ã –∏ –≤—ã—Å—Ç–∞–≤–∫–∏ –≤ –º—É–∑–µ–µ",
                "time_local": f"{datetime.now().strftime('%Y-%m-%d')} 14:00",
                "start_time": datetime.strptime(
                    f"{datetime.now().strftime('%Y-%m-%d')} 14:00", "%Y-%m-%d %H:%M"
                ),
                "venue": {
                    "name": place["name"],
                    "address": "–ö—É–ª—å—Ç—É—Ä–Ω—ã–π —Ä–∞–π–æ–Ω",
                    "lat": place["lat"],
                    "lon": place["lng"],
                },
                "source_url": f"https://museums.com/{place['name'].lower().replace(' ', '-')}",
                "lat": place["lat"],
                "lng": place["lng"],
                "source": "popular_places",
            }
            event = normalize_source_event(event)
            events.append(event)

        return events

    async def _search_event_calendars(
        self, lat: float, lng: float, radius_km: int
    ) -> list[dict[str, Any]]:
        """
        –ò—â–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è—Ö
        """
        events = []

        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ API –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π:
            # - Eventbrite
            # - Meetup
            # - Facebook Events
            # - Local event calendars

            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç—É
            today = datetime.now()

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
            calendar_events = await self._generate_calendar_events(lat, lng, today)

            for event in calendar_events:
                distance = self._haversine_km(lat, lng, event["lat"], event["lng"])
                if distance <= radius_km:
                    event["source"] = "event_calendars"
                    events.append(event)

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è—Ö")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è—Ö: {e}")

        return events

    async def _generate_calendar_events(
        self, lat: float, lng: float, today: datetime
    ) -> list[dict]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–∞
        """
        events = []

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Ä–∞–∑–Ω—ã–µ —á–∞—Å—ã –¥–Ω—è
        hours = [9, 12, 15, 18, 20]

        for hour in hours:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –º–µ—Å—Ç–µ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
            event_lat = lat + (random.random() - 0.5) * 0.01  # –≤ —Ä–∞–¥–∏—É—Å–µ ~1 –∫–º
            event_lng = lng + (random.random() - 0.5) * 0.01

            event_types = ["–í—Å—Ç—Ä–µ—á–∞", "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å", "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", "–°–µ–º–∏–Ω–∞—Ä", "–í–æ—Ä–∫—à–æ–ø"]

            event = {
                "type": "source",
                "title": f"{random.choice(event_types)} –≤ {hour}:00",
                "description": f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ {hour}:00 –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞",
                "time_local": f"{today.strftime('%Y-%m-%d')} {hour:02d}:00",
                "start_time": datetime.strptime(
                    f"{today.strftime('%Y-%m-%d')} {hour:02d}:00", "%Y-%m-%d %H:%M"
                ),
                "venue": {
                    "name": "–¶–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞",
                    "address": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å",
                    "lat": event_lat,
                    "lon": event_lng,
                },
                "source_url": f"https://example-calendar.com/event/{hour}",
                "lat": event_lat,
                "lng": event_lng,
            }

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            event = normalize_source_event(event)
            events.append(event)

        return events

    async def _search_social_media(
        self, lat: float, lng: float, radius_km: int
    ) -> list[dict[str, Any]]:
        """
        –ò—â–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö
        """
        events = []

        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ API —Å–æ—Ü—Å–µ—Ç–µ–π:
            # - Instagram Location API
            # - Facebook Events API
            # - Twitter Location API
            # - TikTok Location API

            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö
            social_events = await self._generate_social_events(lat, lng)

            for event in social_events:
                distance = self._haversine_km(lat, lng, event["lat"], event["lng"])
                if distance <= radius_km:
                    event["source"] = "social_media"
                    events.append(event)

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö: {e}")

        return events

    async def _generate_social_events(self, lat: float, lng: float) -> list[dict]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö
        """
        events = []

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        activities = [
            "–§–æ—Ç–æ—Å–µ—Å—Å–∏—è",
            "–í—Å—Ç—Ä–µ—á–∞ –¥—Ä—É–∑–µ–π",
            "–ö–æ—Ñ–µ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏",
            "–ü—Ä–æ–≥—É–ª–∫–∞",
            "–£–∂–∏–Ω",
            "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞",
        ]

        for i, activity in enumerate(activities):
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –º–µ—Å—Ç–µ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
            event_lat = lat + (random.random() - 0.5) * 0.008  # –≤ —Ä–∞–¥–∏—É—Å–µ ~800 –º
            event_lng = lng + (random.random() - 0.5) * 0.008

            # –†–∞–∑–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
            if "–£–∂–∏–Ω" in activity:
                time = "19:00"
            elif "–ö–æ—Ñ–µ" in activity:
                time = "15:00"
            elif "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" in activity:
                time = "18:00"
            else:
                time = f"{16 + i}:00"

            event = {
                "type": "source",
                "title": activity,
                "description": "–ü–æ–ø—É–ª—è—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö –≤ –ø–∞—Ä–∫–µ",
                "time_local": f"{datetime.now().strftime('%Y-%m-%d')} {time}",
                "start_time": datetime.strptime(
                    f"{datetime.now().strftime('%Y-%m-%d')} {time}", "%Y-%m-%d %H:%M"
                ),
                "venue": {
                    "name": f"–ü–∞—Ä–∫ –¥–ª—è {activity.lower()}",
                    "address": "–ì–æ—Ä–æ–¥—Å–∫–æ–π –ø–∞—Ä–∫",
                    "lat": event_lat,
                    "lon": event_lng,
                },
                "source_url": f"https://social-events.com/activity/{i}",
                "lat": event_lat,
                "lng": event_lng,
            }

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            event = normalize_source_event(event)
            events.append(event)

        return events

    def _haversine_km(self, lat1: float, lng1: float, lat2: float, lng2: float) -> float:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
        """
        from math import asin, cos, radians, sin, sqrt

        lat1, lng1, lat2, lng2 = map(radians, [lat1, lng1, lat2, lng2])
        dlat = lat2 - lat1
        dlng = lng2 - lng1
        a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlng / 2) ** 2
        c = 2 * asin(sqrt(a))
        return 6371 * c  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ
async def enhanced_search_events(
    lat: float, lng: float, radius_km: int = 5
) -> list[dict[str, Any]]:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    """
    engine = EventSearchEngine()
    return await engine.search_all_sources(lat, lng, radius_km)


if __name__ == "__main__":
    # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏
    async def test():
        events = await enhanced_search_events(55.7558, 37.6176)  # –ú–æ—Å–∫–≤–∞, —Ü–µ–Ω—Ç—Ä
        print(f"\nüéØ –ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π:")
        for i, event in enumerate(events, 1):
            print(f"  {i}. {event['title']} - {event['location_name']} ({event['source']})")

    asyncio.run(test())
