#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
"""

import asyncio
from datetime import datetime
from typing import Any

from ai_utils import fetch_ai_events_nearby
from config import load_settings


class EventSearchEngine:
    def __init__(self):
        self.settings = load_settings()

    async def search_all_sources(
        self, lat: float, lng: float, radius_km: int = 5
    ) -> list[dict[str, Any]]:
        """
        –ò—â–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        """
        all_events = []

        print(f"üîç –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞–¥–∏—É—Å–µ {radius_km} –∫–º –æ—Ç ({lat}, {lng})")

        # 1. AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
        print("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI —Å–æ–±—ã—Ç–∏—è...")
        ai_events = await fetch_ai_events_nearby(lat, lng)
        if ai_events:
            print(f"   ‚úÖ AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª {len(ai_events)} —Å–æ–±—ã—Ç–∏–π")
            for event in ai_events:
                event["source"] = "ai_generated"
                all_events.append(event)
        else:
            print("   ‚ö†Ô∏è AI –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Å–æ–±—ã—Ç–∏—è")

        # 2. –ü–æ–∏—Å–∫ –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö (–ø–∞—Ä–∫–∏, –º—É–∑–µ–∏, —Ç–µ–∞—Ç—Ä—ã)
        print("üèõÔ∏è –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö...")
        popular_events = await self._search_popular_places(lat, lng, radius_km)
        if popular_events:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(popular_events)} —Å–æ–±—ã—Ç–∏–π –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö")
            all_events.extend(popular_events)

        # 3. –ü–æ–∏—Å–∫ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è—Ö —Å–æ–±—ã—Ç–∏–π
        print("üìÖ –ò—â–µ–º –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è—Ö —Å–æ–±—ã—Ç–∏–π...")
        calendar_events = await self._search_event_calendars(lat, lng, radius_km)
        if calendar_events:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(calendar_events)} —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è—Ö")
            all_events.extend(calendar_events)

        # 4. –ü–æ–∏—Å–∫ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö (—Å–∏–º—É–ª—è—Ü–∏—è)
        print("üì± –ò—â–µ–º –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö...")
        social_events = await self._search_social_media(lat, lng, radius_km)
        if social_events:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(social_events)} —Å–æ–±—ã—Ç–∏–π –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö")
            all_events.extend(social_events)

        print(f"üéØ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(all_events)} —Å–æ–±—ã—Ç–∏–π")
        return all_events

    async def _search_popular_places(
        self, lat: float, lng: float, radius_km: int
    ) -> list[dict[str, Any]]:
        """
        –ò—â–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö (–ø–∞—Ä–∫–∏, –º—É–∑–µ–∏, —Ç–µ–∞—Ç—Ä—ã)
        """
        events = []

        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ –ú–æ—Å–∫–≤–µ (—Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
        popular_places = [
            {
                "name": "–ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ",
                "lat": 55.7298,
                "lng": 37.6008,
                "type": "park",
                "events": [
                    {
                        "title": "–í–µ—á–µ—Ä–Ω–∏–µ –∫–æ–Ω—Ü–µ—Ä—Ç—ã –≤ –ø–∞—Ä–∫–µ",
                        "time": "19:00",
                        "description": "–ñ–∏–≤–∞—è –º—É–∑—ã–∫–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–æ–∑–¥—É—Ö–µ",
                    },
                    {
                        "title": "–ô–æ–≥–∞ –≤ –ø–∞—Ä–∫–µ",
                        "time": "08:00",
                        "description": "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –π–æ–≥–∞ –¥–ª—è –≤—Å–µ—Ö –∂–µ–ª–∞—é—â–∏—Ö",
                    },
                    {
                        "title": "–§–µ—Å—Ç–∏–≤–∞–ª—å —É–ª–∏—á–Ω–æ–π –µ–¥—ã",
                        "time": "12:00",
                        "description": "–õ—É—á—à–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –≥–æ—Ä–æ–¥–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–≤–æ–∏ –±–ª—é–¥–∞",
                    },
                ],
            },
            {
                "name": "–¢—Ä–µ—Ç—å—è–∫–æ–≤—Å–∫–∞—è –≥–∞–ª–µ—Ä–µ—è",
                "lat": 55.7415,
                "lng": 37.6208,
                "type": "museum",
                "events": [
                    {
                        "title": "–í—ã—Å—Ç–∞–≤–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞",
                        "time": "10:00",
                        "description": "–ù–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤",
                    },
                    {
                        "title": "–≠–∫—Å–∫—É—Ä—Å–∏—è –ø–æ —Ä—É—Å—Å–∫–æ–º—É –∏—Å–∫—É—Å—Å—Ç–≤—É",
                        "time": "14:00",
                        "description": "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å —à–µ–¥–µ–≤—Ä–∞–º–∏ —Ä—É—Å—Å–∫–æ–π –∂–∏–≤–æ–ø–∏—Å–∏",
                    },
                ],
            },
            {
                "name": "–ë–æ–ª—å—à–æ–π —Ç–µ–∞—Ç—Ä",
                "lat": 55.7600,
                "lng": 37.6186,
                "type": "theater",
                "events": [
                    {
                        "title": "–ë–∞–ª–µ—Ç '–õ–µ–±–µ–¥–∏–Ω–æ–µ –æ–∑–µ—Ä–æ'",
                        "time": "19:00",
                        "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –±–∞–ª–µ—Ç",
                    },
                    {
                        "title": "–û–ø–µ—Ä–∞ '–ï–≤–≥–µ–Ω–∏–π –û–Ω–µ–≥–∏–Ω'",
                        "time": "19:00",
                        "description": "–û–ø–µ—Ä–∞ –ü.–ò. –ß–∞–π–∫–æ–≤—Å–∫–æ–≥–æ",
                    },
                ],
            },
            {
                "name": "–¶–µ–Ω—Ç—Ä —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞ –í–∏–Ω–∑–∞–≤–æ–¥",
                "lat": 55.7412,
                "lng": 37.6543,
                "type": "art_gallery",
                "events": [
                    {
                        "title": "–í—ã—Å—Ç–∞–≤–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞",
                        "time": "12:00",
                        "description": "–†–∞–±–æ—Ç—ã –º–æ–ª–æ–¥—ã—Ö —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤",
                    },
                    {
                        "title": "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ –∂–∏–≤–æ–ø–∏—Å–∏",
                        "time": "15:00",
                        "description": "–£—á–∏–º—Å—è —Ä–∏—Å–æ–≤–∞—Ç—å –∞–∫–≤–∞—Ä–µ–ª—å—é",
                    },
                ],
            },
            {
                "name": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–æ—Ä–∏—è",
                "lat": 55.7558,
                "lng": 37.6046,
                "type": "concert_hall",
                "events": [
                    {
                        "title": "–ö–æ–Ω—Ü–µ—Ä—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –º—É–∑—ã–∫–∏",
                        "time": "19:30",
                        "description": "–°–∏–º—Ñ–æ–Ω–∏—á–µ—Å–∫–∏–π –æ—Ä–∫–µ—Å—Ç—Ä",
                    },
                    {
                        "title": "–í–µ—á–µ—Ä –∫–∞–º–µ—Ä–Ω–æ–π –º—É–∑—ã–∫–∏",
                        "time": "19:00",
                        "description": "–°—Ç—Ä—É–Ω–Ω—ã–π –∫–≤–∞—Ä—Ç–µ—Ç",
                    },
                ],
            },
            {
                "name": "–¢–µ–∞—Ç—Ä –Ω–∞ –¢–∞–≥–∞–Ω–∫–µ",
                "lat": 55.7415,
                "lng": 37.6543,
                "type": "theater",
                "events": [
                    {
                        "title": "–°–ø–µ–∫—Ç–∞–∫–ª—å '–†–æ–º–µ–æ –∏ –î–∂—É–ª—å–µ—Ç—Ç–∞'",
                        "time": "19:00",
                        "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞",
                    },
                    {
                        "title": "–î—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–µ–∫—Ç–∞–∫–ª—å",
                        "time": "19:30",
                        "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –¥—Ä–∞–º–∞",
                    },
                ],
            },
        ]

        for place in popular_places:
            distance = self._haversine_km(lat, lng, place["lat"], place["lng"])
            if distance <= radius_km:
                for event in place["events"]:
                    events.append(
                        {
                            "title": event["title"],
                            "description": event["description"],
                            "time_local": f"{datetime.now().strftime('%Y-%m-%d')} {event['time']}",
                            "location_name": place["name"],
                            "lat": place["lat"],
                            "lng": place["lng"],
                            "source": "popular_places",
                        }
                    )

        return events

    async def _search_event_calendars(
        self, lat: float, lng: float, radius_km: int
    ) -> list[dict[str, Any]]:
        """
        –ò—â–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è—Ö —Å–æ–±—ã—Ç–∏–π (—Å–∏–º—É–ª—è—Ü–∏—è)
        """
        events = []

        # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è—Ö
        calendar_events = [
            {
                "title": "–§–µ—Å—Ç–∏–≤–∞–ª—å —É–ª–∏—á–Ω–æ–π –µ–¥—ã",
                "description": "–õ—É—á—à–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –≥–æ—Ä–æ–¥–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–≤–æ–∏ –±–ª—é–¥–∞",
                "time_local": f"{datetime.now().strftime('%Y-%m-%d')} 12:00",
                "location_name": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å",
                "lat": lat + 0.001,  # –†—è–¥–æ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                "lng": lng + 0.001,
            },
            {
                "title": "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ –∂–∏–≤–æ–ø–∏—Å–∏",
                "description": "–£—á–∏–º—Å—è —Ä–∏—Å–æ–≤–∞—Ç—å –∞–∫–≤–∞—Ä–µ–ª—å—é —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ö—É–¥–æ–∂–Ω–∏–∫–æ–º",
                "time_local": f"{datetime.now().strftime('%Y-%m-%d')} 15:00",
                "location_name": "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ç—É–¥–∏—è",
                "lat": lat - 0.002,
                "lng": lng + 0.002,
            },
        ]

        for event in calendar_events:
            distance = self._haversine_km(lat, lng, event["lat"], event["lng"])
            if distance <= radius_km:
                event["source"] = "event_calendars"
                events.append(event)

        return events

    async def _search_social_media(
        self, lat: float, lng: float, radius_km: int
    ) -> list[dict[str, Any]]:
        """
        –ò—â–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö (—Å–∏–º—É–ª—è—Ü–∏—è)
        """
        events = []

        # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö
        social_events = [
            {
                "title": "–í—Å—Ç—Ä–µ—á–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤",
                "description": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ –ª—é–±–∏—Ç–µ–ª–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
                "time_local": f"{datetime.now().strftime('%Y-%m-%d')} 18:00",
                "location_name": "–ö–æ—Ñ–µ–π–Ω—è '–£ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞'",
                "lat": lat + 0.003,
                "lng": lng - 0.001,
            },
            {
                "title": "–ô–æ–≥–∞ –≤ –ø–∞—Ä–∫–µ",
                "description": "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –π–æ–≥–∞ –¥–ª—è –≤—Å–µ—Ö –∂–µ–ª–∞—é—â–∏—Ö",
                "time_local": f"{datetime.now().strftime('%Y-%m-%d')} 08:00",
                "location_name": "–°–∫–≤–µ—Ä —É –º–µ—Ç—Ä–æ",
                "lat": lat - 0.001,
                "lng": lng - 0.002,
            },
        ]

        for event in social_events:
            distance = self._haversine_km(lat, lng, event["lat"], event["lng"])
            if distance <= radius_km:
                event["source"] = "social_media"
                events.append(event)

        return events

    def _haversine_km(self, lat1: float, lng1: float, lat2: float, lng2: float) -> float:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
        """
        from math import asin, cos, radians, sin, sqrt

        lat1, lng1, lat2, lng2 = map(radians, [lat1, lng1, lat2, lng2])
        dlat = lat2 - lat1
        dlng = lng2 - lng1
        a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlng / 2) ** 2
        c = 2 * asin(sqrt(a))
        return 6371 * c  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ
async def enhanced_search_events(
    lat: float, lng: float, radius_km: int = 5
) -> list[dict[str, Any]]:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    """
    engine = EventSearchEngine()
    return await engine.search_all_sources(lat, lng, radius_km)


if __name__ == "__main__":
    # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏
    async def test():
        events = await enhanced_search_events(55.7558, 37.6176)  # –ú–æ—Å–∫–≤–∞, —Ü–µ–Ω—Ç—Ä
        print(f"\nüéØ –ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π:")
        for i, event in enumerate(events, 1):
            print(f"  {i}. {event['title']} - {event['location_name']} ({event['source']})")

    asyncio.run(test())
