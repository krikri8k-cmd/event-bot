#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
"""

import asyncio
import logging

from sqlalchemy import text

from config import load_settings
from database import get_engine, init_engine
from utils.simple_timezone import get_city_from_coordinates
from utils.unified_events_service import UnifiedEventsService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def check_parser_flow():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ü–ê–†–°–ò–ù–ì–ê –°–û–ë–´–¢–ò–ô –° –ù–û–í–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–û–ô")
    print("=" * 60)

    settings = load_settings()
    init_engine(settings.database_url)
    engine = get_engine()

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
    events_service = UnifiedEventsService(engine)

    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_lat = -8.675326
    test_lng = 115.230191
    test_city = get_city_from_coordinates(test_lat, test_lng)

    print(f"üìç –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({test_lat}, {test_lng})")
    print(f"üåç –û–ø—Ä–µ–¥–µ–ª–µ–Ω –≥–æ—Ä–æ–¥: {test_city}")
    print()

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –ë–î
    print("1Ô∏è‚É£ –¢–ï–ö–£–©–ò–ï –°–û–ë–´–¢–ò–Ø –í –ë–î")
    print("-" * 30)

    with engine.connect() as conn:
        # –ü–∞—Ä—Å–µ—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        parser_result = conn.execute(
            text("""
            SELECT COUNT(*) FROM events_parser 
            WHERE city = :city
        """),
            {"city": test_city},
        ).fetchone()

        print(f"üìä –ü–∞—Ä—Å–µ—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤ {test_city}: {parser_result[0]}")

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
        user_result = conn.execute(
            text("""
            SELECT COUNT(*) FROM events_user 
            WHERE city = :city
        """),
            {"city": test_city},
        ).fetchone()

        print(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –≤ {test_city}: {user_result[0]}")

        # –í—Å–µ–≥–æ —á–µ—Ä–µ–∑ VIEW
        all_result = conn.execute(
            text("""
            SELECT COUNT(*) FROM events_all 
            WHERE city = :city
        """),
            {"city": test_city},
        ).fetchone()

        print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –≤ {test_city}: {all_result[0]}")
        print()

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–∞—Ä—Å–µ—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    print("2Ô∏è‚É£ –ò–°–¢–û–ß–ù–ò–ö–ò –ü–ê–†–°–ï–†–ù–´–• –°–û–ë–´–¢–ò–ô")
    print("-" * 30)

    with engine.connect() as conn:
        result = conn.execute(
            text("""
            SELECT source, COUNT(*) as count 
            FROM events_parser 
            WHERE city = :city
            GROUP BY source 
            ORDER BY count DESC
        """),
            {"city": test_city},
        ).fetchall()

        if result:
            for row in result:
                print(f"üìã {row[0]}: {row[1]} —Å–æ–±—ã—Ç–∏–π")
        else:
            print("‚ùå –ù–µ—Ç –ø–∞—Ä—Å–µ—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")
        print()

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–æ–≤
    print("3Ô∏è‚É£ –ù–ê–°–¢–†–û–ô–ö–ò –ü–ê–†–°–ï–†–û–í")
    print("-" * 30)

    import os

    baliforum_enabled = os.getenv("ENABLE_BALIFORUM", "0").strip() == "1"
    ai_generate = os.getenv("AI_GENERATE_SYNTHETIC", "0").strip() == "1"
    ai_parse = os.getenv("AI_PARSE_ENABLE", "0").strip() == "1"

    print(f"üå¥ BaliForum: {'‚úÖ –≤–∫–ª—é—á–µ–Ω' if baliforum_enabled else '‚ùå –æ—Ç–∫–ª—é—á–µ–Ω'}")
    print(f"ü§ñ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {'‚úÖ –≤–∫–ª—é—á–µ–Ω–∞' if ai_generate else '‚ùå –æ—Ç–∫–ª—é—á–µ–Ω–∞'}")
    print(f"üß† AI –ø–∞—Ä—Å–∏–Ω–≥: {'‚úÖ –≤–∫–ª—é—á–µ–Ω' if ai_parse else '‚ùå –æ—Ç–∫–ª—é—á–µ–Ω'}")
    print()

    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–∏—Å–∫
    print("4Ô∏è‚É£ –¢–ï–°–¢ –ü–û–ò–°–ö–ê –°–û–ë–´–¢–ò–ô")
    print("-" * 30)

    try:
        events = events_service.search_events_today(city=test_city, user_lat=test_lat, user_lng=test_lng, radius_km=15)

        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        sources = {}
        for event in events:
            source = event["source_type"]
            if source not in sources:
                sources[source] = 0
            sources[source] += 1

        print("üìã –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
        for source, count in sources.items():
            print(f"   - {source}: {count} —Å–æ–±—ã—Ç–∏–π")

        print()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        print()

    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
    print("5Ô∏è‚É£ –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶")
    print("-" * 30)

    with engine.connect() as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º events_parser
        result = conn.execute(
            text("""
            SELECT column_name FROM information_schema.columns 
            WHERE table_name = 'events_parser' 
            ORDER BY ordinal_position
        """)
        ).fetchall()

        print("üìã events_parser –∫–æ–ª–æ–Ω–∫–∏:")
        for row in result:
            print(f"   - {row[0]}")

        print()

    print("=" * 60)
    print("üéØ –í–´–í–û–î:")
    print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑:")
    print("   1. –ò—Å—Ç–æ—á–Ω–∏–∫–∏ (BaliForum, KudaGo, AI)")
    print("   2. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ events_parser")
    print("   3. –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ events_all VIEW")
    print("   4. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥–æ—Ä–æ–¥—É –∏ —Ä–∞–¥–∏—É—Å—É")


if __name__ == "__main__":
    asyncio.run(check_parser_flow())
