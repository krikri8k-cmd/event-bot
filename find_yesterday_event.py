#!/usr/bin/env python3
"""–ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏—è, —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –≤—á–µ—Ä–∞"""

import os
from datetime import datetime, timedelta

from dotenv import load_dotenv
from sqlalchemy import text

from database import get_engine, init_engine

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv("app.local.env")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º engine
database_url = os.getenv("DATABASE_URL")
if not database_url:
    print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ app.local.env")
    exit(1)

init_engine(database_url)
engine = get_engine()

print("üîç –ò—â–µ–º —Å–æ–±—ã—Ç–∏–µ, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –≤—á–µ—Ä–∞...")
print("=" * 60)

# –ü–æ–ª—É—á–∞–µ–º –≤—á–µ—Ä–∞—à–Ω—é—é –¥–∞—Ç—É
yesterday = datetime.now() - timedelta(days=1)
yesterday_start = yesterday.replace(hour=0, minute=0, second=0, microsecond=0)
yesterday_end = yesterday.replace(hour=23, minute=59, second=59, microsecond=999999)

print(
    f"üìÖ –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è —Å {yesterday_start.strftime('%Y-%m-%d %H:%M:%S')} "
    f"–ø–æ {yesterday_end.strftime('%Y-%m-%d %H:%M:%S')}"
)

# –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤—á–µ—Ä–∞
query = text("""
    SELECT
        id,
        title,
        description,
        starts_at,
        location_name,
        organizer_username,
        source,
        created_at_utc,
        status
    FROM events
    WHERE created_at_utc >= :start_date
      AND created_at_utc <= :end_date
    ORDER BY created_at_utc DESC
""")

with engine.begin() as con:
    result = con.execute(query, {"start_date": yesterday_start, "end_date": yesterday_end}).fetchall()

    if result:
        print(f"üéâ –ù–∞–π–¥–µ–Ω–æ {len(result)} —Å–æ–±—ã—Ç–∏–π, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤—á–µ—Ä–∞:")
        print("-" * 60)

        for row in result:
            print(f"üÜî ID: {row[0]}")
            print(f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {row[1]}")
            if row[2]:  # description
                print(f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {row[2][:100]}{'...' if len(row[2]) > 100 else ''}")
            print(f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {row[3]}")
            print(f"üìç –ú–µ—Å—Ç–æ: {row[4] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
            print(f"üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {row[5] or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
            print(f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫: {row[6] or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
            print(f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {row[7]}")
            print(f"üìä –°—Ç–∞—Ç—É—Å: {row[8]}")
            print("-" * 60)
    else:
        print("üòî –°–æ–±—ã—Ç–∏—è, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤—á–µ—Ä–∞, –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

        # –ü–æ–∫–∞–∂–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
        print("\nüîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–±—ã—Ç–∏–π –≤ –±–∞–∑–µ:")
        recent_query = text("""
            SELECT
                id,
                title,
                created_at_utc,
                organizer_username,
                source
            FROM events
            ORDER BY created_at_utc DESC
            LIMIT 10
        """)

        recent_result = con.execute(recent_query).fetchall()
        for row in recent_result:
            print(f"üÜî {row[0]} | üìù {row[1][:50]}... | üìÖ {row[2]} | üë§ {row[3] or 'N/A'} | üîó {row[4] or 'N/A'}")

print("\nüí° –°–æ–≤–µ—Ç: –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—å:")
print("   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞")
print("   - –í–æ–∑–º–æ–∂–Ω–æ, —Å–æ–±—ã—Ç–∏–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ –≤ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å")
print("   - –ü—Ä–æ–≤–µ—Ä—å —Å—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è (draft/published)")
