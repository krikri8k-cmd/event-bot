#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ AI –ø–∞—Ä—Å–µ—Ä–∞ —Å–æ–±—ã—Ç–∏–π
"""

import asyncio
import logging

from sqlalchemy import text

from config import load_settings
from database import get_engine, init_engine

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def check_ai_parser():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º AI –ø–∞—Ä—Å–µ—Ä —Å–æ–±—ã—Ç–∏–π"""
    print("ü§ñ –ü–†–û–í–ï–†–ö–ê AI –ü–ê–†–°–ï–†–ê –°–û–ë–´–¢–ò–ô")
    print("=" * 50)

    settings = load_settings()
    init_engine(settings.database_url)
    engine = get_engine()

    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_lat = -8.679649
    user_lon = 115.230388

    print(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ({user_lat}, {user_lon})")
    print()

    with engine.connect() as conn:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI –ø–∞—Ä—Å–µ—Ä–∞
        print("1Ô∏è‚É£ –ù–ê–°–¢–†–û–ô–ö–ò AI –ü–ê–†–°–ï–†–ê")
        print("-" * 30)

        print(f"üìä AI_PARSE_ENABLE: {settings.ai_parse_enable}")
        print(f"üìä STRICT_SOURCE_ONLY: {settings.strict_source_only}")
        print()

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ events_parser (–æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–∞—Ä—Å–µ—Ä–∞)
        print("2Ô∏è‚É£ –°–û–ë–´–¢–ò–Ø –í EVENTS_PARSER")
        print("-" * 30)

        try:
            # –í—Å–µ —Å–æ–±—ã—Ç–∏—è –≤ events_parser
            all_parser_events = conn.execute(
                text("""
                SELECT id, title, starts_at, lat, lng, created_at_utc
                FROM events_parser
                ORDER BY created_at_utc DESC
                LIMIT 10
            """)
            ).fetchall()

            print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –≤ events_parser: {len(all_parser_events)}")
            for event in all_parser_events:
                print(f"   ID {event[0]}: '{event[1]}' - {event[2]}")

            print()

            # –°–æ–±—ã—Ç–∏—è –≤ —Ä–∞–¥–∏—É—Å–µ
            nearby_parser_events = conn.execute(
                text("""
                SELECT id, title, starts_at, lat, lng,
                       earth_distance(ll_to_earth(:user_lat, :user_lon), ll_to_earth(lat, lng)) / 1000 as distance_km
                FROM events_parser
                WHERE earth_distance(ll_to_earth(:user_lat, :user_lon), ll_to_earth(lat, lng)) <= :radius_meters
                AND starts_at > NOW()
                ORDER BY distance_km
                LIMIT 10
            """),
                {
                    "user_lat": user_lat,
                    "user_lon": user_lon,
                    "radius_meters": 15000,  # 15 –∫–º
                },
            ).fetchall()

            print(f"üìä –°–æ–±—ã—Ç–∏–π –≤ —Ä–∞–¥–∏—É—Å–µ 15–∫–º: {len(nearby_parser_events)}")
            for event in nearby_parser_events:
                print(f"   ID {event[0]}: '{event[1]}' - {event[2]} - {event[5]:.1f}–∫–º")

            print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ events_parser: {e}")
            print()

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ events (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞)
        print("3Ô∏è‚É£ –°–û–ë–´–¢–ò–Ø –í EVENTS (–û–ë–™–ï–î–ò–ù–ï–ù–ù–ê–Ø)")
        print("-" * 30)

        try:
            # –í—Å–µ —Å–æ–±—ã—Ç–∏—è –≤ events
            all_events = conn.execute(
                text("""
                SELECT id, title, starts_at, lat, lng, created_at_utc
                FROM events
                ORDER BY created_at_utc DESC
                LIMIT 10
            """)
            ).fetchall()

            print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –≤ events: {len(all_events)}")
            for event in all_events:
                print(f"   ID {event[0]}: '{event[1]}' - {event[2]}")

            print()

            # –°–æ–±—ã—Ç–∏—è –≤ —Ä–∞–¥–∏—É—Å–µ
            nearby_events = conn.execute(
                text("""
                SELECT id, title, starts_at, lat, lng,
                       earth_distance(ll_to_earth(:user_lat, :user_lon), ll_to_earth(lat, lng)) / 1000 as distance_km
                FROM events
                WHERE earth_distance(ll_to_earth(:user_lat, :user_lon), ll_to_earth(lat, lng)) <= :radius_meters
                AND starts_at > NOW()
                ORDER BY distance_km
                LIMIT 10
            """),
                {
                    "user_lat": user_lat,
                    "user_lon": user_lon,
                    "radius_meters": 15000,  # 15 –∫–º
                },
            ).fetchall()

            print(f"üìä –°–æ–±—ã—Ç–∏–π –≤ —Ä–∞–¥–∏—É—Å–µ 15–∫–º: {len(nearby_events)}")
            for event in nearby_events:
                print(f"   ID {event[0]}: '{event[1]}' - {event[2]} - {event[5]:.1f}–∫–º")

            print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ events: {e}")
            print()

        # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –ø–∞—Ä—Å–µ—Ä –Ω–∞–ø—Ä—è–º—É—é
        print("4Ô∏è‚É£ –¢–ï–°–¢ AI –ü–ê–†–°–ï–†–ê")
        print("-" * 30)

        try:
            from enhanced_event_search import fetch_ai_events_nearby

            print("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º AI –ø–∞—Ä—Å–µ—Ä...")
            ai_events = await fetch_ai_events_nearby(user_lat, user_lon)

            print(f"üìä AI –ø–∞—Ä—Å–µ—Ä –Ω–∞—à–µ–ª {len(ai_events)} —Å–æ–±—ã—Ç–∏–π")

            for i, event in enumerate(ai_events, 1):
                print(f"   {i}. '{event.get('title', 'N/A')}'")
                print(f"      –û–ø–∏—Å–∞–Ω–∏–µ: {event.get('description', 'N/A')[:50]}...")
                print(f"      –í—Ä–µ–º—è: {event.get('time_local', 'N/A')}")
                print(f"      –õ–æ–∫–∞—Ü–∏—è: {event.get('location_name', 'N/A')}")
                print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({event.get('lat', 'N/A')}, {event.get('lng', 'N/A')})")
                print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ AI –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
            logger.exception("–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:")
            print()

        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        print("5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ò–°–¢–û–ß–ù–ò–ö–û–í")
        print("-" * 30)

        print(f"üìä ENABLE_BALIFORUM: {settings.enable_baliforum}")
        print(f"üìä ENABLE_KUDAGO: {settings.enable_kudago}")
        print(f"üìä ENABLE_MEETUP: {settings.enable_meetup}")
        print()

        # 6. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
        print("6Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´")
        print("-" * 30)

        print("üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   1. AI –ø–∞—Ä—Å–µ—Ä –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç —Å–æ–±—ã—Ç–∏—è –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ")
        print("   2. –°–æ–±—ã—Ç–∏—è –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î")
        print("   3. –°–æ–±—ã—Ç–∏—è –≤ –ë–î, –Ω–æ –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
        print("   4. –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —Å–æ–±—ã—Ç–∏–π")
        print("   5. –°–æ–±—ã—Ç–∏—è —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("   6. –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∑–æ–Ω–∞–º–∏")
        print()

    print("=" * 50)
    print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ AI –ø–∞—Ä—Å–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç —Å–æ–±—ã—Ç–∏—è")
    print("2. –ü—Ä–æ–≤–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î")
    print("3. –ü—Ä–æ–≤–µ—Ä—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–±—ã—Ç–∏–π")
    print("4. –ü—Ä–æ–≤–µ—Ä—å —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞")
    print("5. –ü—Ä–æ–≤–µ—Ä—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await check_ai_parser()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)
