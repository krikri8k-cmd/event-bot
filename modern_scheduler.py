#!/usr/bin/env python3
"""
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å UnifiedEventsService
"""

import logging
import time

from apscheduler.schedulers.background import BackgroundScheduler

from config import load_settings
from database import get_engine, init_engine
from sources.baliforum import fetch as fetch_baliforum
from utils.unified_events_service import UnifiedEventsService

logger = logging.getLogger(__name__)


class ModernEventScheduler:
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–æ–±—ã—Ç–∏–π"""

    def __init__(self):
        self.settings = load_settings()
        init_engine(self.settings.database_url)
        self.engine = get_engine()
        self.service = UnifiedEventsService(self.engine)
        self.scheduler = None

    def ingest_baliforum(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π —Å BaliForum —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É"""
        if not self.settings.enable_baliforum:
            logger.info("üå¥ BaliForum –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            return

        try:
            logger.info("üå¥ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ BaliForum...")
            start_time = time.time()

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            raw_events = fetch_baliforum(limit=50)

            saved_count = 0
            skipped_no_coords = 0
            error_count = 0

            for event in raw_events:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –ø–∞—Ä—Å–µ—Ä–µ)
                    if not event.lat or not event.lng:
                        skipped_no_coords += 1
                        continue

                    # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ UnifiedEventsService
                    # –°–Ω–∞—á–∞–ª–∞ –≤ events_parser, –ø–æ—Ç–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ events
                    event_id = self.service.save_parser_event(
                        source="baliforum",
                        external_id=event.external_id or event.url.split("/")[-1],
                        title=event.title,
                        description=event.description,
                        starts_at_utc=event.starts_at,
                        city="bali",
                        lat=event.lat,
                        lng=event.lng,
                        location_name=event.description or "",
                        location_url="",
                        url=event.url,
                    )

                    if event_id:
                        saved_count += 1

                except Exception as e:
                    error_count += 1
                    logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è '{event.title}': {e}")

            duration = (time.time() - start_time) * 1000
            logger.info(
                f"   ‚úÖ BaliForum: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ={saved_count}, "
                f"–ø—Ä–æ–ø—É—â–µ–Ω–æ –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç={skipped_no_coords}, "
                f"–æ—à–∏–±–æ–∫={error_count}, –≤—Ä–µ–º—è={duration:.0f}–º—Å"
            )

        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ BaliForum: {e}")

    async def ingest_kudago(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π —Å KudaGo —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É"""
        try:
            from config import load_settings

            settings = load_settings()

            if not settings.kudago_enabled:
                logger.info("üé≠ KudaGo –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                return

            logger.info("üé≠ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ KudaGo...")
            start_time = time.time()

            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–æ–≤ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            cities_coords = [
                (55.7558, 37.6173, "moscow"),  # –ú–æ—Å–∫–≤–∞
                (59.9343, 30.3351, "spb"),  # –°–ü–±
            ]

            total_saved = 0
            total_errors = 0

            from sources.kudago_source import KudaGoSource

            kudago_source = KudaGoSource()

            for lat, lng, city in cities_coords:
                try:
                    logger.info(f"   üåç –ü–∞—Ä—Å–∏–º {city}...")

                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ KudaGo –∏—Å—Ç–æ—á–Ω–∏–∫
                    events = await kudago_source.fetch_events(lat, lng, 50)  # 50–∫–º —Ä–∞–¥–∏—É—Å –¥–ª—è –≥–æ—Ä–æ–¥–∞

                    saved_count = 0
                    error_count = 0

                    for event in events:
                        try:
                            # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ UnifiedEventsService
                            event_id = self.service.save_parser_event(
                                source="kudago",
                                external_id=str(event.get("source_id", event.get("title", ""))),
                                title=event["title"],
                                description=event.get("description", ""),
                                starts_at_utc=event["starts_at"],
                                city=event["city"],
                                lat=event.get("lat", 0.0),
                                lng=event.get("lon", 0.0),
                                location_name=event.get("venue_name", ""),
                                location_url=event.get("address", ""),
                                url=event.get("source_url", ""),
                            )

                            if event_id:
                                saved_count += 1

                        except Exception as e:
                            error_count += 1
                            logger.error(
                                f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è KudaGo —Å–æ–±—ã—Ç–∏—è '{event.get('title', 'Unknown')}': {e}"
                            )

                    total_saved += saved_count
                    total_errors += error_count

                    logger.info(f"   ‚úÖ {city}: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ={saved_count}, –æ—à–∏–±–æ–∫={error_count}")

                except Exception as e:
                    total_errors += 1
                    logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {city}: {e}")

            duration = (time.time() - start_time) * 1000
            logger.info(
                f"   ‚úÖ KudaGo: –≤—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ={total_saved}, " f"–æ—à–∏–±–æ–∫={total_errors}, –≤—Ä–µ–º—è={duration:.0f}–º—Å"
            )

        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ KudaGo: {e}")

    async def ingest_ai_events(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI —Å–æ–±—ã—Ç–∏–π —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É"""
        if not self.settings.ai_parse_enable:
            logger.info("ü§ñ AI –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            return

        try:
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π...")
            start_time = time.time()

            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –ë–∞–ª–∏
            bali_coords = [
                (-8.6705, 115.2126),  # Denpasar
                (-8.5069, 115.2625),  # Ubud
                (-8.6482, 115.1342),  # Canggu
                (-8.7089, 115.1681),  # Seminyak
            ]

            import hashlib
            from datetime import datetime

            from ai_utils import fetch_ai_events_nearby

            total_ai_events = 0
            error_count = 0

            for lat, lng in bali_coords:
                try:
                    ai_events = await fetch_ai_events_nearby(lat, lng)

                    for event in ai_events:
                        try:
                            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
                            starts_at = datetime.strptime(event["time_local"], "%Y-%m-%d %H:%M")

                            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π external_id
                            raw_id = f"ai_{event['title']}_{event['time_local']}_{lat}_{lng}"
                            external_id = hashlib.sha1(raw_id.encode()).hexdigest()[:16]

                            # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ UnifiedEventsService
                            event_id = self.service.save_parser_event(
                                source="ai",
                                external_id=external_id,
                                title=event["title"],
                                description=event.get("description", ""),
                                starts_at_utc=starts_at,
                                city="bali",
                                lat=event["lat"],
                                lng=event["lng"],
                                location_name=event.get("location_name", ""),
                                location_url=event.get("location_url", ""),
                                url=event.get("community_link", ""),
                            )

                            if event_id:
                                total_ai_events += 1

                        except Exception as e:
                            error_count += 1
                            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è AI —Å–æ–±—ã—Ç–∏—è '{event.get('title', 'Unknown')}': {e}")

                except Exception as e:
                    error_count += 1
                    logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ AI –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è ({lat}, {lng}): {e}")

            duration = (time.time() - start_time) * 1000
            logger.info(f"   ‚úÖ AI: —Å–æ–∑–¥–∞–Ω–æ={total_ai_events}, –æ—à–∏–±–æ–∫={error_count}, –≤—Ä–µ–º—è={duration:.0f}–º—Å")

        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ AI –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")

    def cleanup_old_events(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        try:
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π...")

            cities = ["bali", "moscow", "spb"]
            total_deleted = 0

            for city in cities:
                deleted = self.service.cleanup_old_events(city)
                total_deleted += deleted

            logger.info(f"   ‚úÖ –û—á–∏—â–µ–Ω–æ {total_deleted} —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π")

        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

    def run_full_ingest(self):
        """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π"""
        logger.info("üöÄ === –ù–ê–ß–ê–õ–û –¶–ò–ö–õ–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–û–ë–´–¢–ò–ô ===")
        start_time = time.time()

        # 1. –ü–∞—Ä—Å–∏–º BaliForum (–¥–ª—è –ë–∞–ª–∏)
        if self.settings.enable_baliforum:
            self.ingest_baliforum()
        else:
            logger.info("üå¥ BaliForum –ø—Ä–æ–ø—É—â–µ–Ω (–æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)")

        # 2. –ü–∞—Ä—Å–∏–º KudaGo (–ú–æ—Å–∫–≤–∞ –∏ –°–ü–±) - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if self.settings.kudago_enabled:
            import asyncio

            asyncio.run(self.ingest_kudago())
        else:
            logger.info("üé≠ KudaGo –ø—Ä–æ–ø—É—â–µ–Ω (–æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)")

        # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI —Å–æ–±—ã—Ç–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        if self.settings.ai_generate_synthetic:
            import asyncio

            asyncio.run(self.ingest_ai_events())
        else:
            logger.info("ü§ñ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)")

        # 4. –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è
        self.cleanup_old_events()

        duration = time.time() - start_time
        logger.info(f"‚úÖ === –¶–ò–ö–õ –ó–ê–í–ï–†–®–ï–ù –ó–ê {duration:.1f}—Å ===")

    def cleanup_expired_tasks(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"""
        try:
            from tasks_service import mark_tasks_as_expired

            logger.info("üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π...")
            expired_count = mark_tasks_as_expired()

            if expired_count > 0:
                logger.info(f"‚úÖ –ü–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∏–µ: {expired_count} –∑–∞–¥–∞–Ω–∏–π")
            else:
                logger.info("‚ÑπÔ∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {e}")

    def check_removed_chats(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Ç–æ–≤, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±–æ—Ç –º–æ–≥ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω"""
        try:
            from datetime import datetime

            from aiogram import Bot
            from sqlalchemy import select

            from config import load_settings
            from database import ChatSettings

            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Ç–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞...")

            settings = load_settings()
            if not settings.telegram_token:
                logger.warning("‚ö†Ô∏è TELEGRAM_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
                return

            # –°–æ–∑–¥–∞–µ–º async –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            bot = Bot(token=settings.telegram_token)

            # –ü–æ–ª—É—á–∞–µ–º engine –∏ —Å–æ–∑–¥–∞–µ–º session
            from database import async_engine, async_session_maker

            if not async_engine or not async_session_maker:
                logger.warning("‚ö†Ô∏è Async engine –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
                return

            async def check_chats_async():
                checked_count = 0
                removed_count = 0
                updated_admins_count = 0

                async with async_session_maker() as session:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
                    result = await session.execute(select(ChatSettings).where(ChatSettings.bot_status == "active"))
                    chats = result.scalars().all()

                    logger.info(f"   –ù–∞–π–¥–µ–Ω–æ {len(chats)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")

                    for chat in chats:
                        checked_count += 1
                        try:
                            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                            # –ï—Å–ª–∏ –±–æ—Ç —É–¥–∞–ª–µ–Ω, —ç—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É
                            await bot.get_chat(chat.chat_id)

                            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
                            try:
                                import json

                                from utils.community_events_service import CommunityEventsService

                                community_service = CommunityEventsService()
                                admin_ids = await community_service.get_cached_admin_ids(bot, chat.chat_id)
                                admin_count = len(admin_ids)

                                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                                current_admin_ids = json.loads(chat.admin_ids) if chat.admin_ids else []
                                if set(admin_ids) != set(current_admin_ids):
                                    chat.admin_ids = json.dumps(admin_ids) if admin_ids else None
                                    chat.admin_count = admin_count
                                    updated_admins_count += 1
                                    logger.info(f"   üìù –û–±–Ω–æ–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω—ã –¥–ª—è —á–∞—Ç–∞ {chat.chat_id}: count={admin_count}")

                            except Exception as admin_error:
                                logger.warning(
                                    f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —á–∞—Ç–∞ {chat.chat_id}: {admin_error}"
                                )

                        except Exception as e:
                            error_msg = str(e).lower()
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –±–æ—Ç —É–¥–∞–ª–µ–Ω
                            if (
                                "bot was kicked" in error_msg
                                or "bot was removed" in error_msg
                                or "chat not found" in error_msg
                                or "forbidden" in error_msg
                            ):
                                logger.warning(f"   üö´ –ë–æ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞ {chat.chat_id}")
                                chat.bot_status = "removed"
                                chat.bot_removed_at = datetime.utcnow()
                                removed_count += 1

                    await session.commit()
                    logger.info(
                        f"   ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {checked_count} —á–∞—Ç–æ–≤, —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–æ: {removed_count}, "
                        f"–∞–¥–º–∏–Ω–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_admins_count}"
                    )

                await bot.session.close()

            # –ó–∞–ø—É—Å–∫–∞–µ–º async —Ñ—É–Ω–∫—Ü–∏—é
            import asyncio

            asyncio.run(check_chats_async())

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤: {e}")

    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.scheduler and self.scheduler.running:
            logger.warning("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self.scheduler = BackgroundScheduler(timezone="UTC")

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤ (2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å)
        self.scheduler.add_job(
            self.run_full_ingest, "interval", hours=12, id="modern-ingest-cycle", max_instances=1, coalesce=True
        )

        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        self.scheduler.add_job(
            self.cleanup_old_events, "interval", hours=6, id="cleanup-cycle", max_instances=1, coalesce=True
        )

        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
        self.scheduler.add_job(
            self.cleanup_expired_tasks, "interval", hours=2, id="tasks-cleanup", max_instances=1, coalesce=True
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
        self.scheduler.add_job(
            self.check_removed_chats, "interval", hours=24, id="chat-status-check", max_instances=1, coalesce=True
        )

        self.scheduler.start()
        logger.info("üöÄ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω!")
        logger.info("   üìÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤ (2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å)")
        logger.info("   üå¥ BaliForum (–ë–∞–ª–∏) + üé≠ KudaGo (–ú–æ—Å–∫–≤–∞, –°–ü–±)")
        logger.info("   üßπ –û—á–∏—Å—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π: –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤")
        logger.info("   ‚è∞ –û—á–∏—Å—Ç–∫–∞ –∑–∞–¥–∞–Ω–∏–π: –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞")
        logger.info("   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤: –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ü–∏–∫–ª —Å—Ä–∞–∑—É
        self.run_full_ingest()

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.scheduler and self.scheduler.running:
            self.scheduler.shutdown()
            logger.info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_modern_scheduler = None


def get_modern_scheduler() -> ModernEventScheduler:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    global _modern_scheduler
    if _modern_scheduler is None:
        _modern_scheduler = ModernEventScheduler()
    return _modern_scheduler


def start_modern_scheduler():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
    scheduler = get_modern_scheduler()
    scheduler.start()


if __name__ == "__main__":
    # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    scheduler = ModernEventScheduler()
    scheduler.run_full_ingest()
