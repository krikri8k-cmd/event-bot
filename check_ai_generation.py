#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π
"""

import asyncio
import logging

from sqlalchemy import text

from config import load_settings
from database import get_engine, init_engine

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def check_ai_generation():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–æ–±—ã—Ç–∏–π"""
    print("ü§ñ –ü–†–û–í–ï–†–ö–ê AI –ì–ï–ù–ï–†–ê–¶–ò–ò –°–û–ë–´–¢–ò–ô")
    print("=" * 50)

    settings = load_settings()
    init_engine(settings.database_url)
    engine = get_engine()

    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_lat = -8.679649
    user_lon = 115.230388

    print(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ({user_lat}, {user_lon})")
    print()

    with engine.connect() as conn:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI
        print("1Ô∏è‚É£ –ù–ê–°–¢–†–û–ô–ö–ò AI")
        print("-" * 30)

        print(f"üìä AI_PARSE_ENABLE: {settings.ai_parse_enable}")
        print(f"üìä AI_GENERATE_SYNTHETIC: {settings.ai_generate_synthetic}")
        print(f"üìä STRICT_SOURCE_ONLY: {settings.strict_source_only}")
        print()

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ AI —Å–æ–±—ã—Ç–∏—è –≤ –ë–î
        print("2Ô∏è‚É£ AI –°–û–ë–´–¢–ò–Ø –í –ë–î")
        print("-" * 30)

        try:
            ai_events = conn.execute(
                text("""
                SELECT id, title, starts_at, lat, lng, source, created_at_utc
                FROM events_user
                WHERE source = 'ai_generated' OR title ILIKE '%ai%' OR title ILIKE '%—Å–≥–µ–Ω–µ—Ä–∏—Ä%'
                ORDER BY created_at_utc DESC
                LIMIT 10
            """)
            ).fetchall()

            print(f"üìä AI —Å–æ–±—ã—Ç–∏–π –≤ events_user: {len(ai_events)}")
            for event in ai_events:
                print(f"   ID {event[0]}: '{event[1]}' - {event[2]} - {event[5]}")

            print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ AI —Å–æ–±—ã—Ç–∏–π: {e}")
            print()

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º events_parser
        try:
            parser_ai_events = conn.execute(
                text("""
                SELECT id, title, starts_at, lat, lng, source, created_at_utc
                FROM events_parser
                WHERE source = 'ai_generated' OR title ILIKE '%ai%' OR title ILIKE '%—Å–≥–µ–Ω–µ—Ä–∏—Ä%'
                ORDER BY created_at_utc DESC
                LIMIT 10
            """)
            ).fetchall()

            print(f"üìä AI —Å–æ–±—ã—Ç–∏–π –≤ events_parser: {len(parser_ai_events)}")
            for event in parser_ai_events:
                print(f"   ID {event[0]}: '{event[1]}' - {event[2]} - {event[5]}")

            print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ AI —Å–æ–±—ã—Ç–∏–π –≤ parser: {e}")
            print()

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º events
        try:
            events_ai = conn.execute(
                text("""
                SELECT id, title, starts_at, lat, lng, source, created_at_utc
                FROM events
                WHERE source = 'ai_generated' OR title ILIKE '%ai%' OR title ILIKE '%—Å–≥–µ–Ω–µ—Ä–∏—Ä%'
                ORDER BY created_at_utc DESC
                LIMIT 10
            """)
            ).fetchall()

            print(f"üìä AI —Å–æ–±—ã—Ç–∏–π –≤ events: {len(events_ai)}")
            for event in events_ai:
                print(f"   ID {event[0]}: '{event[1]}' - {event[2]} - {event[5]}")

            print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ AI —Å–æ–±—ã—Ç–∏–π –≤ events: {e}")
            print()

        # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
        print("3Ô∏è‚É£ –¢–ï–°–¢ AI –ì–ï–ù–ï–†–ê–¶–ò–ò")
        print("-" * 30)

        try:
            from enhanced_event_search import fetch_ai_events_nearby

            print("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
            ai_events = await fetch_ai_events_nearby(user_lat, user_lon)

            print(f"üìä AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª {len(ai_events)} —Å–æ–±—ã—Ç–∏–π")

            for i, event in enumerate(ai_events, 1):
                print(f"   {i}. '{event.get('title', 'N/A')}'")
                print(f"      –û–ø–∏—Å–∞–Ω–∏–µ: {event.get('description', 'N/A')[:50]}...")
                print(f"      –í—Ä–µ–º—è: {event.get('time_local', 'N/A')}")
                print(f"      –õ–æ–∫–∞—Ü–∏—è: {event.get('location_name', 'N/A')}")
                print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({event.get('lat', 'N/A')}, {event.get('lng', 'N/A')})")
                print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            logger.exception("–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:")
            print()

        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á–µ–º—É AI –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –ø–æ–∏—Å–∫–µ
        print("4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–û–ß–ï–ú–£ AI –ù–ï –ü–û–ö–ê–ó–´–í–ê–ï–¢–°–Ø")
        print("-" * 40)

        print("üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   1. AI_GENERATE_SYNTHETIC = 0 (–æ—Ç–∫–ª—é—á–µ–Ω–æ)")
        print("   2. AI —Å–æ–±—ã—Ç–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î")
        print("   3. AI —Å–æ–±—ã—Ç–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è, –Ω–æ –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        print("   4. –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ AI —Å–æ–±—ã—Ç–∏–π")
        print("   5. AI —Å–æ–±—ã—Ç–∏—è —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print()

        # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ app.local.env
        print("5Ô∏è‚É£ –ù–ê–°–¢–†–û–ô–ö–ò –í APP.LOCAL.ENV")
        print("-" * 30)

        try:
            with open("app.local.env", encoding="utf-8") as f:
                content = f.read()

            ai_settings = []
            for line in content.split("\n"):
                if "AI_" in line or "ai_" in line:
                    ai_settings.append(line.strip())

            print("üìä AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env:")
            for setting in ai_settings:
                print(f"   {setting}")

            print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ .env: {e}")
            print()

    print("=" * 50)
    print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å AI_GENERATE_SYNTHETIC=1 –≤ .env")
    print("2. –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ AI —Å–æ–±—ã—Ç–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è")
    print("3. –ü—Ä–æ–≤–µ—Ä—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã AI —Å–æ–±—ã—Ç–∏–π")
    print("4. –ü—Ä–æ–≤–µ—Ä—å —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ AI —Å–æ–±—ã—Ç–∏–π")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await check_ai_generation()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)
