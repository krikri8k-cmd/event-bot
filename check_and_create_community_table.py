#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã events_community
"""

import sys

from sqlalchemy import create_engine, inspect, text

from config import load_settings


def check_table_exists(engine, table_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
    inspector = inspect(engine)
    return table_name in inspector.get_table_names()


def create_community_table(engine):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É events_community"""
    with engine.connect() as conn:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        create_table_sql = """
        CREATE TABLE IF NOT EXISTS events_community (
            id SERIAL PRIMARY KEY,
            group_id BIGINT NOT NULL,
            creator_id BIGINT NOT NULL,
            title TEXT NOT NULL,
            date TIMESTAMP NOT NULL,
            description TEXT,
            city TEXT,
            location_name TEXT,
            created_at TIMESTAMP DEFAULT now()
        );
        """

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        create_indexes_sql = [
            "CREATE INDEX IF NOT EXISTS idx_events_community_group_id ON events_community(group_id);",
            "CREATE INDEX IF NOT EXISTS idx_events_community_date ON events_community(date);",
            "CREATE INDEX IF NOT EXISTS idx_events_community_creator_id ON events_community(creator_id);",
        ]

        try:
            conn.execute(text(create_table_sql))
            conn.commit()
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ events_community —Å–æ–∑–¥–∞–Ω–∞")

            for index_sql in create_indexes_sql:
                conn.execute(text(index_sql))
                conn.commit()
            print("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")

            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã events_community...")

    try:
        settings = load_settings()
        engine = create_engine(settings.database_url)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        if check_table_exists(engine, "events_community"):
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ events_community —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            with engine.connect() as conn:
                result = conn.execute(text("SELECT COUNT(*) FROM events_community"))
                count = result.fetchone()[0]
                print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: {count}")
        else:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ events_community –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            print("üîß –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É...")

            if create_community_table(engine):
                print("üéâ –¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            else:
                print("üí• –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É")
                return False

    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
        return False

    return True


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
