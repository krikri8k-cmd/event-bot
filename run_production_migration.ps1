# PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω –º–∏–≥—Ä–∞—Ü–∏–∏
# –í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

param(
    [switch]$Force,
    [switch]$DryRun,
    [switch]$CheckOnly
)

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
$ErrorActionPreference = "Stop"

Write-Host "üöÄ –ü–†–û–î–ê–ö–®–ï–ù –ú–ò–ì–†–ê–¶–ò–Ø: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å–æ–±—ã—Ç–∏–π" -ForegroundColor Blue
Write-Host "==================================================" -ForegroundColor Blue

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    
    switch ($Level) {
        "ERROR" { Write-Host "[$timestamp] [ERROR] $Message" -ForegroundColor Red }
        "SUCCESS" { Write-Host "[$timestamp] [SUCCESS] $Message" -ForegroundColor Green }
        "WARNING" { Write-Host "[$timestamp] [WARNING] $Message" -ForegroundColor Yellow }
        default { Write-Host "[$timestamp] [INFO] $Message" -ForegroundColor Cyan }
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function Test-Environment {
    Write-Log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    if (-not $env:DATABASE_URL) {
        Write-Log "DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!" "ERROR"
        Write-Host "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: `$env:DATABASE_URL='postgresql://user:pass@host:port/db'"
        exit 1
    }
    
    Write-Log "DATABASE_URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞" "SUCCESS"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
function New-Backup {
    Write-Log "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."
    
    $backupFile = "backup_before_migration_$(Get-Date -Format 'yyyyMMdd_HHmmss').sql"
    
    try {
        & pg_dump $env:DATABASE_URL | Out-File -FilePath $backupFile -Encoding UTF8
        $fileSize = (Get-Item $backupFile).Length
        $fileSizeMB = [math]::Round($fileSize / 1MB, 2)
        
        Write-Log "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $backupFile (${fileSizeMB} MB)" "SUCCESS"
        return $backupFile
    }
    catch {
        Write-Log "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: $_" "ERROR"
        exit 1
    }
}

# –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
function Test-PreChecks {
    Write-Log "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫..."
    
    try {
        & python migrate_events_production.py --check-only
        if ($LASTEXITCODE -eq 0) {
            Write-Log "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã" "SUCCESS"
        } else {
            throw "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã"
        }
    }
    catch {
        Write-Log "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã: $_" "ERROR"
        exit 1
    }
}

# Dry-run —Ç–µ—Å—Ç
function Test-DryRun {
    Write-Log "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ dry-run —Ç–µ—Å—Ç–∞..."
    
    try {
        & python migrate_events_production.py --dry-run
        if ($LASTEXITCODE -eq 0) {
            Write-Log "Dry-run —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω" "SUCCESS"
        } else {
            throw "Dry-run —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω"
        }
    }
    catch {
        Write-Log "Dry-run —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: $_" "ERROR"
        exit 1
    }
}

# –û—Å–Ω–æ–≤–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è
function Start-Migration {
    param([string]$BackupFile)
    
    Write-Log "–ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω –º–∏–≥—Ä–∞—Ü–∏–∏..."
    
    if (-not $Force) {
        Write-Host ""
        Write-Host "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!" -ForegroundColor Yellow
        Write-Host "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤: $BackupFile" -ForegroundColor Yellow
        Write-Host ""
        
        $response = Read-Host "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (yes/no)"
        
        if ($response -notmatch "^[Yy]([Ee][Ss])?$") {
            Write-Log "–ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º" "WARNING"
            exit 0
        }
    }
    
    try {
        if ($DryRun) {
            & python migrate_events_production.py --dry-run
        } else {
            & python migrate_events_production.py
        }
        
        if ($LASTEXITCODE -eq 0) {
            Write-Log "–ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!" "SUCCESS"
        } else {
            throw "–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"
        }
    }
    catch {
        Write-Log "–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: $_" "ERROR"
        Write-Host "–î–ª—è –æ—Ç–∫–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: psql `$env:DATABASE_URL -f migrations/rollback_merge_events.sql" -ForegroundColor Yellow
        exit 1
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
function Test-Result {
    Write-Log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏..."
    
    try {
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        Write-Host "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:" -ForegroundColor Blue
        & psql $env:DATABASE_URL -c "
            SELECT 
                source,
                COUNT(*) as count,
                MIN(created_at_utc) as earliest,
                MAX(created_at_utc) as latest
            FROM events 
            WHERE source IS NOT NULL
            GROUP BY source
            ORDER BY count DESC;
        "
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        $duplicates = & psql $env:DATABASE_URL -t -c "
            SELECT COUNT(*) FROM (
                SELECT source, external_id, COUNT(*) 
                FROM events 
                WHERE source IS NOT NULL 
                GROUP BY source, external_id 
                HAVING COUNT(*) > 1
            ) duplicates;
        " | ForEach-Object { $_.Trim() }
        
        if ([int]$duplicates -eq 0) {
            Write-Log "–î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" "SUCCESS"
        } else {
            Write-Log "–ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: $duplicates" "WARNING"
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
        $indexCount = & psql $env:DATABASE_URL -t -c "
            SELECT COUNT(*) 
            FROM pg_indexes 
            WHERE tablename = 'events' 
            AND indexname LIKE 'idx_events_%';
        " | ForEach-Object { $_.Trim() }
        
        Write-Log "–°–æ–∑–¥–∞–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: $indexCount" "SUCCESS"
    }
    catch {
        Write-Log "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: $_" "WARNING"
    }
}

# Cleanup —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü
function Remove-OldTables {
    Write-Log "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ cleanup —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü..."
    
    if (-not $Force) {
        Write-Host ""
        $response = Read-Host "–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã events_parser –∏ events_user? (yes/no)"
        
        if ($response -notmatch "^[Yy]([Ee][Ss])?$") {
            Write-Log "Cleanup –ø—Ä–æ–ø—É—â–µ–Ω" "WARNING"
            return
        }
    }
    
    try {
        & python cleanup_old_events_tables.py
        if ($LASTEXITCODE -eq 0) {
            Write-Log "Cleanup –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!" "SUCCESS"
        } else {
            Write-Log "Cleanup –Ω–µ —É–¥–∞–ª—Å—è, –Ω–æ –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞" "WARNING"
        }
    }
    catch {
        Write-Log "–û—à–∏–±–∫–∞ cleanup: $_" "WARNING"
    }
}

# –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
function Show-FinalReport {
    param([string]$BackupFile)
    
    Write-Host ""
    Write-Host "==========================================" -ForegroundColor Green
    Write-Host "–ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!" -ForegroundColor Green
    Write-Host "==========================================" -ForegroundColor Green
    Write-Host ""
    Write-Host "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:" -ForegroundColor Blue
    Write-Host "  ‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: $BackupFile"
    Write-Host "  ‚Ä¢ –¢–∞–±–ª–∏—Ü—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã: events_parser + events_user ‚Üí events"
    Write-Host "  ‚Ä¢ events_community –æ—Å—Ç–∞–ª–∞—Å—å –æ—Ç–¥–µ–ª—å–Ω–æ"
    Write-Host "  ‚Ä¢ –°–æ–∑–¥–∞–Ω—ã –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è: geo_hash, starts_at_normalized"
    Write-Host "  ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω—ã —á–∞—Å—Ç–∏—á–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏"
    Write-Host ""
    Write-Host "üîß –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:" -ForegroundColor Blue
    Write-Host "  ‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"
    Write-Host "  ‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"
    Write-Host "  ‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"
    Write-Host ""
    Write-Host "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞:" -ForegroundColor Blue
    Write-Host "  ‚Ä¢ –û—Ç–∫–∞—Ç: psql `$env:DATABASE_URL -f migrations/rollback_merge_events.sql"
    Write-Host "  ‚Ä¢ –õ–æ–≥–∏: check logs/ directory"
    Write-Host ""
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function Main {
    Write-Host "–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–¥–∞–∫—à–µ–Ω –º–∏–≥—Ä–∞—Ü–∏—é..." -ForegroundColor Blue
    Write-Host ""
    
    if ($CheckOnly) {
        Test-Environment
        Test-PreChecks
        return
    }
    
    Test-Environment
    $backupFile = New-Backup
    Test-PreChecks
    
    if (-not $DryRun) {
        Test-DryRun
    }
    
    Start-Migration -BackupFile $backupFile
    Test-Result
    Remove-OldTables
    Show-FinalReport -BackupFile $backupFile
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
$null = Register-EngineEvent -SourceIdentifier PowerShell.Exiting -Action {
    Write-Host "`n–ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º" -ForegroundColor Red
    exit 1
}

# –ó–∞–ø—É—Å–∫
try {
    Main
}
catch {
    Write-Log "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: $_" "ERROR"
    exit 1
}
