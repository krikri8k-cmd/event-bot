"""
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –±–æ—Ç–∞
–î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
"""

import logging
from datetime import date

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from sqlalchemy.engine import Engine

from utils.analytics_service import AnalyticsService

logger = logging.getLogger(__name__)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏)
ADMIN_IDS = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS


async def handle_analytics_command(message: Message, engine: Engine):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analytics"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
        return

    AnalyticsService(engine)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="analytics:overview")],
            [InlineKeyboardButton(text="üë• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="analytics:users")],
            [InlineKeyboardButton(text="üè¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø", callback_data="analytics:groups")],
            [InlineKeyboardButton(text="üìà –¢—Ä–µ–Ω–¥—ã (30 –¥–Ω–µ–π)", callback_data="analytics:trends")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="analytics:refresh")],
        ]
    )

    await message.answer(
        "üìä **–ü–∞–Ω–µ–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ EventAroundBot**\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard,
        parse_mode="Markdown",
    )


async def handle_analytics_callback(callback_query, engine: Engine):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
        return

    analytics_service = AnalyticsService(engine)
    action = callback_query.data.split(":")[1]

    try:
        if action == "overview":
            await show_overview(callback_query, analytics_service)
        elif action == "users":
            await show_user_activity(callback_query, analytics_service)
        elif action == "groups":
            await show_group_stats(callback_query, analytics_service)
        elif action == "trends":
            await show_trends(callback_query, analytics_service)
        elif action == "refresh":
            await refresh_analytics(callback_query, analytics_service)
        else:
            await callback_query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")


async def show_overview(callback_query, analytics_service: AnalyticsService):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
    user_activity = analytics_service.get_latest_metric("daily_user_activity")
    group_stats = analytics_service.get_latest_metric("group_statistics")

    if not user_activity and not group_stats:
        await callback_query.answer("üìä –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–∫–∞ –Ω–µ —Å–æ–±—Ä–∞–Ω—ã")
        return

    text = "üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"

    if user_activity:
        text += "üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ: {user_activity.get('total_users', 0)}\n"
        text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {user_activity.get('active_users', 0)}\n"
        text += f"‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {user_activity.get('new_users', 0)}\n"
        text += f"‚Ä¢ –í –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö: {user_activity.get('private_chats', 0)}\n"
        text += f"‚Ä¢ –í –≥—Ä—É–ø–ø–∞—Ö: {user_activity.get('group_chats', 0)}\n\n"

    if group_stats:
        text += "üè¢ **–ì—Ä—É–ø–ø—ã:**\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ: {group_stats.get('total_groups', 0)}\n"
        text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {group_stats.get('active_groups', 0)}\n"
        text += f"‚Ä¢ –° —Å–æ–±—ã—Ç–∏—è–º–∏: {group_stats.get('groups_with_events', 0)}\n"

    await callback_query.message.edit_text(text, parse_mode="Markdown")


async def show_user_activity(callback_query, analytics_service: AnalyticsService):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_activity = analytics_service.get_latest_metric("daily_user_activity")

    if not user_activity:
        await callback_query.answer("üìä –î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    text = "üë• **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
    text += f"üìÖ –î–∞—Ç–∞: {date.today().strftime('%d.%m.%Y')}\n\n"
    text += "üî¢ **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_activity.get('total_users', 0)}\n"
    text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {user_activity.get('active_users', 0)}\n"
    text += f"‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {user_activity.get('new_users', 0)}\n\n"

    text += "üí¨ **–ü–æ —Ç–∏–ø–∞–º —á–∞—Ç–æ–≤:**\n"
    text += f"‚Ä¢ –õ–∏—á–Ω—ã–µ —á–∞—Ç—ã: {user_activity.get('private_chats', 0)}\n"
    text += f"‚Ä¢ –ì—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã: {user_activity.get('group_chats', 0)}\n\n"

    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    total_users = user_activity.get("total_users", 1)
    active_users = user_activity.get("active_users", 0)
    activity_rate = round((active_users / total_users) * 100, 1)

    text += f"üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {activity_rate}%"

    await callback_query.message.edit_text(text, parse_mode="Markdown")


async def show_group_stats(callback_query, analytics_service: AnalyticsService):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø"""
    group_stats = analytics_service.get_latest_metric("group_statistics")

    if not group_stats:
        await callback_query.answer("üìä –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    text = "üè¢ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø**\n\n"
    text += f"üìÖ –î–∞—Ç–∞: {date.today().strftime('%d.%m.%Y')}\n\n"

    total_groups = group_stats.get("total_groups", 0)
    active_groups = group_stats.get("active_groups", 0)
    groups_with_events = group_stats.get("groups_with_events", 0)

    text += "üî¢ **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {total_groups}\n"
    text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö (7 –¥–Ω–µ–π): {active_groups}\n"
    text += f"‚Ä¢ –° —Å–æ–±—ã—Ç–∏—è–º–∏ (30 –¥–Ω–µ–π): {groups_with_events}\n\n"

    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    if total_groups > 0:
        activity_rate = round((active_groups / total_groups) * 100, 1)
        events_rate = round((groups_with_events / total_groups) * 100, 1)

        text += "üìà **–ü—Ä–æ—Ü–µ–Ω—Ç—ã:**\n"
        text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_rate}%\n"
        text += f"‚Ä¢ –° —Å–æ–±—ã—Ç–∏—è–º–∏: {events_rate}%"

    await callback_query.message.edit_text(text, parse_mode="Markdown")


async def show_trends(callback_query, analytics_service: AnalyticsService):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã –∑–∞ 30 –¥–Ω–µ–π"""
    trends = analytics_service.get_dau_trend(30)

    if not trends:
        await callback_query.answer("üìä –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    text = "üìà **–¢—Ä–µ–Ω–¥—ã –∑–∞ 30 –¥–Ω–µ–π**\n\n"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    recent_trends = trends[:7]

    for trend in recent_trends:
        trend_date = trend["date"].strftime("%d.%m")
        active_users = trend["data"].get("active_users", 0)
        new_users = trend["data"].get("new_users", 0)

        text += f"üìÖ **{trend_date}:**\n"
        text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}\n"
        text += f"‚Ä¢ –ù–æ–≤—ã—Ö: {new_users}\n\n"

    await callback_query.message.edit_text(text, parse_mode="Markdown")


async def refresh_analytics(callback_query, analytics_service: AnalyticsService):
    """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    await callback_query.answer("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...")

    # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_success = analytics_service.collect_daily_user_activity()
    group_success = analytics_service.collect_group_statistics()

    if user_success and group_success:
        await callback_query.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    else:
        await callback_query.answer("‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ (–≤–æ–∑–º–æ–∂–Ω—ã –æ—à–∏–±–∫–∏)")


async def setup_analytics_commands(router, engine: Engine):
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    from aiogram import F
    from aiogram.filters import Command
    from aiogram.types import CallbackQuery

    # –ö–æ–º–∞–Ω–¥–∞ /analytics
    @router.message(Command("analytics"))
    async def analytics_command(message: Message):
        await handle_analytics_command(message, engine)

    # Callback –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    @router.callback_query(F.data.startswith("analytics:"))
    async def analytics_callback(callback_query: CallbackQuery):
        await handle_analytics_callback(callback_query, engine)
