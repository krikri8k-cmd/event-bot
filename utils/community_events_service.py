#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤ (–≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤)
"""

from datetime import datetime

from sqlalchemy import create_engine, text

from config import load_settings


class CommunityEventsService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö"""

    def __init__(self, engine=None):
        if engine is None:
            settings = load_settings()
            self.engine = create_engine(settings.database_url)
        else:
            self.engine = engine

    def create_community_event(
        self,
        group_id: int,
        creator_id: int,
        creator_username: str,
        title: str,
        date: datetime,
        description: str,
        city: str,
        location_name: str = None,
        location_url: str = None,
        admin_id: int = None,
        admin_ids: list[int] = None,
    ) -> int:
        print("üö®üö®üö® –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø –ö–û–î–ê –ó–ê–ü–£–©–ï–ù–ê! üö®üö®üö®")
        print("üö®üö®üö® –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø –ö–û–î–ê –ó–ê–ü–£–©–ï–ù–ê! üö®üö®üö®")
        print("üö®üö®üö® –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø –ö–û–î–ê –ó–ê–ü–£–©–ï–ù–ê! üö®üö®üö®")
        print("üö®üö®üö® –ü–†–û–í–ï–†–ö–ê –î–ï–ü–õ–û–Ø: CREATE_COMMUNITY_EVENT –û–ë–ù–û–í–õ–ï–ù! üö®üö®üö®")
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ

        Args:
            group_id: ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
            creator_id: ID —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏—è
            creator_username: Username —Å–æ–∑–¥–∞—Ç–µ–ª—è
            title: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            date: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
            description: –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            city: –ì–æ—Ä–æ–¥ —Å–æ–±—ã—Ç–∏—è
            location_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞
            location_url: –°—Å—ã–ª–∫–∞ –Ω–∞ –º–µ—Å—Ç–æ
            admin_id: ID –∞–¥–º–∏–Ω–∞ –≥—Ä—É–ø–ø—ã (LEGACY - –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            admin_ids: –°–ø–∏—Å–æ–∫ ID –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –≥—Ä—É–ø–ø—ã (–Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥)

        Returns:
            ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        """
        print(
            f"üî• CommunityEventsService.create_community_event: "
            f"—Å–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –≥—Ä—É–ø–ø–µ {group_id}, —Å–æ–∑–¥–∞—Ç–µ–ª—å {creator_id}"
        )
        print(f"üî• –ü–æ–ª—É—á–µ–Ω—ã admin_ids: {admin_ids}")
        print(f"üî• –ü–æ–ª—É—á–µ–Ω admin_id (LEGACY): {admin_id}")

        # –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–ú FALLBACK: –µ—Å–ª–∏ admin_ids –ø—É—Å—Ç—ã–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º–∏
        if not admin_ids:
            print("üî•üî•üî• –í–ù–ò–ú–ê–ù–ò–ï: admin_ids –ø—É—Å—Ç—ã–µ - SSL –æ—à–∏–±–∫–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –≥—Ä—É–ø–ø—ã")
            print("üö®üö®üö® –í–ù–ò–ú–ê–ù–ò–ï: –í —Ç–∞–±–ª–∏—Ü–µ –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤!")
            print("üö®üö®üö® –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ get_group_admin_ids() –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ –∏–∑-–∑–∞ SSL –æ—à–∏–±–æ–∫!")
            # –ù–ï –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è - –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            admin_ids = []
            admin_id = None  # LEGACY —Ç–æ–∂–µ –ø—É—Å—Ç–æ–π

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º admin_ids –∫–∞–∫ JSON
        import json

        admin_ids_json = json.dumps(admin_ids) if admin_ids else None
        print(f"üî• admin_ids_json –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {admin_ids_json}")
        print("üî•üî•üî• create_community_event: –í–•–û–î–Ø–©–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´")
        print(f"üî•üî•üî• create_community_event: group_id={group_id}, admin_ids={admin_ids}")
        print(f"üî•üî•üî• create_community_event: admin_ids_json={admin_ids_json}")
        print(f"üî•üî•üî• –¢–ò–ü–´ –î–ê–ù–ù–´–•: admin_ids={type(admin_ids)}, admin_ids_json={type(admin_ids_json)}")
        print(f"üî•üî•üî• –î–õ–ò–ù–ê JSON: {len(admin_ids_json) if admin_ids_json else 'None'}")

        with self.engine.connect() as conn:
            query = text("""
                INSERT INTO events_community
                (chat_id, organizer_id, organizer_username, admin_id, admin_ids, title, starts_at,
                 description, city, location_name, location_url, status)
                VALUES
                (:chat_id, :organizer_id, :organizer_username, :admin_id, :admin_ids, :title, :starts_at,
                 :description, :city, :location_name, :location_url, 'open')
                RETURNING id
            """)

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã SQL –∑–∞–ø—Ä–æ—Å–∞
            sql_params = {
                "chat_id": group_id,
                "organizer_id": creator_id,
                "organizer_username": creator_username,
                "admin_id": admin_id,
                "admin_ids": admin_ids_json,
                "title": title,
                "starts_at": date,
                "description": description,
                "city": city,
                "location_name": location_name,
                "location_url": location_url,
            }
            print(f"üî•üî•üî• SQL –ü–ê–†–ê–ú–ï–¢–†–´: {sql_params}")
            print(f"üî•üî•üî• admin_ids –≤ SQL: {sql_params['admin_ids']}")
            print(f"üî•üî•üî• –ü–ï–†–ï–î COMMIT: organizer_id={creator_id}, admin_ids={admin_ids_json}")
            print(f"üî•üî•üî• –ü–†–û–í–ï–†–ö–ê: admin_ids != organizer_id: {admin_ids != [creator_id]}")

            result = conn.execute(query, sql_params)

            event_id = result.fetchone()[0]
            conn.commit()

            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ ID {event_id}: '{title}' –≤ –≥—Ä—É–ø–ø–µ {group_id}")
            print(f"üî•üî•üî• create_community_event: chat_id={group_id}, admin_ids={admin_ids_json}")

            # –ü–†–û–í–ï–†–Ø–ï–ú, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –≤ –±–∞–∑–µ
            check_query = text("SELECT admin_ids FROM events_community WHERE id = :event_id")
            check_result = conn.execute(check_query, {"event_id": event_id})
            saved_admin_ids = check_result.fetchone()[0]
            print(f"üî•üî•üî• –ü–†–û–í–ï–†–ö–ê: admin_ids –≤ –±–∞–∑–µ: {saved_admin_ids}")

            return event_id

    def get_community_events(self, group_id: int, limit: int = 20, include_past: bool = False) -> list[dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

        Args:
            group_id: ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
            include_past: –í–∫–ª—é—á–∞—Ç—å –ª–∏ –ø—Ä–æ—à–µ–¥—à–∏–µ —Å–æ–±—ã—Ç–∏—è

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        """
        with self.engine.connect() as conn:
            if include_past:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
                query = text("""
                    SELECT id, organizer_id, organizer_username, title, starts_at,
                           description, city, location_name, location_url, created_at
                    FROM events_community
                    WHERE chat_id = :chat_id AND status = 'open'
                    ORDER BY starts_at ASC
                    LIMIT :limit
                """)
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è
                query = text("""
                    SELECT id, organizer_id, organizer_username, title, starts_at,
                           description, city, location_name, location_url, created_at
                    FROM events_community
                    WHERE chat_id = :chat_id AND status = 'open' AND starts_at > NOW()
                    ORDER BY starts_at ASC
                    LIMIT :limit
                """)

            result = conn.execute(query, {"chat_id": group_id, "limit": limit})

            events = []
            for row in result:
                events.append(
                    {
                        "id": row[0],
                        "organizer_id": row[1],
                        "organizer_username": row[2],
                        "title": row[3],
                        "starts_at": row[4],
                        "description": row[5],
                        "city": row[6],
                        "location_name": row[7],
                        "location_url": row[8],
                        "created_at": row[9],
                    }
                )

            return events

    def delete_community_event(self, event_id: int, group_id: int) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

        Args:
            event_id: ID —Å–æ–±—ã—Ç–∏—è
            group_id: ID –≥—Ä—É–ø–ø—ã (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏)

        Returns:
            True –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ
        """
        with self.engine.connect() as conn:
            query = text("""
                DELETE FROM events_community
                WHERE id = :event_id AND chat_id = :chat_id
            """)

            result = conn.execute(query, {"event_id": event_id, "chat_id": group_id})
            conn.commit()

            return result.rowcount > 0

    def cleanup_expired_events(self, days_old: int = 1) -> int:
        """
        –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π —Å–æ–æ–±—â–µ—Å—Ç–≤ (—É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å)

        Args:
            days_old: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–±—ã—Ç–∏—è —Å—á–∏—Ç–∞—é—Ç—Å—è —Å—Ç–∞—Ä—ã–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)

        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        """
        with self.engine.connect() as conn:
            query = text("""
                DELETE FROM events_community
                WHERE starts_at < NOW() - INTERVAL ':days_old days'
            """)

            result = conn.execute(query, {"days_old": days_old})
            conn.commit()

            deleted_count = result.rowcount
            if deleted_count > 0:
                print(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π —Å–æ–æ–±—â–µ—Å—Ç–≤")

            return deleted_count

    def get_community_stats(self, group_id: int) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–æ–±—ã—Ç–∏—è–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

        Args:
            group_id: ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        with self.engine.connect() as conn:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
            total_query = text("""
                SELECT COUNT(*) FROM events_community
                WHERE chat_id = :chat_id
            """)
            total_result = conn.execute(total_query, {"chat_id": group_id})
            total_events = total_result.fetchone()[0]

            # –ë—É–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è
            future_query = text("""
                SELECT COUNT(*) FROM events_community
                WHERE chat_id = :chat_id AND starts_at > NOW()
            """)
            future_result = conn.execute(future_query, {"chat_id": group_id})
            future_events = future_result.fetchone()[0]

            # –°–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è
            today_query = text("""
                SELECT COUNT(*) FROM events_community
                WHERE chat_id = :chat_id
                AND DATE(starts_at) = CURRENT_DATE
            """)
            today_result = conn.execute(today_query, {"chat_id": group_id})
            today_events = today_result.fetchone()[0]

            return {
                "total_events": total_events,
                "future_events": future_events,
                "today_events": today_events,
            }

    async def get_group_admin_ids_async(self, group_id: int, bot) -> list[int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç ID –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        –ë–ï–ó retry –ª–æ–≥–∏–∫–∏ (retry –¥–µ–ª–∞–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏)

        Args:
            group_id: ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤

        Returns:
            –°–ø–∏—Å–æ–∫ ID –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã
        """
        import logging

        logger = logging.getLogger(__name__)

        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–¢–õ–ê–î–ö–ê: print –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
        print(f"üîÑüîÑüîÑ get_group_admin_ids_async: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –≥—Ä—É–ø–ø—ã {group_id}")

        try:
            logger.info(f"üîÑ get_group_admin_ids_async: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –≥—Ä—É–ø–ø—ã {group_id}")

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            logger.info(f"üîÑ get_group_admin_ids_async: –í—ã–∑–æ–≤ bot.get_chat_administrators({group_id})")
            administrators = await bot.get_chat_administrators(group_id)
            logger.info(f"üîÑ get_group_admin_ids_async: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Telegram API –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")

            if not administrators:
                logger.warning(f"‚ö†Ô∏è get_group_admin_ids_async: –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ {group_id}")
                return []

            admin_ids = []
            for admin in administrators:
                if admin.status in ("creator", "administrator"):
                    admin_ids.append(admin.user.id)

            logger.info(f"‚úÖ get_group_admin_ids_async: –ü–æ–ª—É—á–µ–Ω—ã –∞–¥–º–∏–Ω—ã –≥—Ä—É–ø–ø—ã {group_id}: {admin_ids}")
            return admin_ids

        except Exception as e:
            logger.error(f"‚ùå get_group_admin_ids_async: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –≥—Ä—É–ø–ø—ã {group_id}: {e}")
            # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –Ω–∞–≤–µ—Ä—Ö –¥–ª—è retry –ª–æ–≥–∏–∫–∏ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            raise

    async def get_group_admin_id_async(self, group_id: int, bot) -> int | None:
        """
        –ü–æ–ª—É—á–∞–µ—Ç ID –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã (—Å–æ–∑–¥–∞—Ç–µ–ª—è –∏–ª–∏ –∞–¥–º–∏–Ω–∞) - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        LEGACY –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

        Args:
            group_id: ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤

        Returns:
            ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        admin_ids = await self.get_group_admin_ids_async(group_id, bot)
        return admin_ids[0] if admin_ids else None

    def get_group_admin_ids(self, group_id: int, bot) -> list[int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç ID –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        –û–ë–•–û–î–ù–û–ô –ü–£–¢–¨: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π event loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        –° RETRY –ª–æ–≥–∏–∫–æ–π –∏ fallback –º–µ—Ö–∞–Ω–∏–∑–º–æ–º

        Args:
            group_id: ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤

        Returns:
            –°–ø–∏—Å–æ–∫ ID –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã
        """
        import asyncio
        import concurrent.futures
        import logging
        import time

        logger = logging.getLogger(__name__)

        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–¢–õ–ê–î–ö–ê: print –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
        print("üö®üö®üö® –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø GET_GROUP_ADMIN_IDS –ó–ê–ü–£–©–ï–ù–ê! üö®üö®üö®")
        print("üö®üö®üö® –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø GET_GROUP_ADMIN_IDS –ó–ê–ü–£–©–ï–ù–ê! üö®üö®üö®")
        print("üö®üö®üö® –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø GET_GROUP_ADMIN_IDS –ó–ê–ü–£–©–ï–ù–ê! üö®üö®üö®")
        print(f"üî•üî•üî• get_group_admin_ids: –ù–ê–ß–ê–õ–û - –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")
        print(f"üî•üî•üî• get_group_admin_ids: bot={bot}, type={type(bot)}")
        print("üö®üö®üö® –ü–†–û–í–ï–†–ö–ê –î–ï–ü–õ–û–Ø: –ö–û–î –û–ë–ù–û–í–õ–ï–ù! üö®üö®üö®")
        logger.info(f"üî• get_group_admin_ids: –ù–ê–ß–ê–õ–û - –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")

        # –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø RETRY –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –≥—Ä—É–ø–ø—ã
        for attempt in range(10):  # 10 –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            try:
                logger.info(f"üî• get_group_admin_ids: –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/10 –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")

                # –û–ë–•–û–î–ù–û–ô –ü–£–¢–¨: –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å –Ω–æ–≤—ã–º event loop
                def run_in_thread():
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    try:
                        return loop.run_until_complete(self.get_group_admin_ids_async(group_id, bot))
                    finally:
                        loop.close()

                logger.info(f"üî• get_group_admin_ids: –∑–∞–ø—É—Å–∫ ThreadPoolExecutor –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")
                with concurrent.futures.ThreadPoolExecutor() as executor:
                    future = executor.submit(run_in_thread)
                    result = future.result(timeout=30)  # –£–≤–µ–ª–∏—á–∏–ª–∏ timeout –¥–æ 30 —Å–µ–∫—É–Ω–¥
                    logger.info(f"üî• get_group_admin_ids: –ø–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç {result} –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")
                    print(f"üéâüéâüéâ –£–°–ü–ï–•: –ü–æ–ª—É—á–µ–Ω—ã –Ω–∞—Å—Ç–æ—è—â–∏–µ –∞–¥–º–∏–Ω—ã –≥—Ä—É–ø–ø—ã: {result}")
                    print(f"üéâüéâüéâ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–æ–≤: {len(result)}")
                    return result

            except Exception as e:
                error_msg = str(e)
                logger.error(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3 - –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –≥—Ä—É–ø–ø—ã {group_id}: {e}")

                # –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø SSL retry –ª–æ–≥–∏–∫–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
                if "SSL" in error_msg or "APPLICATION_DATA_AFTER_CLOSE_NOTIFY" in error_msg:
                    if attempt < 9:  # –ù–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ (10 –ø–æ–ø—ã—Ç–æ–∫)
                        # –†–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
                        if attempt < 3:
                            wait_time = (attempt + 1) * 2  # 2, 4, 6 —Å–µ–∫—É–Ω–¥
                        elif attempt < 6:
                            wait_time = (attempt + 1) * 3  # 12, 15, 18 —Å–µ–∫—É–Ω–¥
                        else:
                            wait_time = (attempt + 1) * 4  # 28, 32, 36, 40 —Å–µ–∫—É–Ω–¥

                        logger.info(f"‚è≥ SSL –æ—à–∏–±–∫–∞, –∂–¥–µ–º {wait_time} —Å–µ–∫ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")
                        print(f"üî•üî•üî• SSL –æ—à–∏–±–∫–∞, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/10, –∂–¥–µ–º {wait_time} —Å–µ–∫...")
                        time.sleep(wait_time)
                        continue

                # –ï—Å–ª–∏ –Ω–µ SSL –æ—à–∏–±–∫–∞ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                if attempt == 9:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ (10 –ø–æ–ø—ã—Ç–æ–∫)
                    logger.error(f"üí• –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")
                    break

        # –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ú–ï–¢–û–î: –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å —Å RETRY
        for http_attempt in range(5):  # 5 –ø–æ–ø—ã—Ç–æ–∫ HTTP –∑–∞–ø—Ä–æ—Å–∞
            try:
                print(f"üî•üî•üî• –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ú–ï–¢–û–î: –ø–æ–ø—ã—Ç–∫–∞ {http_attempt + 1}/5 HTTP –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")
                import os
                import time

                import requests

                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
                bot_token = os.getenv("BOT_TOKEN")
                if bot_token:
                    url = f"https://api.telegram.org/bot{bot_token}/getChatAdministrators"
                    params = {"chat_id": group_id}

                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –∏ –¥–æ–±–∞–≤–ª—è–µ–º retry –¥–ª—è HTTP —Å –æ–±—Ö–æ–¥–æ–º SSL
                    import urllib3

                    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    session = requests.Session()
                    session.verify = False
                    session.headers.update(
                        {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"}
                    )

                    response = session.get(url, params=params, timeout=30)
                    if response.status_code == 200:
                        data = response.json()
                        if data.get("ok"):
                            admins = data.get("result", [])
                            admin_ids = [
                                admin["user"]["id"]
                                for admin in admins
                                if admin["status"] in ("creator", "administrator")
                            ]
                            print(f"üî•üî•üî• –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ú–ï–¢–û–î –£–°–ü–ï–®–ï–ù: –ø–æ–ª—É—á–µ–Ω—ã –∞–¥–º–∏–Ω—ã {admin_ids}")
                            print(f"üéâüéâüéâ HTTP –£–°–ü–ï–•: –ü–æ–ª—É—á–µ–Ω—ã –Ω–∞—Å—Ç–æ—è—â–∏–µ –∞–¥–º–∏–Ω—ã –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ HTTP: {admin_ids}")
                            print(f"üéâüéâüéâ HTTP –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–æ–≤: {len(admin_ids)}")
                            return admin_ids
                    else:
                        print(f"üî•üî•üî• HTTP –û–®–ò–ë–ö–ê: —Å—Ç–∞—Ç—É—Å {response.status_code}, –ø–æ–ø—ã—Ç–∫–∞ {http_attempt + 1}/5")
                        if http_attempt < 4:  # –ù–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                            time.sleep(2)  # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                            continue
            except Exception as e:
                print(f"üî•üî•üî• –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ú–ï–¢–û–î –ù–ï –£–î–ê–õ–°–Ø (–ø–æ–ø—ã—Ç–∫–∞ {http_attempt + 1}/5): {e}")
                if http_attempt < 4:  # –ù–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                    time.sleep(2)  # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                    continue

        # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê SSL: –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ Railway
        try:
            print(f"üî•üî•üî• –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê SSL: –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")
            import ssl

            import certifi

            print(f"üî•üî•üî• OpenSSL –≤–µ—Ä—Å–∏—è: {ssl.OPENSSL_VERSION}")
            print(f"üî•üî•üî• Certifi bundle: {certifi.where()}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ api.telegram.org
            import requests

            test_response = requests.get("https://api.telegram.org", timeout=10, verify=certifi.where())
            print(f"üî•üî•üî• –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ api.telegram.org: —Å—Ç–∞—Ç—É—Å {test_response.status_code}")

        except Exception as e:
            print(f"üî•üî•üî• –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê SSL –ù–ï –£–î–ê–õ–ê–°–¨: {e}")

        # –ü–û–°–õ–ï–î–ù–ò–ô –®–ê–ù–°: –ø–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ curl-–ø–æ–¥–æ–±–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        try:
            print(f"üî•üî•üî• –ü–û–°–õ–ï–î–ù–ò–ô –®–ê–ù–°: curl-–ø–æ–¥–æ–±–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")
            import json
            import subprocess

            bot_token = os.getenv("BOT_TOKEN")
            if bot_token:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º curl —á–µ—Ä–µ–∑ subprocess –¥–ª—è –æ–±—Ö–æ–¥–∞ SSL –ø—Ä–æ–±–ª–µ–º
                curl_cmd = [
                    "curl",
                    "-s",
                    "--insecure",
                    "--connect-timeout",
                    "30",
                    f"https://api.telegram.org/bot{bot_token}/getChatAdministrators",
                    "-d",
                    f"chat_id={group_id}",
                ]

                result = subprocess.run(curl_cmd, capture_output=True, text=True, timeout=30)
                if result.returncode == 0:
                    data = json.loads(result.stdout)
                    if data.get("ok"):
                        admins = data.get("result", [])
                        admin_ids = [
                            admin["user"]["id"] for admin in admins if admin["status"] in ("creator", "administrator")
                        ]
                        print(f"üî•üî•üî• CURL –£–°–ü–ï–•: –ø–æ–ª—É—á–µ–Ω—ã –∞–¥–º–∏–Ω—ã {admin_ids}")
                        print(f"üéâüéâüéâ CURL –£–°–ü–ï–•: –ü–æ–ª—É—á–µ–Ω—ã –Ω–∞—Å—Ç–æ—è—â–∏–µ –∞–¥–º–∏–Ω—ã –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ curl: {admin_ids}")
                        return admin_ids
                else:
                    print(f"üî•üî•üî• CURL –û–®–ò–ë–ö–ê: exit code {result.returncode}, stderr: {result.stderr}")
        except Exception as e:
            print(f"üî•üî•üî• CURL –ú–ï–¢–û–î –ù–ï –£–î–ê–õ–°–Ø: {e}")

        # FALLBACK: –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        logger.warning(f"üí° FALLBACK: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")
        print(f"üí•üí•üí• FALLBACK: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")
        print("üö®üö®üö® –í–ù–ò–ú–ê–ù–ò–ï: SSL –æ—à–∏–±–∫–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –≥—Ä—É–ø–ø—ã!")
        print("üö®üö®üö® –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏—è!")
        return []

    def get_group_admin_id(self, group_id: int, bot) -> int | None:
        """
        –ü–æ–ª—É—á–∞–µ—Ç ID –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã (—Å–æ–∑–¥–∞—Ç–µ–ª—è –∏–ª–∏ –∞–¥–º–∏–Ω–∞) - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        LEGACY –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

        Args:
            group_id: ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤

        Returns:
            ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        admin_ids = self.get_group_admin_ids(group_id, bot)
        return admin_ids[0] if admin_ids else None
