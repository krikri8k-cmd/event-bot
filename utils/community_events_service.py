#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤ (–≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤)
"""

from datetime import datetime

from sqlalchemy import create_engine, text

from config import load_settings


class CommunityEventsService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö"""

    def __init__(self, engine=None):
        if engine is None:
            settings = load_settings()
            self.engine = create_engine(settings.database_url)
        else:
            self.engine = engine

    def create_community_event(
        self,
        group_id: int,
        creator_id: int,
        title: str,
        date: datetime,
        description: str,
        city: str,
        location_name: str = None,
    ) -> int:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ

        Args:
            group_id: ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
            creator_id: ID —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏—è
            title: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            date: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
            description: –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            city: –ì–æ—Ä–æ–¥ —Å–æ–±—ã—Ç–∏—è
            location_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞

        Returns:
            ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        """
        print(
            f"üî• CommunityEventsService.create_community_event: "
            f"—Å–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –≥—Ä—É–ø–ø–µ {group_id}, —Å–æ–∑–¥–∞—Ç–µ–ª—å {creator_id}"
        )
        with self.engine.connect() as conn:
            query = text("""
                INSERT INTO events_community
                (group_id, creator_id, title, date, description, city, location_name)
                VALUES
                (:group_id, :creator_id, :title, :date, :description, :city, :location_name)
                RETURNING id
            """)

            result = conn.execute(
                query,
                {
                    "group_id": group_id,
                    "creator_id": creator_id,
                    "title": title,
                    "date": date,
                    "description": description,
                    "city": city,
                    "location_name": location_name,
                },
            )

            event_id = result.fetchone()[0]
            conn.commit()

            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ ID {event_id}: '{title}' –≤ –≥—Ä—É–ø–ø–µ {group_id}")
            return event_id

    def get_community_events(self, group_id: int, limit: int = 20, include_past: bool = False) -> list[dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

        Args:
            group_id: ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
            include_past: –í–∫–ª—é—á–∞—Ç—å –ª–∏ –ø—Ä–æ—à–µ–¥—à–∏–µ —Å–æ–±—ã—Ç–∏—è

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        """
        with self.engine.connect() as conn:
            if include_past:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
                query = text("""
                    SELECT id, creator_id, title, date, description, city, location_name, created_at
                    FROM events_community
                    WHERE group_id = :group_id
                    ORDER BY date ASC
                    LIMIT :limit
                """)
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è
                query = text("""
                    SELECT id, creator_id, title, date, description, city, location_name, created_at
                    FROM events_community
                    WHERE group_id = :group_id AND date > NOW()
                    ORDER BY date ASC
                    LIMIT :limit
                """)

            result = conn.execute(query, {"group_id": group_id, "limit": limit})

            events = []
            for row in result:
                events.append(
                    {
                        "id": row[0],
                        "creator_id": row[1],
                        "title": row[2],
                        "date": row[3],
                        "description": row[4],
                        "city": row[5],
                        "location_name": row[6],
                        "created_at": row[7],
                    }
                )

            return events

    def delete_community_event(self, event_id: int, group_id: int) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

        Args:
            event_id: ID —Å–æ–±—ã—Ç–∏—è
            group_id: ID –≥—Ä—É–ø–ø—ã (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏)

        Returns:
            True –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ
        """
        with self.engine.connect() as conn:
            query = text("""
                DELETE FROM events_community
                WHERE id = :event_id AND group_id = :group_id
            """)

            result = conn.execute(query, {"event_id": event_id, "group_id": group_id})
            conn.commit()

            return result.rowcount > 0

    def cleanup_expired_events(self, days_old: int = 1) -> int:
        """
        –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π —Å–æ–æ–±—â–µ—Å—Ç–≤ (—É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å)

        Args:
            days_old: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–±—ã—Ç–∏—è —Å—á–∏—Ç–∞—é—Ç—Å—è —Å—Ç–∞—Ä—ã–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)

        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        """
        with self.engine.connect() as conn:
            query = text("""
                DELETE FROM events_community
                WHERE date < NOW() - INTERVAL ':days_old days'
            """)

            result = conn.execute(query, {"days_old": days_old})
            conn.commit()

            deleted_count = result.rowcount
            if deleted_count > 0:
                print(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π —Å–æ–æ–±—â–µ—Å—Ç–≤")

            return deleted_count

    def get_community_stats(self, group_id: int) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–æ–±—ã—Ç–∏—è–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

        Args:
            group_id: ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        with self.engine.connect() as conn:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
            total_query = text("""
                SELECT COUNT(*) FROM events_community
                WHERE group_id = :group_id
            """)
            total_result = conn.execute(total_query, {"group_id": group_id})
            total_events = total_result.fetchone()[0]

            # –ë—É–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è
            future_query = text("""
                SELECT COUNT(*) FROM events_community
                WHERE group_id = :group_id AND date > NOW()
            """)
            future_result = conn.execute(future_query, {"group_id": group_id})
            future_events = future_result.fetchone()[0]

            # –°–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è
            today_query = text("""
                SELECT COUNT(*) FROM events_community
                WHERE group_id = :group_id
                AND DATE(date) = CURRENT_DATE
            """)
            today_result = conn.execute(today_query, {"group_id": group_id})
            today_events = today_result.fetchone()[0]

            return {
                "total_events": total_events,
                "future_events": future_events,
                "today_events": today_events,
            }
