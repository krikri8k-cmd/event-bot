"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
"""

from datetime import UTC, datetime, timedelta
from zoneinfo import ZoneInfo

# –ß–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
REGION_TZ = {
    "bali": ZoneInfo("Asia/Makassar"),  # GMT+8
    "msk": ZoneInfo("Europe/Moscow"),  # GMT+3
    "spb": ZoneInfo("Europe/Moscow"),  # GMT+3
    "jakarta": ZoneInfo("Asia/Jakarta"),  # GMT+7
}


def today_window_utc_for(region: str) -> tuple[datetime, datetime]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ "—Å–µ–≥–æ–¥–Ω—è" –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ –≤ UTC

    Args:
        region: –†–µ–≥–∏–æ–Ω ("bali", "msk", "spb", "jakarta")

    Returns:
        Tuple[start_utc, end_utc] - –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –¥–Ω—è –≤ UTC
    """
    if region not in REGION_TZ:
        raise ValueError(f"Unknown region: {region}. Available: {list(REGION_TZ.keys())}")

    tz = REGION_TZ[region]
    now_local = datetime.now(tz)

    # –ù–∞—á–∞–ª–æ –¥–Ω—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    start_local = now_local.replace(hour=0, minute=0, second=0, microsecond=0)

    # –ö–æ–Ω–µ—Ü –¥–Ω—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    end_local = start_local + timedelta(days=1) - timedelta(seconds=1)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC
    start_utc = start_local.astimezone(UTC)
    end_utc = end_local.astimezone(UTC)

    return start_utc, end_utc


def normalize_to_utc(dt: datetime, region: str) -> datetime:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç datetime –∫ UTC –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞

    Args:
        dt: datetime –æ–±—ä–µ–∫—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å naive –∏–ª–∏ —Å tzinfo)
        region: –†–µ–≥–∏–æ–Ω –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞

    Returns:
        datetime –≤ UTC
    """
    if region not in REGION_TZ:
        raise ValueError(f"Unknown region: {region}. Available: {list(REGION_TZ.keys())}")

    tz = REGION_TZ[region]

    # –ï—Å–ª–∏ datetime naive, –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π tz
    if dt.tzinfo is None:
        dt = dt.replace(tzinfo=tz)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC
    return dt.astimezone(UTC)


def get_region_from_coordinates(lat: float, lng: float) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–≥–∏–æ–Ω –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º

    Args:
        lat: –®–∏—Ä–æ—Ç–∞
        lng: –î–æ–ª–≥–æ—Ç–∞

    Returns:
        –ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞
    """
    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    if -8.5 <= lat <= -8.0 and 114.0 <= lng <= 116.0:
        return "bali"
    elif 55.0 <= lat <= 56.0 and 37.0 <= lng <= 38.0:
        return "msk"
    elif 59.0 <= lat <= 60.0 and 29.0 <= lng <= 31.0:
        return "spb"
    elif -6.5 <= lat <= -6.0 and 106.0 <= lng <= 107.0:
        return "jakarta"
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ë–∞–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        return "bali"


def format_time_window_log(region: str, start_utc: datetime, end_utc: datetime) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ª–æ–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞

    Args:
        region: –†–µ–≥–∏–æ–Ω
        start_utc: –ù–∞—á–∞–ª–æ –æ–∫–Ω–∞ –≤ UTC
        end_utc: –ö–æ–Ω–µ—Ü –æ–∫–Ω–∞ –≤ UTC

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ª–æ–≥–∞
    """
    return f"üïí today window ({region}): {start_utc.isoformat()} .. {end_utc.isoformat()} (UTC)"


def get_cleanup_cutoff_utc(region: str) -> datetime:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –æ—Ç—Å–µ—á–µ–Ω–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π

    Args:
        region: –†–µ–≥–∏–æ–Ω

    Returns:
        –î–∞—Ç–∞ –æ—Ç—Å–µ—á–µ–Ω–∏—è –≤ UTC (–Ω–∞—á–∞–ª–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è)
    """
    if region not in REGION_TZ:
        raise ValueError(f"Unknown region: {region}. Available: {list(REGION_TZ.keys())}")

    tz = REGION_TZ[region]
    now_local = datetime.now(tz)

    # –ù–∞—á–∞–ª–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    cutoff_local = now_local.replace(hour=0, minute=0, second=0, microsecond=0)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC
    cutoff_utc = cutoff_local.astimezone(UTC)

    return cutoff_utc
