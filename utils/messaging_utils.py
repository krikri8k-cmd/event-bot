#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö (–∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å)
"""

import asyncio
import logging
from typing import Any

from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.types import InlineKeyboardMarkup
from sqlalchemy.orm import Session

from database import BotMessage, ChatSettings

logger = logging.getLogger(__name__)


async def mark_bot_removed(session: Session, chat_id: int) -> None:
    """
    –ü–æ–º–µ—á–∞–µ—Ç –±–æ—Ç–∞ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∏–∑ –≥—Ä—É–ø–ø—ã

    Args:
        session: SQLAlchemy —Å–µ—Å—Å–∏—è
        chat_id: ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
    """
    from datetime import datetime

    from sqlalchemy import select

    result = await session.execute(select(ChatSettings).where(ChatSettings.chat_id == chat_id))
    settings = result.scalar_one_or_none()

    if settings and settings.bot_status != "removed":
        settings.bot_status = "removed"
        settings.bot_removed_at = datetime.utcnow()
        await session.commit()
        logger.warning(f"üö´ –ë–æ—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π –∏–∑ –≥—Ä—É–ø–ø—ã {chat_id}")


async def auto_delete_message(bot: Bot, chat_id: int, message_id: int, delay_seconds: int):
    """–ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤)"""
    try:
        import asyncio

        logger.info(f"üïê –ó–∞–ø—É—â–µ–Ω–æ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id} —á–µ—Ä–µ–∑ {delay_seconds}—Å")
        await asyncio.sleep(delay_seconds)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        try:
            bot_member = await bot.get_chat_member(chat_id, bot.id)
            can_delete = getattr(bot_member, "can_delete_messages", False)
            logger.info(f"üîç –ü—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}: status={bot_member.status}, can_delete_messages={can_delete}")

            if bot_member.status != "administrator" or not can_delete:
                logger.warning(
                    f"‚ö†Ô∏è –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ {chat_id}: "
                    f"status={bot_member.status}, can_delete={can_delete}"
                )
                return
        except Exception as perm_error:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}: {perm_error}")
            return

        await bot.delete_message(chat_id=chat_id, message_id=message_id)
        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —á–∞—Ç–∞ {chat_id} —á–µ—Ä–µ–∑ {delay_seconds}—Å")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")


# === SYNC –í–ï–†–°–ò–ò (–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π SQLAlchemy session) ===


def ensure_panel_sync(bot: Bot, session: Session, *, chat_id: int, text: str, kb: InlineKeyboardMarkup) -> int:
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞–Ω–µ–ª—å-–ø–æ—Å—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        session: SQLAlchemy —Å–µ—Å—Å–∏—è (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)
        chat_id: ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
        text: –¢–µ–∫—Å—Ç –ø–∞–Ω–µ–ª–∏
        kb: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞

    Returns:
        message_id —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞
    settings = session.query(ChatSettings).filter(ChatSettings.chat_id == chat_id).first()

    if not settings:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π chat_number –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        from sqlalchemy import text

        result = session.execute(text("SELECT nextval('chat_number_seq')"))
        chat_number = result.scalar()
        logger.info(f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω chat_number={chat_number} –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        settings = ChatSettings(chat_id=chat_id, chat_number=chat_number)
        session.add(settings)
        session.commit()

    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if settings.last_panel_message_id:
        try:
            # NOTE: –≠—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–¥, –Ω–æ aiogram —Ç—Ä–µ–±—É–µ—Ç async
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å asyncio.run –∏–ª–∏ async –≤–µ—Ä—Å–∏—é
            import asyncio

            asyncio.run(
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=settings.last_panel_message_id,
                    text=text,
                    reply_markup=kb,
                    parse_mode="Markdown",
                )
            )
            logger.info(f"‚úÖ –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –ø–∞–Ω–µ–ª—å-–ø–æ—Å—Ç –≤ —á–∞—Ç–µ {chat_id}, message_id={settings.last_panel_message_id}")
            return settings.last_panel_message_id
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞–Ω–µ–ª—å-–ø–æ—Å—Ç: {e}")

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    import asyncio

    msg = asyncio.run(bot.send_message(chat_id, text, reply_markup=kb, parse_mode="Markdown"))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–∞–Ω–µ–ª–∏ –∏ —Ç—Ä–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    settings.last_panel_message_id = msg.message_id
    bot_msg = BotMessage(chat_id=chat_id, message_id=msg.message_id, tag="panel")
    session.add(bot_msg)
    session.commit()

    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–∞–Ω–µ–ª—å-–ø–æ—Å—Ç –≤ —á–∞—Ç–µ {chat_id}, message_id={msg.message_id}")
    return msg.message_id


def send_tracked_sync(bot: Bot, session: Session, *, chat_id: int, text: str, tag: str = "service", **kwargs) -> Any:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        session: SQLAlchemy —Å–µ—Å—Å–∏—è (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)
        chat_id: ID —á–∞—Ç–∞
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        tag: –¢–µ–≥ —Å–æ–æ–±—â–µ–Ω–∏—è (panel, service, notification)
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è send_message

    Returns:
        –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    import asyncio

    msg = asyncio.run(bot.send_message(chat_id, text, **kwargs))

    # –¢—Ä–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot_msg = BotMessage(chat_id=chat_id, message_id=msg.message_id, tag=tag)
    session.add(bot_msg)
    session.commit()

    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ tracked —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}, message_id={msg.message_id}, tag={tag}")

    # –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 4 –º–∏–Ω—É—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤ (–∫—Ä–æ–º–µ –≤–∞–∂–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
    if tag in ["service", "panel", "list"]:  # –ù–µ —É–¥–∞–ª—è–µ–º "notification" (–Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è)
        asyncio.create_task(auto_delete_message(bot, chat_id, msg.message_id, 210))  # 3.5 –º–∏–Ω—É—Ç—ã

    return msg


def delete_all_tracked_sync(bot: Bot, session: Session, *, chat_id: int) -> int:
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ç—Ä–µ–∫–Ω—É—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç–µ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        session: SQLAlchemy —Å–µ—Å—Å–∏—è (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)
        chat_id: ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞

    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    import asyncio

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ—É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä–æ–º–µ "notification")
    messages = (
        session.query(BotMessage)
        .filter(
            BotMessage.chat_id == chat_id,
            BotMessage.deleted is False,
            BotMessage.tag != "notification",  # –ù–ï —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è "–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ!"
        )
        .all()
    )

    deleted = 0
    for bot_msg in messages:
        try:
            asyncio.run(bot.delete_message(chat_id, bot_msg.message_id))
            bot_msg.deleted = True
            deleted += 1
        except TelegramBadRequest as e:
            # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {bot_msg.message_id}: {e}")
            bot_msg.deleted = True  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {bot_msg.message_id}: {e}")

    # –û–±–Ω—É–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞–Ω–µ–ª—å
    settings = session.query(ChatSettings).filter(ChatSettings.chat_id == chat_id).first()
    if settings:
        settings.last_panel_message_id = None

    session.commit()

    logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted} —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}")
    return deleted


# === ASYNC –í–ï–†–°–ò–ò (–¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã) ===


async def ensure_panel(bot: Bot, session: Session, *, chat_id: int, text: str, kb: InlineKeyboardMarkup) -> int:
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞–Ω–µ–ª—å-–ø–æ—Å—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π (ASYNC –≤–µ—Ä—Å–∏—è)

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        session: SQLAlchemy —Å–µ—Å—Å–∏—è
        chat_id: ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
        text: –¢–µ–∫—Å—Ç –ø–∞–Ω–µ–ª–∏
        kb: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞

    Returns:
        message_id —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    logger.info(f"üî• ensure_panel: –Ω–∞—á–∏–Ω–∞–µ–º –¥–ª—è —á–∞—Ç–∞ {chat_id}")

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞
    from sqlalchemy import select, text

    result = await session.execute(select(ChatSettings).where(ChatSettings.chat_id == chat_id))
    settings = result.scalar_one_or_none()
    logger.info(f"üî• ensure_panel: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ {chat_id} = {settings}")

    if not settings:
        logger.info(f"üî• ensure_panel: —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π chat_number –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        result = await session.execute(text("SELECT nextval('chat_number_seq')"))
        chat_number = result.scalar()
        logger.info(f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω chat_number={chat_number} –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        settings = ChatSettings(chat_id=chat_id, chat_number=chat_number)
        session.add(settings)
        await session.commit()

    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if settings.last_panel_message_id:
        logger.info(f"üî• ensure_panel: –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å message_id={settings.last_panel_message_id}")
        try:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=settings.last_panel_message_id,
                text=text,
                reply_markup=kb,
                parse_mode="Markdown",
            )
            logger.info(f"‚úÖ –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –ø–∞–Ω–µ–ª—å-–ø–æ—Å—Ç –≤ —á–∞—Ç–µ {chat_id}, message_id={settings.last_panel_message_id}")
            return settings.last_panel_message_id
        except TelegramBadRequest as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞–Ω–µ–ª—å-–ø–æ—Å—Ç: {e}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª—å-–ø–æ—Å—Ç–∞: {e}")

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    logger.info(f"üî• ensure_panel: —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    try:
        msg = await bot.send_message(chat_id, text, reply_markup=kb, parse_mode="Markdown")
    except TelegramForbiddenError as e:
        logger.error(f"üö´ –ë–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
        await mark_bot_removed(session, chat_id)
        raise
    except TelegramBadRequest as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {chat_id}: {e}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –±–æ—Ç —É–¥–∞–ª–µ–Ω
        if "chat not found" in str(e).lower() or "bot was kicked" in str(e).lower():
            await mark_bot_removed(session, chat_id)
        raise

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–∞–Ω–µ–ª–∏ –∏ —Ç—Ä–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    logger.info(f"üî• ensure_panel: —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id={msg.message_id} –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏ bot_messages")
    logger.info(f"üî• ensure_panel: chat_id={chat_id}, message_id={msg.message_id}, tag=panel")

    settings.last_panel_message_id = msg.message_id
    bot_msg = BotMessage(chat_id=chat_id, message_id=msg.message_id, tag="panel")
    session.add(bot_msg)

    logger.info("üî• ensure_panel: –ø–µ—Ä–µ–¥ commit - bot_msg –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é")
    await session.commit()
    logger.info("üî• ensure_panel: –ø–æ—Å–ª–µ commit - –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")

    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–∞–Ω–µ–ª—å-–ø–æ—Å—Ç –≤ —á–∞—Ç–µ {chat_id}, message_id={msg.message_id}")
    return msg.message_id


async def send_tracked(bot: Bot, session: Session, *, chat_id: int, text: str, tag: str = "service", **kwargs) -> Any:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è (ASYNC –≤–µ—Ä—Å–∏—è)

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        session: SQLAlchemy —Å–µ—Å—Å–∏—è
        chat_id: ID —á–∞—Ç–∞
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        tag: –¢–µ–≥ —Å–æ–æ–±—â–µ–Ω–∏—è (panel, service, notification)
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è send_message

    Returns:
        –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        msg = await bot.send_message(chat_id, text, **kwargs)
    except TelegramForbiddenError as e:
        logger.error(f"üö´ –ë–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
        await mark_bot_removed(session, chat_id)
        raise
    except TelegramBadRequest as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {chat_id}: {e}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –±–æ—Ç —É–¥–∞–ª–µ–Ω
        if "chat not found" in str(e).lower() or "bot was kicked" in str(e).lower():
            await mark_bot_removed(session, chat_id)
        raise

    # –¢—Ä–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot_msg = BotMessage(chat_id=chat_id, message_id=msg.message_id, tag=tag)
    session.add(bot_msg)
    await session.commit()

    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ tracked —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}, message_id={msg.message_id}, tag={tag}")

    # –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3.5 –º–∏–Ω—É—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤ (–∫—Ä–æ–º–µ –≤–∞–∂–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
    if tag in ["service", "panel", "list"]:  # –ù–µ —É–¥–∞–ª—è–µ–º "notification" (–Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è)
        logger.info(f"üïê –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg.message_id} —Å —Ç–µ–≥–æ–º '{tag}' –≤ —á–∞—Ç–µ {chat_id}")
        asyncio.create_task(auto_delete_message(bot, chat_id, msg.message_id, 210))  # 3.5 –º–∏–Ω—É—Ç—ã

    return msg


async def delete_all_tracked(bot: Bot, session: Session, *, chat_id: int) -> int:
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ç—Ä–µ–∫–Ω—É—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç–µ (ASYNC –≤–µ—Ä—Å–∏—è)

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        session: SQLAlchemy —Å–µ—Å—Å–∏—è
        chat_id: ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞

    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    logger.info(f"üî• delete_all_tracked: –Ω–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {chat_id}")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ—É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    from sqlalchemy import select

    result = await session.execute(
        select(BotMessage).where(
            BotMessage.chat_id == chat_id,
            BotMessage.deleted.is_(False),
            BotMessage.tag != "notification",  # –ù–ï —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è "–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ!"
        )
    )
    messages = result.scalars().all()

    logger.info(f"üî• –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ {chat_id}")

    if not messages:
        logger.warning(f"‚ö†Ô∏è –í bot_messages –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        return 0

    deleted = 0
    for bot_msg in messages:
        logger.info(f"üî• –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {bot_msg.message_id} (tag: {bot_msg.tag})")
        try:
            await bot.delete_message(chat_id, bot_msg.message_id)
            bot_msg.deleted = True
            deleted += 1
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {bot_msg.message_id} (tag: {bot_msg.tag})")
        except TelegramForbiddenError as e:
            # –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
            logger.error(f"üö´ –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è {bot_msg.message_id}: {e}")
            # –ù–ï –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ!
        except TelegramBadRequest as e:
            # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {bot_msg.message_id}: {e}")
            bot_msg.deleted = True  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {bot_msg.message_id}: {e}")
            # –ù–ï –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö!

    # –û–±–Ω—É–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞–Ω–µ–ª—å
    result = await session.execute(select(ChatSettings).where(ChatSettings.chat_id == chat_id))
    settings = result.scalar_one_or_none()
    if settings:
        settings.last_panel_message_id = None
        logger.info(f"üî• –û–±–Ω—É–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–∞–Ω–µ–ª—å –¥–ª—è —á–∞—Ç–∞ {chat_id}")

    await session.commit()
    logger.info(f"üî• commit –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}")

    logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted} –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}")
    return deleted


async def is_chat_admin(bot: Bot, chat_id: int, user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        chat_id: ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω, False –∏–Ω–∞—á–µ
    """
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        return member.status in ("creator", "administrator")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞: {e}")
        return False


async def get_chat_administrators(bot: Bot, chat_id: int) -> list[dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        chat_id: ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞

    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–¥–º–∏–Ω–∞—Ö:
        [
            {
                "user_id": int,
                "username": str | None,
                "first_name": str,
                "last_name": str | None,
                "status": str,  # "creator" –∏–ª–∏ "administrator"
                "can_delete_messages": bool,
                "can_restrict_members": bool,
                "can_promote_members": bool,
                # ... –¥—Ä—É–≥–∏–µ –ø—Ä–∞–≤–∞
            }
        ]
    """
    try:
        administrators = await bot.get_chat_administrators(chat_id)
        admin_list = []

        for admin in administrators:
            admin_info = {
                "user_id": admin.user.id,
                "username": admin.user.username,
                "first_name": admin.user.first_name,
                "last_name": admin.user.last_name,
                "status": admin.status,
                "can_delete_messages": getattr(admin, "can_delete_messages", False),
                "can_restrict_members": getattr(admin, "can_restrict_members", False),
                "can_promote_members": getattr(admin, "can_promote_members", False),
                "can_change_info": getattr(admin, "can_change_info", False),
                "can_invite_users": getattr(admin, "can_invite_users", False),
                "can_pin_messages": getattr(admin, "can_pin_messages", False),
                "can_manage_chat": getattr(admin, "can_manage_chat", False),
                "can_manage_video_chats": getattr(admin, "can_manage_video_chats", False),
            }
            admin_list.append(admin_info)

        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ {len(admin_list)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞ {chat_id}")
        return admin_list

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞ {chat_id}: {e}")
        return []


async def get_chat_creator(bot: Bot, chat_id: int) -> dict | None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ —á–∞—Ç–∞

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        chat_id: ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    try:
        administrators = await get_chat_administrators(bot, chat_id)
        creator = next((admin for admin in administrators if admin["status"] == "creator"), None)

        if creator:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–æ–∑–¥–∞—Ç–µ–ª—å —á–∞—Ç–∞ {chat_id}: {creator['first_name']} (@{creator['username']})")
        else:
            logger.warning(f"‚ö†Ô∏è –°–æ–∑–¥–∞—Ç–µ–ª—å —á–∞—Ç–∞ {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        return creator

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
        return None
