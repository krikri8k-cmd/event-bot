"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ –¥–∞—Ç–∞–º
"""

from datetime import UTC, datetime

from sqlalchemy import text


def cleanup_old_events(engine, region: str = "bali") -> int:
    """
    –û—á–∏—â–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è

    Args:
        engine: SQLAlchemy engine
        region: –†–µ–≥–∏–æ–Ω –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞

    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    """
    from utils.time_window import REGION_TZ

    if region not in REGION_TZ:
        raise ValueError(f"Unknown region: {region}")

    tz = REGION_TZ[region]
    now_local = datetime.now(tz)

    # –°–æ–±—ã—Ç–∏—è —Å—Ç–∞—Ä—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
    cutoff_date = now_local.replace(hour=0, minute=0, second=0, microsecond=0)
    cutoff_utc = cutoff_date.astimezone(UTC)

    with engine.connect() as conn:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
        user_deleted = conn.execute(
            text("""
            DELETE FROM events_user
            WHERE starts_at < :cutoff_utc
        """),
            {"cutoff_utc": cutoff_utc},
        ).rowcount

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–∞—Ä—Å–µ—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã events
        parser_deleted = conn.execute(
            text("""
            DELETE FROM events
            WHERE starts_at < :cutoff_utc
            AND source IS NOT NULL
        """),
            {"cutoff_utc": cutoff_utc},
        ).rowcount

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        events_deleted = conn.execute(
            text("""
            DELETE FROM events
            WHERE starts_at < :cutoff_utc
        """),
            {"cutoff_utc": cutoff_utc},
        ).rowcount

        conn.commit()

        total_deleted = user_deleted + parser_deleted + events_deleted

        print("üßπ –û—á–∏—Å—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        print(f"   üìä –£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö: {user_deleted}")
        print(f"   üìä –£–¥–∞–ª–µ–Ω–æ –ø–∞—Ä—Å–µ—Ä–Ω—ã—Ö: {parser_deleted}")
        print(f"   üìä –£–¥–∞–ª–µ–Ω–æ –∏–∑ events: {events_deleted}")
        print(f"   üìä –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ: {total_deleted}")
        print(f"   üïí –î–∞—Ç–∞ –æ—Ç—Å–µ—á–µ–Ω–∏—è: {cutoff_utc} (UTC)")

        return total_deleted


def get_active_events_count(engine, region: str = "bali") -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ —Ç–∏–ø–∞–º

    Args:
        engine: SQLAlchemy engine
        region: –†–µ–≥–∏–æ–Ω

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–±—ã—Ç–∏–π –ø–æ —Ç–∏–ø–∞–º
    """
    from utils.time_window import today_window_utc_for

    start_utc, end_utc = today_window_utc_for(region)

    with engine.connect() as conn:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
        user_count = conn.execute(
            text("""
            SELECT COUNT(*) FROM events_user
            WHERE starts_at BETWEEN :start_utc AND :end_utc
        """),
            {"start_utc": start_utc, "end_utc": end_utc},
        ).fetchone()[0]

        # –ü–∞—Ä—Å–µ—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (–∏–∑ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã events)
        parser_count = conn.execute(
            text("""
            SELECT COUNT(*) FROM events
            WHERE starts_at BETWEEN :start_utc AND :end_utc
            AND source IS NOT NULL
        """),
            {"start_utc": start_utc, "end_utc": end_utc},
        ).fetchone()[0]

        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        events_count = conn.execute(
            text("""
            SELECT COUNT(*) FROM events
            WHERE starts_at BETWEEN :start_utc AND :end_utc
        """),
            {"start_utc": start_utc, "end_utc": end_utc},
        ).fetchone()[0]

        return {
            "user_events": user_count,
            "parser_events": parser_count,
            "total_events": events_count,
            "date_range": f"{start_utc} - {end_utc}",
        }


def cleanup_old_moments(engine) -> int:
    """
    –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –º–æ–º–µ–Ω—Ç—ã

    Args:
        engine: SQLAlchemy engine

    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
    """
    now_utc = datetime.now(UTC)

    with engine.connect() as conn:
        deleted = conn.execute(
            text("""
            DELETE FROM moments
            WHERE expires_at < :now_utc OR is_active = false
        """),
            {"now_utc": now_utc},
        ).rowcount

        conn.commit()

        print("‚ö° –û—á–∏—Å—Ç–∫–∞ –º–æ–º–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        print(f"   üìä –£–¥–∞–ª–µ–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤: {deleted}")

        return deleted
