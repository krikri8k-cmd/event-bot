"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

import logging
from datetime import UTC, datetime
from typing import Any
from urllib.parse import urlparse

from database import get_engine
from utils.simple_timezone import get_city_from_coordinates
from utils.unified_events_service import UnifiedEventsService

logger = logging.getLogger(__name__)


class ParserIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self):
        self.engine = get_engine()
        self.events_service = UnifiedEventsService(self.engine)

    async def save_parser_events(self, events: list[dict[str, Any]], source: str) -> int:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—Ä—Å–µ—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –ë–î

        Args:
            events: –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–±—ã—Ç–∏–π (baliforum, kudago, ai)

        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        """
        saved_count = 0

        for event in events:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                title = event.get("title", "")
                description = event.get("description", "")
                lat = event.get("lat")
                lng = event.get("lng")
                url = event.get("source_url", event.get("url", ""))

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏—è –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                if not lat or not lng:
                    logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {title}")
                    continue

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                city = get_city_from_coordinates(lat, lng)

                # –ò–∑–≤–ª–µ–∫–∞–µ–º external_id –∏–∑ URL
                external_id = self._extract_external_id(url, source)

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ UTC
                starts_at_utc = self._convert_time_to_utc(event, city)

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Å—Ç–æ
                venue = event.get("venue", {})
                location_name = venue.get("name", "")
                location_url = venue.get("address", "")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
                event_id = self.events_service.save_parser_event(
                    source=source,
                    external_id=external_id,
                    title=title,
                    description=description,
                    starts_at_utc=starts_at_utc,
                    city=city,
                    lat=lat,
                    lng=lng,
                    location_name=location_name,
                    location_url=location_url,
                    url=url,
                )

                saved_count += 1
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ ID {event_id}: {title}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è '{event.get('title', 'Unknown')}': {e}")
                continue

        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Å–æ–±—ã—Ç–∏–π –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source}")
        return saved_count

    def _extract_external_id(self, url: str, source: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç external_id –∏–∑ URL"""
        if not url:
            return f"{source}_unknown_{datetime.now().timestamp()}"

        try:
            # –î–ª—è BaliForum –∏–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ –ø—É—Ç–∏
            if source == "baliforum":
                parsed = urlparse(url)
                path_parts = parsed.path.strip("/").split("/")
                if len(path_parts) >= 2 and path_parts[0] == "events":
                    return path_parts[1]  # ID —Å–æ–±—ã—Ç–∏—è

            # –î–ª—è –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö—ç—à URL
            import hashlib

            return hashlib.md5(url.encode()).hexdigest()[:16]

        except Exception:
            return f"{source}_{datetime.now().timestamp()}"

    def _convert_time_to_utc(self, event: dict[str, Any], city: str) -> datetime:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤ UTC"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏
            start_time = event.get("start_time")
            time_local = event.get("time_local")

            if start_time and isinstance(start_time, datetime):
                # –ï—Å–ª–∏ —É–∂–µ datetime, –ø—Ä–æ–≤–µ—Ä—è–µ–º timezone
                if start_time.tzinfo is None:
                    # –ù–µ—Ç timezone, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≥–æ—Ä–æ–¥–∞
                    from utils.simple_timezone import get_timezone_for_city

                    tz = get_timezone_for_city(city)
                    start_time = start_time.replace(tzinfo=tz)

                return start_time.astimezone(UTC)

            elif time_local:
                # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏
                from utils.simple_timezone import get_timezone_for_city

                tz = get_timezone_for_city(city)

                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
                for fmt in ["%Y-%m-%d %H:%M", "%Y-%m-%d %H:%M:%S"]:
                    try:
                        dt = datetime.strptime(time_local, fmt)
                        dt = dt.replace(tzinfo=tz)
                        return dt.astimezone(UTC)
                    except ValueError:
                        continue

            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è: {event.get('title', 'Unknown')}")
            return datetime.now(UTC)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return datetime.now(UTC)

    async def run_parsers_and_save(self, lat: float, lng: float, radius_km: float = 15) -> dict[str, int]:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø–∞—Ä—Å–µ—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ –ë–î

        Args:
            lat: –®–∏—Ä–æ—Ç–∞
            lng: –î–æ–ª–≥–æ—Ç–∞
            radius_km: –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        """
        results = {}

        # BaliForum –ø–∞—Ä—Å–µ—Ä
        try:
            from sources.baliforum_source import BaliForumSource

            baliforum_source = BaliForumSource()
            if baliforum_source.is_enabled():
                logger.info("üå¥ –ó–∞–ø—É—Å–∫–∞–µ–º BaliForum –ø–∞—Ä—Å–µ—Ä...")
                events = await baliforum_source.fetch_events(lat, lng, radius_km)
                saved_count = await self.save_parser_events(events, "baliforum")
                results["baliforum"] = saved_count
            else:
                logger.info("üå¥ BaliForum –æ—Ç–∫–ª—é—á–µ–Ω")
                results["baliforum"] = 0

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ BaliForum: {e}")
            results["baliforum"] = 0

        # AI –ø–∞—Ä—Å–µ—Ä (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
        try:
            import os

            if os.getenv("AI_GENERATE_SYNTHETIC", "0").strip() == "1":
                from ai_utils import fetch_ai_events_nearby

                logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º AI –ø–∞—Ä—Å–µ—Ä...")
                events = await fetch_ai_events_nearby(lat, lng)
                saved_count = await self.save_parser_events(events, "ai")
                results["ai"] = saved_count
            else:
                logger.info("ü§ñ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
                results["ai"] = 0

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ AI –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
            results["ai"] = 0

        # KudaGo –ø–∞—Ä—Å–µ—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            from sources.kudago_source import KudaGoSource

            kudago_source = KudaGoSource()
            if kudago_source.is_enabled():
                logger.info("üé≠ –ó–∞–ø—É—Å–∫–∞–µ–º KudaGo –ø–∞—Ä—Å–µ—Ä...")
                events = await kudago_source.fetch_events(lat, lng, radius_km)
                saved_count = await self.save_parser_events(events, "kudago")
                results["kudago"] = saved_count
            else:
                logger.info("üé≠ KudaGo –æ—Ç–∫–ª—é—á–µ–Ω")
                results["kudago"] = 0

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ KudaGo: {e}")
            results["kudago"] = 0

        total_saved = sum(results.values())
        logger.info(f"üéØ –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {total_saved} –ø–∞—Ä—Å–µ—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")

        return results
