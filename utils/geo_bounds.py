#!/usr/bin/env python3
"""
–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–æ–¥—É–ª—å —Å —Ñ–ª–∞–≥–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false
"""

import logging
import math
import os
from dataclasses import dataclass

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (—Ñ–ª–∞–≥–∏ —á–∏—Ç–∞–µ–º —Ä–∞–∑–æ–≤–æ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ) ===
ENABLE_GEO_BOUNDS = os.getenv("ENABLE_GEO_BOUNDS", "false").lower() == "true"
RUSSIA_BOUNDS_ENABLED = os.getenv("RUSSIA_BOUNDS_ENABLED", "false").lower() == "true"

# –õ–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

# –ú–µ—Ç—Ä–∏–∫–∏ (—Å–æ–±–∏—Ä–∞—é—Ç—Å—è –¥–∞–∂–µ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ñ–ª–∞–≥–∞—Ö)
METRICS = {
    "ru_checked": 0,
    "ru_passed": 0,
    "ru_failed": 0,
    "checks_total": 0,
    "passed_total": 0,
    "failed_total": 0,
}


@dataclass(frozen=True)
class Circle:
    """–ö—Ä—É–≥ —Å —Ü–µ–Ω—Ç—Ä–æ–º –∏ —Ä–∞–¥–∏—É—Å–æ–º"""

    lat: float
    lon: float
    radius_km: float


@dataclass(frozen=True)
class Box:
    """–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å"""

    min_lat: float
    min_lon: float
    max_lat: float
    max_lon: float


def haversine_km(lat1: float, lon1: float, lat2: float, lon2: float) -> float:
    """
    –¢–æ—á–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –ø–æ —Ñ–æ—Ä–º—É–ª–µ Haversine
    """
    R = 6371.0  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
    dlat = math.radians(lat2 - lat1)
    dlon = math.radians(lon2 - lon1)
    a = math.sin(dlat / 2) ** 2 + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dlon / 2) ** 2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    return R * c


def in_circle(lat: float, lon: float, circle: Circle) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –≤–Ω—É—Ç—Ä–∏ –∫—Ä—É–≥–∞"""
    return haversine_km(lat, lon, circle.lat, circle.lon) <= circle.radius_km


def in_box(lat: float, lon: float, box: Box) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –≤–Ω—É—Ç—Ä–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞"""
    return box.min_lat <= lat <= box.max_lat and box.min_lon <= lon <= box.max_lon


# ======== –ü—Ä–µ–¥–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –†–§ (–ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø: –ú–æ—Å–∫–≤–∞ + –°–ü–±) ========

# –ë–æ–ª—å—à–∞—è ¬´–≥—Ä—É–±–∞—è¬ª —Ä–∞–º–∫–∞ –†–§ (—Å –∑–∞–ø–∞—Å–æ–º; –∏—Å–∫–ª—é—á–∞–µ—Ç —è–≤–Ω—ã–π –≤—ã—Ö–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã)
RUSSIA_BIG_BOX = Box(
    min_lat=41.0,
    min_lon=-180.0,  # –ó–∞–ø–∞–¥–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ (–≤–∫–ª—é—á–∞–µ—Ç –°–ü–±)
    max_lat=82.0,
    max_lon=180.0,  # –í–æ—Å—Ç–æ—á–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
)

# –ë–µ–ª—ã–µ –∑–æ–Ω—ã ‚Äî –≥–æ—Ä–æ–¥–∞ (—Ü–µ–Ω—Ç—Ä+—Ä–∞–¥–∏—É—Å) –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
RUSSIA_CITY_WHITELIST: dict[str, Circle] = {
    "moscow": Circle(55.7558, 37.6173, 60.0),  # –ú–æ—Å–∫–≤–∞ –∏ –æ–±–ª–∞—Å—Ç—å
    "spb": Circle(59.9343, 30.3351, 50.0),  # –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
}


def is_allowed_russia(lat: float, lon: float) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–æ–Ω–∞—Ö –†–æ—Å—Å–∏–∏
    –°–Ω–∞—á–∞–ª–∞ –æ–±—â–∏–π ¬´–±–æ–ª—å—à–æ–π –±–æ–∫—Å¬ª (–¥–µ—à—ë–≤—ã–π —Ñ–∏–ª—å—Ç—Ä)
    –ó–∞—Ç–µ–º –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ (—Å—Ç—Ä–æ–≥–∏–π —Ñ–∏–ª—å—Ç—Ä)
    """
    # –°–Ω–∞—á–∞–ª–∞ –æ–±—â–∏–π ¬´–±–æ–ª—å—à–æ–π –±–æ–∫—Å¬ª (–¥–µ—à—ë–≤—ã–π —Ñ–∏–ª—å—Ç—Ä)
    if not in_box(lat, lon, RUSSIA_BIG_BOX):
        logger.debug(f"–¢–æ—á–∫–∞ ({lat:.4f}, {lon:.4f}) –≤–Ω–µ –±–æ–ª—å—à–æ–≥–æ –±–æ–∫—Å–∞ –†–æ—Å—Å–∏–∏")
        return False

    # –ó–∞—Ç–µ–º –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ (—Å—Ç—Ä–æ–≥–∏–π —Ñ–∏–ª—å—Ç—Ä)
    for city_name, circle in RUSSIA_CITY_WHITELIST.items():
        if in_circle(lat, lon, circle):
            logger.debug(f"–¢–æ—á–∫–∞ ({lat:.4f}, {lon:.4f}) –≤ –∑–æ–Ω–µ –≥–æ—Ä–æ–¥–∞ {city_name}")
            return True

    logger.debug(f"–¢–æ—á–∫–∞ ({lat:.4f}, {lon:.4f}) –Ω–µ –≤ whitelist –≥–æ—Ä–æ–¥–æ–≤")
    return False


def is_allowed(lat: float, lon: float, country_code: str | None) -> bool:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≥–µ–æ-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.

    Args:
        lat: –®–∏—Ä–æ—Ç–∞
        lon: –î–æ–ª–≥–æ—Ç–∞
        country_code: –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã ('RU', 'ID', ...) –∏–ª–∏ None

    Returns:
        True –µ—Å–ª–∏ —Ç–æ—á–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞, False –µ—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞

    –õ–æ–≥–∏–∫–∞:
    - –ï—Å–ª–∏ —Ñ–ª–∞–≥–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã - –≤—Å–µ–≥–¥–∞ True (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
    - –î–ª—è RU: –ø—Ä–æ–≤–µ—Ä—è–µ–º whitelist –≥–æ—Ä–æ–¥–æ–≤
    - –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω: –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
    """
    # –í—Å–µ–≥–¥–∞ —Å–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –Ω–∞–±–ª—é–¥–∞–µ–º–æ—Å—Ç–∏
    METRICS["checks_total"] += 1

    # –ï—Å–ª–∏ –≥–µ–æ-—Ñ–∏–ª—å—Ç—Ä—ã –≤—ã–∫–ª—é—á–µ–Ω—ã - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ
    if not ENABLE_GEO_BOUNDS:
        METRICS["passed_total"] += 1
        return True

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
    if country_code == "RU":
        METRICS["ru_checked"] += 1

        # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –†–æ—Å—Å–∏–∏ –≤—ã–∫–ª—é—á–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if not RUSSIA_BOUNDS_ENABLED:
            METRICS["ru_passed"] += 1
            METRICS["passed_total"] += 1
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º whitelist –≥–æ—Ä–æ–¥–æ–≤
        if is_allowed_russia(lat, lon):
            METRICS["ru_passed"] += 1
            METRICS["passed_total"] += 1
            logger.debug(f"RU —Ç–æ—á–∫–∞ ({lat:.4f}, {lon:.4f}) –ø—Ä–æ—à–ª–∞ —Ñ–∏–ª—å—Ç—Ä")
            return True
        else:
            METRICS["ru_failed"] += 1
            METRICS["failed_total"] += 1
            logger.debug(f"RU —Ç–æ—á–∫–∞ ({lat:.4f}, {lon:.4f}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–æ–º")
            return False

    # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
    METRICS["passed_total"] += 1
    return True


def get_metrics() -> dict[str, int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏"""
    return METRICS.copy()


def reset_metrics() -> None:
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)"""
    for key in METRICS:
        METRICS[key] = 0


# ======== –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ========


def test_geo_bounds():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –≥–µ–æ-–≥—Ä–∞–Ω–∏—Ü"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–æ-–≥—Ä–∞–Ω–∏—Ü...")

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print("üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"  ENABLE_GEO_BOUNDS: {ENABLE_GEO_BOUNDS}")
    print(f"  RUSSIA_BOUNDS_ENABLED: {RUSSIA_BOUNDS_ENABLED}")
    print(f"  RUSSIA_BIG_BOX: {RUSSIA_BIG_BOX}")
    print(f"  RUSSIA_CITY_WHITELIST: {RUSSIA_CITY_WHITELIST}")

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏
    test_cases = [
        # (lat, lon, country, expected, description)
        (55.7558, 37.6173, "RU", True, "–ú–æ—Å–∫–≤–∞ - —Ü–µ–Ω—Ç—Ä"),
        (59.9343, 30.3351, "RU", True, "–°–ü–± - —Ü–µ–Ω—Ç—Ä"),
        (55.5, 37.5, "RU", True, "–ú–æ—Å–∫–≤–∞ - –æ–±–ª–∞—Å—Ç—å"),
        (59.5, 30.5, "RU", True, "–°–ü–± - –æ–±–ª–∞—Å—Ç—å"),
        (51.5074, -0.1278, "RU", False, "–õ–æ–Ω–¥–æ–Ω (–∫–∞–∫ RU)"),
        (0.0, -140.0, "RU", False, "–û–∫–µ–∞–Ω (–∫–∞–∫ RU)"),
        (55.7558, 37.6173, "ID", True, "–ú–æ—Å–∫–≤–∞ (–∫–∞–∫ ID) - –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å"),
        (55.7558, 37.6173, None, True, "–ú–æ—Å–∫–≤–∞ (–±–µ–∑ —Å—Ç—Ä–∞–Ω—ã) - –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å"),
    ]

    # –í–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)
    import sys

    current_module = sys.modules[__name__]
    original_enable = current_module.ENABLE_GEO_BOUNDS
    original_russia = current_module.RUSSIA_BOUNDS_ENABLED

    current_module.ENABLE_GEO_BOUNDS = True
    current_module.RUSSIA_BOUNDS_ENABLED = True

    try:
        passed = 0
        total = len(test_cases)

        for lat, lon, country, expected, description in test_cases:
            result = is_allowed(lat, lon, country)
            status = "‚úÖ" if result == expected else "‚ùå"
            print(f"  {status} {description}: {result} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected})")

            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
            if result != expected and country == "RU":
                print(f"    üîç –û—Ç–ª–∞–¥–∫–∞ –¥–ª—è ({lat}, {lon}):")
                print(f"      - –í –±–æ–ª—å—à–æ–º –±–æ–∫—Å–µ: {in_box(lat, lon, RUSSIA_BIG_BOX)}")
                for city_name, circle in RUSSIA_CITY_WHITELIST.items():
                    distance = haversine_km(lat, lon, circle.lat, circle.lon)
                    in_city = in_circle(lat, lon, circle)
                    print(f"      - {city_name}: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ {distance:.1f}–∫–º, –≤ –∫—Ä—É–≥–µ {in_city}")

            if result == expected:
                passed += 1

        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
        print(f"üìà –ú–µ—Ç—Ä–∏–∫–∏: {get_metrics()}")

        return passed == total

    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        current_module.ENABLE_GEO_BOUNDS = original_enable
        current_module.RUSSIA_BOUNDS_ENABLED = original_russia


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    test_geo_bounds()
