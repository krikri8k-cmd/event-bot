#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç–∞–º–∏
"""

import os
import socket
import subprocess
import sys


def find_free_port(start_port: int = 8000, max_attempts: int = 100) -> int:
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –Ω–∞—á–∏–Ω–∞—è —Å start_port

    Args:
        start_port: –ù–∞—á–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
        max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫

    Returns:
        –ù–æ–º–µ—Ä —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
    """
    for port in range(start_port, start_port + max_attempts):
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.bind(("0.0.0.0", port))
                return port
        except OSError:
            continue

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind(("0.0.0.0", 0))
        return s.getsockname()[1]


def kill_processes_on_port(port: int) -> bool:
    """
    –£–±–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã, –∑–∞–Ω–∏–º–∞—é—â–∏–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç (Windows)

    Args:
        port: –ù–æ–º–µ—Ä –ø–æ—Ä—Ç–∞

    Returns:
        True –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –±—ã–ª–∏ —É–±–∏—Ç—ã, False –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
    """
    try:
        # –ù–∞—Ö–æ–¥–∏–º PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É
        result = subprocess.run(["netstat", "-ano"], capture_output=True, text=True, check=True)

        for line in result.stdout.split("\n"):
            if f":{port}" in line and "LISTENING" in line:
                parts = line.split()
                if len(parts) >= 5:
                    pid = parts[-1]
                    try:
                        subprocess.run(["taskkill", "/PID", pid, "/F"], check=True)
                        print(f"‚úÖ –£–±–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å {pid} –Ω–∞ –ø–æ—Ä—Ç—É {port}")
                        return True
                    except subprocess.CalledProcessError:
                        continue

        return False
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É {port}: {e}")
        return False


def setup_environment(port: int, mode: str = "bot") -> None:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞

    Args:
        port: –ù–æ–º–µ—Ä –ø–æ—Ä—Ç–∞
        mode: –†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ ("bot" –∏–ª–∏ "api")
    """
    os.environ["PORT"] = str(port)

    if mode == "bot":
        os.environ["WEBHOOK_URL"] = f"http://127.0.0.1:{port}/webhook"
        os.environ["TELEGRAM_TOKEN"] = "dummy"  # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        os.environ["ENABLE_BALIFORUM"] = "1"
        print(f"ü§ñ Bot mode: PORT={port}, WEBHOOK_URL={os.environ['WEBHOOK_URL']}")
    elif mode == "api":
        os.environ["DATABASE_URL"] = (
            "postgresql://postgres:GHeScaRnEXJEPRRXpFGJCdTPgcQOtzlw@interchange.proxy.rlwy.net:23764/railway?sslmode=require"
        )
        os.environ["ENABLE_BALIFORUM"] = "1"
        print(f"üåê API mode: PORT={port}, API_URL=http://127.0.0.1:{port}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python port_manager.py <bot|api> [start_port]")
        sys.exit(1)

    mode = sys.argv[1]
    start_port = int(sys.argv[2]) if len(sys.argv) > 2 else 8000

    print(f"üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ {mode}...")

    # –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º –ø–æ—Ä—Ç—É
    if kill_processes_on_port(start_port):
        print(f"üßπ –û—á–∏—â–µ–Ω –ø–æ—Ä—Ç {start_port}")

    # –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç
    free_port = find_free_port(start_port)
    print(f"üîç –ù–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç: {free_port}")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    setup_environment(free_port, mode)

    print("‚úÖ –ì–æ—Ç–æ–≤–æ! –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")


if __name__ == "__main__":
    main()
