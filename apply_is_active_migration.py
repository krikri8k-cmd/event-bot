#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ is_active –≤ moments
"""

import os
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from database import get_engine, init_engine
from config import load_settings
from sqlalchemy import text

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def apply_is_active_migration():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è is_active –≤ moments"""
    try:
        # –ß–∏—Ç–∞–µ–º SQL –º–∏–≥—Ä–∞—Ü–∏—é
        migration_file = project_root / "migrations" / "004_add_is_active_to_moments.sql"
        
        if not migration_file.exists():
            logger.error(f"‚ùå –§–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {migration_file}")
            return False
            
        with open(migration_file, 'r', encoding='utf-8') as f:
            migration_sql = f.read()
        
        logger.info("üìÑ –ß–∏—Ç–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è is_active...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        settings = load_settings()
        init_engine(settings.database_url)
        engine = get_engine()
        
        with engine.connect() as conn:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
            logger.info("üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è is_active...")
            conn.execute(text(migration_sql))
            conn.commit()
            
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è is_active —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def check_is_active_field():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è is_active –≤ —Ç–∞–±–ª–∏—Ü–µ moments"""
    try:
        settings = load_settings()
        init_engine(settings.database_url)
        engine = get_engine()
        
        with engine.connect() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è is_active
            result = conn.execute(text("""
                SELECT EXISTS (
                    SELECT 1
                    FROM information_schema.columns
                    WHERE table_name = 'moments' AND column_name = 'is_active'
                );
            """))
            
            field_exists = result.scalar()
            
            if field_exists:
                logger.info("‚úÖ –ü–æ–ª–µ is_active —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ moments")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª—è
                result = conn.execute(text("""
                    SELECT column_name, data_type, is_nullable, column_default
                    FROM information_schema.columns 
                    WHERE table_name = 'moments' AND column_name = 'is_active';
                """))
                
                field_info = result.fetchone()
                if field_info:
                    logger.info(f"üìã –ü–æ–ª–µ is_active: {field_info[1]} {'NULL' if field_info[2] == 'YES' else 'NOT NULL'} {f'DEFAULT {field_info[3]}' if field_info[3] else ''}")
                
                return True
            else:
                logger.warning("‚ö†Ô∏è –ü–æ–ª–µ is_active –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ moments")
                return False
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—è is_active: {e}")
        return False

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ is_active...")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    if apply_is_active_migration():
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ is_active...")
        check_is_active_field()
        
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é")
        sys.exit(1)
