#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import logging

from sqlalchemy import inspect, text

from config import load_settings
from database import get_engine, init_engine

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def analyze_db_structure():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î"""
    print("üóÑÔ∏è –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 60)

    settings = load_settings()
    init_engine(settings.database_url)
    engine = get_engine()

    inspector = inspect(engine)

    print("üìä –¢–ê–ë–õ–ò–¶–´ –í –ë–ê–ó–ï –î–ê–ù–ù–´–•:")
    print("-" * 40)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    tables = inspector.get_table_names()
    views = inspector.get_view_names()

    print(f"üìã –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
    print(f"üëÅÔ∏è –í—Å–µ–≥–æ VIEW: {len(views)}")
    print()

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
    for table_name in sorted(tables):
        print(f"üóÇÔ∏è –¢–ê–ë–õ–ò–¶–ê: {table_name.upper()}")
        print("-" * 30)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
            columns = inspector.get_columns(table_name)

            print(f"üìù –ö–æ–ª–æ–Ω–∫–∏ ({len(columns)}):")
            for col in columns:
                nullable = "NULL" if col["nullable"] else "NOT NULL"
                default = f" DEFAULT {col['default']}" if col["default"] else ""
                print(f"   ‚Ä¢ {col['name']}: {col['type']} {nullable}{default}")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            indexes = inspector.get_indexes(table_name)
            if indexes:
                print(f"üîç –ò–Ω–¥–µ–∫—Å—ã ({len(indexes)}):")
                for idx in indexes:
                    cols = ", ".join(idx["column_names"])
                    unique = " UNIQUE" if idx["unique"] else ""
                    print(f"   ‚Ä¢ {idx['name']}: ({cols}){unique}")

            # –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
            foreign_keys = inspector.get_foreign_keys(table_name)
            if foreign_keys:
                print(f"üîó –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ ({len(foreign_keys)}):")
                for fk in foreign_keys:
                    ref_table = fk["referred_table"]
                    ref_cols = ", ".join(fk["referred_columns"])
                    cols = ", ".join(fk["constrained_columns"])
                    print(f"   ‚Ä¢ {cols} ‚Üí {ref_table}({ref_cols})")

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            with engine.connect() as conn:
                count_result = conn.execute(text(f"SELECT COUNT(*) FROM {table_name}")).fetchone()
                count = count_result[0] if count_result else 0
                print(f"üìä –ó–∞–ø–∏—Å–µ–π: {count}")

            print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
            print()

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º VIEW
    if views:
        print("üëÅÔ∏è VIEW –í –ë–ê–ó–ï –î–ê–ù–ù–´–•:")
        print("-" * 40)

        for view_name in sorted(views):
            print(f"üîç VIEW: {view_name.upper()}")
            print("-" * 20)

            try:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ VIEW
                columns = inspector.get_columns(view_name)

                print(f"üìù –ö–æ–ª–æ–Ω–∫–∏ ({len(columns)}):")
                for col in columns:
                    print(f"   ‚Ä¢ {col['name']}: {col['type']}")

                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                with engine.connect() as conn:
                    count_result = conn.execute(text(f"SELECT COUNT(*) FROM {view_name}")).fetchone()
                    count = count_result[0] if count_result else 0
                    print(f"üìä –ó–∞–ø–∏—Å–µ–π: {count}")

                print()

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ VIEW {view_name}: {e}")
                print()

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
    print("üîó –°–í–Ø–ó–ò –ú–ï–ñ–î–£ –¢–ê–ë–õ–ò–¶–ê–ú–ò:")
    print("-" * 40)

    for table_name in sorted(tables):
        foreign_keys = inspector.get_foreign_keys(table_name)
        if foreign_keys:
            print(f"üìã {table_name}:")
            for fk in foreign_keys:
                ref_table = fk["referred_table"]
                print(f"   ‚Üí {ref_table}")

    print()

    # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    print("üéØ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–ï –û–ü–ò–°–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶:")
    print("-" * 40)

    functional_descriptions = {
        "users": {
            "purpose": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ Telegram –±–æ—Ç–∞",
            "key_fields": "id, username, full_name, user_tz, last_lat, last_lng",
            "functionality": "–•—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏, –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞–¥–∏—É—Å–∞",
        },
        "events": {
            "purpose": "–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π",
            "key_fields": "id, title, starts_at, lat, lng, source",
            "functionality": "–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Å–æ–±—ã—Ç–∏—è–º (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ + –ø–∞—Ä—Å–µ—Ä–Ω—ã–µ)",
        },
        "events_user": {
            "purpose": "–°–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
            "key_fields": "id, title, starts_at, lat, lng, organizer_id",
            "functionality": "–•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
        },
        "events_parser": {
            "purpose": "–°–æ–±—ã—Ç–∏—è –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä–∞–º–∏",
            "key_fields": "id, title, starts_at, lat, lng, source, external_id",
            "functionality": "–•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (BaliForum, KudaGo, Meetup)",
        },
        "moments": {
            "purpose": "–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ)",
            "key_fields": "id, title, expires_at, lat, lng, creator_id",
            "functionality": "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Å TTL, –∏—Å—á–µ–∑–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
        },
    }

    for table_name, desc in functional_descriptions.items():
        if table_name in tables:
            print(f"üìã {table_name.upper()}:")
            print(f"   üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {desc['purpose']}")
            print(f"   üîë –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è: {desc['key_fields']}")
            print(f"   ‚öôÔ∏è –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: {desc['functionality']}")
            print()

    # VIEW —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    print("üëÅÔ∏è –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨ VIEW:")
    print("-" * 40)

    view_descriptions = {
        "events_all_bali": "–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –ë–∞–ª–∏",
        "events_all_msk": "–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –ú–æ—Å–∫–≤—ã",
        "events_all_spb": "–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –°–ü–±",
    }

    for view_name, desc in view_descriptions.items():
        if view_name in views:
            print(f"üîç {view_name.upper()}:")
            print(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {desc}")
            print()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await analyze_db_structure()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)
