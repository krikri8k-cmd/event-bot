#!/usr/bin/env python3
"""
–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏ —Å–æ–±—ã—Ç–∏–π
"""

import os
import sys
from datetime import datetime
from dotenv import load_dotenv
from sqlalchemy import create_engine, text


def main():
    print("üöÄ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏ —Å–æ–±—ã—Ç–∏–π")
    print("=" * 60)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv("app.local.env")

    database_url = os.getenv("DATABASE_URL")
    if not database_url:
        print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ app.local.env")
        sys.exit(1)

    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    engine = create_engine(database_url)

    try:
        with engine.begin() as conn:
            print("üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã
            result = conn.execute(
                text("""
                SELECT status, COUNT(*) as count
                FROM events 
                GROUP BY status 
                ORDER BY status
            """)
            ).fetchall()

            print("–¢–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã:")
            for row in result:
                print(f"  - {row[0]}: {row[1]} —Å–æ–±—ã—Ç–∏–π")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ organizer_id
            null_organizer = conn.execute(
                text("""
                SELECT COUNT(*) FROM events WHERE organizer_id IS NULL
            """)
            ).scalar()

            if null_organizer > 0:
                print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {null_organizer} —Å–æ–±—ã—Ç–∏–π –±–µ–∑ organizer_id")
                print("   –≠—Ç–∏ –∑–∞–ø–∏—Å–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ starts_at
            null_starts = conn.execute(
                text("""
                SELECT COUNT(*) FROM events WHERE starts_at IS NULL
            """)
            ).scalar()

            if null_starts > 0:
                print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {null_starts} —Å–æ–±—ã—Ç–∏–π –±–µ–∑ starts_at")
                print("   –≠—Ç–∏ –∑–∞–ø–∏—Å–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ")

            print("\nüîß –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é...")

            # 1. –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç–∞—Ç—É—Å—ã
            updated_status = conn.execute(
                text("""
                UPDATE events 
                SET status = 'open' 
                WHERE status IS NULL OR status = ''
            """)
            ).rowcount

            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_status} –∑–∞–ø–∏—Å–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º")

            # 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º default –¥–ª—è status
            conn.execute(
                text("""
                ALTER TABLE events 
                ALTER COLUMN status SET DEFAULT 'open'
            """)
            )
            print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω default —Å—Ç–∞—Ç—É—Å 'open'")

            # 3. –î–æ–±–∞–≤–ª—è–µ–º CHECK –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
            try:
                conn.execute(
                    text("""
                    ALTER TABLE events 
                    ADD CONSTRAINT events_status_check 
                    CHECK (status IN ('open', 'closed', 'canceled', 'active', 'draft'))
                """)
                )
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤")
            except Exception as e:
                if "already exists" in str(e):
                    print("‚ÑπÔ∏è  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    raise

            # 4. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            try:
                conn.execute(
                    text("""
                    CREATE INDEX IF NOT EXISTS idx_events_status_starts_at 
                    ON events (status, starts_at)
                """)
                )
                print("‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ –¥–∞—Ç–µ")
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: {e}")

            try:
                conn.execute(
                    text("""
                    CREATE INDEX IF NOT EXISTS idx_events_organizer_status 
                    ON events (organizer_id, status)
                """)
                )
                print("‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É –∏ —Å—Ç–∞—Ç—É—Å—É")
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: {e}")

            # 5. –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏
            conn.execute(
                text("""
                CREATE OR REPLACE FUNCTION auto_close_events()
                RETURNS INTEGER AS $$
                DECLARE
                    closed_count INTEGER;
                BEGIN
                    UPDATE events
                    SET status = 'closed', 
                        updated_at_utc = NOW()
                    WHERE status = 'open'
                      AND starts_at::date < CURRENT_DATE;

                    GET DIAGNOSTICS closed_count = ROW_COUNT;

                    RETURN closed_count;
                END;
                $$ LANGUAGE plpgsql
            """)
            )
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏")

            # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            closed_count = conn.execute(text("SELECT auto_close_events()")).scalar()
            print(f"‚úÖ –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è: –∑–∞–∫—Ä—ã—Ç–æ {closed_count} —Å–æ–±—ã—Ç–∏–π")

            print("\nüìä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
            result = conn.execute(
                text("""
                SELECT status, COUNT(*) as count
                FROM events 
                GROUP BY status 
                ORDER BY status
            """)
            ).fetchall()

            for row in result:
                print(f"  - {row[0]}: {row[1]} —Å–æ–±—ã—Ç–∏–π")

            print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!")
            print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã: open, closed, canceled")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
