#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏
"""

import asyncio
import logging
from datetime import datetime, timedelta

from sqlalchemy import text

from config import load_settings
from database import get_engine, init_engine

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def diagnose_user_events():
    """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –°–û–ë–´–¢–ò–ô")
    print("=" * 50)

    settings = load_settings()
    init_engine(settings.database_url)
    engine = get_engine()

    with engine.connect() as conn:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
        print("\n1Ô∏è‚É£ –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶")
        print("-" * 30)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        tables_result = conn.execute(
            text("""
            SELECT table_name
            FROM information_schema.tables
            WHERE table_schema = 'public'
            AND table_name LIKE 'events%'
            ORDER BY table_name
        """)
        ).fetchall()

        existing_tables = [row[0] for row in tables_result]
        print(f"üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {existing_tables}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É events_user
        if "events_user" in existing_tables:
            print("\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã events_user:")
            columns_result = conn.execute(
                text("""
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns
                WHERE table_name = 'events_user'
                ORDER BY ordinal_position
            """)
            ).fetchall()

            for col in columns_result:
                nullable = "NULL" if col[2] == "YES" else "NOT NULL"
                default = f" DEFAULT {col[3]}" if col[3] else ""
                print(f"   - {col[0]}: {col[1]} {nullable}{default}")
        else:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ events_user –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
        print("\n2Ô∏è‚É£ –î–ê–ù–ù–´–ï –í –¢–ê–ë–õ–ò–¶–ê–•")
        print("-" * 30)

        # –°—á–∏—Ç–∞–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
        parser_count = conn.execute(text("SELECT COUNT(*) FROM events_parser")).scalar()
        user_count = conn.execute(text("SELECT COUNT(*) FROM events_user")).scalar()

        print(f"üìä events_parser: {parser_count} —Å–æ–±—ã—Ç–∏–π")
        print(f"üë§ events_user: {user_count} —Å–æ–±—ã—Ç–∏–π")

        # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
        if user_count > 0:
            print("\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è:")
            recent_events = conn.execute(
                text("""
                SELECT id, title, starts_at, lat, lng, country, city, organizer_id, created_at_utc
                FROM events_user
                ORDER BY created_at_utc DESC
                LIMIT 5
            """)
            ).fetchall()

            for event in recent_events:
                print(f"   ID {event[0]}: '{event[1][:40]}...'")
                print(f"      –í—Ä–µ–º—è: {event[2]}")
                print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({event[3]}, {event[4]})")
                print(f"      –†–µ–≥–∏–æ–Ω: {event[5]}/{event[6]}")
                print(f"      –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {event[7]}")
                print(f"      –°–æ–∑–¥–∞–Ω–æ: {event[8]}")
                print()
        else:
            print("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç –≤ –ë–î")

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        print("\n3Ô∏è‚É£ –°–û–ë–´–¢–ò–Ø –ü–û –†–ï–ì–ò–û–ù–ê–ú")
        print("-" * 30)

        # –ü–∞—Ä—Å–µ—Ä —Å–æ–±—ã—Ç–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        parser_regions = conn.execute(
            text("""
            SELECT country, city, COUNT(*)
            FROM events_parser
            GROUP BY country, city
            ORDER BY COUNT(*) DESC
        """)
        ).fetchall()

        print("üìä –°–æ–±—ã—Ç–∏—è –æ—Ç –ø–∞—Ä—Å–µ—Ä–æ–≤:")
        for region in parser_regions:
            print(f"   {region[0] or 'NULL'}/{region[1] or 'NULL'}: {region[2]} —Å–æ–±—ã—Ç–∏–π")

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        user_regions = conn.execute(
            text("""
            SELECT country, city, COUNT(*)
            FROM events_user
            GROUP BY country, city
            ORDER BY COUNT(*) DESC
        """)
        ).fetchall()

        print("\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è:")
        for region in user_regions:
            print(f"   {region[0] or 'NULL'}/{region[1] or 'NULL'}: {region[2]} —Å–æ–±—ã—Ç–∏–π")

        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        print("\n4Ô∏è‚É£ –°–û–ë–´–¢–ò–Ø –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 24 –ß–ê–°–ê")
        print("-" * 30)

        yesterday = datetime.utcnow() - timedelta(hours=24)

        recent_parser = conn.execute(
            text("""
            SELECT COUNT(*) FROM events_parser
            WHERE created_at_utc >= :yesterday
        """),
            {"yesterday": yesterday},
        ).scalar()

        recent_user = conn.execute(
            text("""
            SELECT COUNT(*) FROM events_user
            WHERE created_at_utc >= :yesterday
        """),
            {"yesterday": yesterday},
        ).scalar()

        print(f"üìä –ù–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –æ—Ç –ø–∞—Ä—Å–µ—Ä–æ–≤: {recent_parser}")
        print(f"üë§ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π: {recent_user}")

        # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π
        print("\n5Ô∏è‚É£ –¢–ï–°–¢ –ü–û–ò–°–ö–ê –°–û–ë–´–¢–ò–ô")
        print("-" * 30)

        # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–ú–æ—Å–∫–≤–∞)
        test_lat, test_lng = 55.7558, 37.6173
        test_radius = 10

        print(f"üîç –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞–¥–∏—É—Å–µ {test_radius} –∫–º –æ—Ç ({test_lat}, {test_lng})")

        # –ü–æ–∏—Å–∫ –≤ events_parser
        parser_events = conn.execute(
            text("""
            SELECT id, title, lat, lng, country, city
            FROM events_parser
            WHERE lat IS NOT NULL AND lng IS NOT NULL
            AND (
                6371 * acos(
                    cos(radians(:lat)) * cos(radians(lat)) *
                    cos(radians(lng) - radians(:lng)) +
                    sin(radians(:lat)) * sin(radians(lat))
                )
            ) <= :radius
            AND starts_at > NOW()
            LIMIT 5
        """),
            {"lat": test_lat, "lng": test_lng, "radius": test_radius},
        ).fetchall()

        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –æ—Ç –ø–∞—Ä—Å–µ—Ä–æ–≤: {len(parser_events)}")
        for event in parser_events:
            print(f"   - '{event[1][:30]}...' ({event[4]}/{event[5]})")

        # –ü–æ–∏—Å–∫ –≤ events_user
        user_events = conn.execute(
            text("""
            SELECT id, title, lat, lng, country, city
            FROM events_user
            WHERE lat IS NOT NULL AND lng IS NOT NULL
            AND (
                6371 * acos(
                    cos(radians(:lat)) * cos(radians(lat)) *
                    cos(radians(lng) - radians(:lng)) +
                    sin(radians(:lat)) * sin(radians(lat))
                )
            ) <= :radius
            AND starts_at > NOW()
            LIMIT 5
        """),
            {"lat": test_lat, "lng": test_lng, "radius": test_radius},
        ).fetchall()

        print(f"üë§ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π: {len(user_events)}")
        for event in user_events:
            print(f"   - '{event[1][:30]}...' ({event[4]}/{event[5]})")

        # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º EventsService
        print("\n6Ô∏è‚É£ –¢–ï–°–¢ EVENTSERVICE")
        print("-" * 30)

        try:
            from storage.events_service import EventsService
            from storage.region_router import Region

            events_service = EventsService(engine)

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö
            for region in [Region.MOSCOW, Region.SPB, Region.BALI]:
                events = await events_service.find_events_by_region(
                    region=region,
                    center_lat=test_lat if region == Region.MOSCOW else (59.9343 if region == Region.SPB else -8.5069),
                    center_lng=test_lng if region == Region.MOSCOW else (30.3351 if region == Region.SPB else 115.2625),
                    radius_km=test_radius,
                    days_ahead=7,
                )
                print(f"üåç {region.value}: {len(events)} —Å–æ–±—ã—Ç–∏–π")

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
                parser_count = sum(1 for e in events if e.get("event_type") == "parser")
                user_count = sum(1 for e in events if e.get("event_type") == "user")
                print(f"   üìä –ü–∞—Ä—Å–µ—Ä: {parser_count}, üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_count}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ EventsService: {e}")

        print("\n" + "=" * 50)
        print("üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")

        # –ò—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã
        print("\nüìã –ò–¢–û–ì–û–í–´–ï –í–´–í–û–î–´:")
        if user_count == 0:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç –≤ –ë–î")
            print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - –°–æ–±—ã—Ç–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏")
            print("   - –ü—Ä–æ–±–ª–µ–º–∞ —Å EventsService.upsert_user_event")
            print("   - –û—à–∏–±–∫–∞ –≤ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏")
        elif len(user_events) == 0:
            print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: –°–æ–±—ã—Ç–∏—è –µ—Å—Ç—å –≤ –ë–î, –Ω–æ –Ω–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–æ–∏—Å–∫–µ")
            print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
            print("   - –ü—Ä–æ–±–ª–µ–º–∞ —Å –≥–µ–æ–ø–æ–∏—Å–∫–æ–º")
            print("   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è")
        else:
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

        return True


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await diagnose_user_events()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)
