#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ–±–ª–µ–º —Å –±–æ—Ç–æ–º
"""

import asyncio
import logging

from sqlalchemy import text

from config import load_settings
from database import get_engine, init_engine

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def debug_current_issues():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ–±–ª–µ–º"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¢–ï–ö–£–©–ò–• –ü–†–û–ë–õ–ï–ú")
    print("=" * 50)

    settings = load_settings()
    init_engine(settings.database_url)
    engine = get_engine()

    with engine.connect() as conn:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –ë–î
        print("\n1Ô∏è‚É£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –°–û–ë–´–¢–ò–Ø –í –ë–î")
        print("-" * 40)

        # –°—á–∏—Ç–∞–µ–º –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
        total_user_events = conn.execute(text("SELECT COUNT(*) FROM events_user")).scalar()
        print(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π: {total_user_events}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        user_regions = conn.execute(
            text("""
            SELECT country, city, COUNT(*)
            FROM events_user
            GROUP BY country, city
            ORDER BY COUNT(*) DESC
        """)
        ).fetchall()

        print("\nüåç –°–æ–±—ã—Ç–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º:")
        for region in user_regions:
            print(f"   {region[0] or 'NULL'}/{region[1] or 'NULL'}: {region[2]} —Å–æ–±—ã—Ç–∏–π")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        recent_events = conn.execute(
            text("""
            SELECT id, title, starts_at, lat, lng, country, city, organizer_id, created_at_utc
            FROM events_user
            ORDER BY created_at_utc DESC
            LIMIT 10
        """)
        ).fetchall()

        print("\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π:")
        for event in recent_events:
            print(f"   ID {event[0]}: '{event[1][:30]}...'")
            print(f"      –í—Ä–µ–º—è: {event[2]}")
            print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({event[3] or 'NULL'}, {event[4] or 'NULL'})")
            print(f"      –†–µ–≥–∏–æ–Ω: {event[5] or 'NULL'}/{event[6] or 'NULL'}")
            print(f"      –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {event[7]}")
            print(f"      –°–æ–∑–¥–∞–Ω–æ: {event[8]}")
            print()

        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ë–∞–ª–∏ (–∫–∞–∫ –≤ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
        print("\n2Ô∏è‚É£ –¢–ï–°–¢ –ü–û–ò–°–ö–ê –î–õ–Ø –ë–ê–õ–ò")
        print("-" * 40)

        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ë–∞–ª–∏ (–∫–∞–∫ –≤ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ —Å —Å–æ–±—ã—Ç–∏–µ–º "–î–∏—Ä–∫–∞")
        bali_lat, bali_lng = -8.6500, 115.2167  # Denpasar, Bali
        test_radius = 5

        print(f"üîç –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞–¥–∏—É—Å–µ {test_radius} –∫–º –æ—Ç –ë–∞–ª–∏ ({bali_lat}, {bali_lng})")

        # –ü–æ–∏—Å–∫ –≤ events_user –¥–ª—è –ë–∞–ª–∏
        bali_user_events = conn.execute(
            text("""
            SELECT id, title, lat, lng, country, city, starts_at
            FROM events_user
            WHERE lat IS NOT NULL AND lng IS NOT NULL
            AND (
                6371 * acos(
                    cos(radians(:lat)) * cos(radians(lat)) *
                    cos(radians(lng) - radians(:lng)) +
                    sin(radians(:lat)) * sin(radians(lat))
                )
            ) <= :radius
            AND starts_at > NOW()
            ORDER BY starts_at ASC
            LIMIT 10
        """),
            {"lat": bali_lat, "lng": bali_lng, "radius": test_radius},
        ).fetchall()

        print(f"üë§ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –≤ –ë–∞–ª–∏: {len(bali_user_events)}")
        for event in bali_user_events:
            print(f"   - '{event[1]}' ({event[4]}/{event[5]}) - {event[6]}")

        # –ü–æ–∏—Å–∫ –≤ events_parser –¥–ª—è –ë–∞–ª–∏
        bali_parser_events = conn.execute(
            text("""
            SELECT id, title, lat, lng, country, city, starts_at, source
            FROM events_parser
            WHERE lat IS NOT NULL AND lng IS NOT NULL
            AND (
                6371 * acos(
                    cos(radians(:lat)) * cos(radians(lat)) *
                    cos(radians(lng) - radians(:lng)) +
                    sin(radians(:lat)) * sin(radians(lat))
                )
            ) <= :radius
            AND starts_at > NOW()
            ORDER BY starts_at ASC
            LIMIT 10
        """),
            {"lat": bali_lat, "lng": bali_lng, "radius": test_radius},
        ).fetchall()

        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –æ—Ç –ø–∞—Ä—Å–µ—Ä–æ–≤ –≤ –ë–∞–ª–∏: {len(bali_parser_events)}")
        for event in bali_parser_events:
            print(f"   - '{event[1]}' ({event[4]}/{event[5]}) - {event[7]}")

        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º EventsService
        print("\n3Ô∏è‚É£ –¢–ï–°–¢ EVENTSERVICE")
        print("-" * 40)

        try:
            from storage.events_service import EventsService
            from storage.region_router import Region

            events_service = EventsService(engine)

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –≤ –ë–∞–ª–∏
            bali_events = await events_service.find_events_by_region(
                region=Region.BALI, center_lat=bali_lat, center_lng=bali_lng, radius_km=test_radius, days_ahead=7
            )

            print(f"üåç EventsService –¥–ª—è –ë–∞–ª–∏: {len(bali_events)} —Å–æ–±—ã—Ç–∏–π")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
            parser_count = sum(1 for e in bali_events if e.get("event_type") == "parser")
            user_count = sum(1 for e in bali_events if e.get("event_type") == "user")

            print(f"   üìä –ü–∞—Ä—Å–µ—Ä: {parser_count}, üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_count}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–æ–±—ã—Ç–∏–π
            if bali_events:
                print("\nüìã –ü—Ä–∏–º–µ—Ä—ã —Å–æ–±—ã—Ç–∏–π –∏–∑ EventsService:")
                for event in bali_events[:5]:
                    print(f"   - '{event['title'][:30]}...' [{event.get('event_type', 'unknown')}]")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ EventsService: {e}")

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ NULL
        print("\n4Ô∏è‚É£ –°–û–ë–´–¢–ò–Ø –ë–ï–ó –ö–û–û–†–î–ò–ù–ê–¢")
        print("-" * 40)

        null_coords_events = conn.execute(
            text("""
            SELECT COUNT(*)
            FROM events_user
            WHERE lat IS NULL OR lng IS NULL
        """)
        ).scalar()

        print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {null_coords_events}")

        if null_coords_events > 0:
            print("\nüìã –ü—Ä–∏–º–µ—Ä—ã —Å–æ–±—ã—Ç–∏–π –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:")
            examples = conn.execute(
                text("""
                SELECT id, title, lat, lng, country, city
                FROM events_user
                WHERE lat IS NULL OR lng IS NULL
                LIMIT 5
            """)
            ).fetchall()

            for event in examples:
                print(f"   ID {event[0]}: '{event[1][:30]}...'")
                print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({event[2]}, {event[3]})")
                print(f"      –†–µ–≥–∏–æ–Ω: {event[4] or 'NULL'}/{event[5] or 'NULL'}")

        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–µ–≥–∏–æ–Ω–∞–º–∏
        print("\n5Ô∏è‚É£ –°–û–ë–´–¢–ò–Ø –° –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –†–ï–ì–ò–û–ù–ê–ú–ò")
        print("-" * 40)

        wrong_region_events = conn.execute(
            text("""
            SELECT COUNT(*)
            FROM events_user
            WHERE country IS NULL OR city IS NULL
        """)
        ).scalar()

        print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π —Å NULL —Ä–µ–≥–∏–æ–Ω–∞–º–∏: {wrong_region_events}")

        print("\n" + "=" * 50)
        print("üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")

        # –ò—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã
        print("\nüìã –ò–¢–û–ì–û–í–´–ï –í–´–í–û–î–´:")

        if total_user_events == 0:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç –≤ –ë–î")
        elif len(bali_user_events) == 0:
            print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: –°–æ–±—ã—Ç–∏—è –µ—Å—Ç—å –≤ –ë–î, –Ω–æ –Ω–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–æ–∏—Å–∫–µ –¥–ª—è –ë–∞–ª–∏")
            if null_coords_events > 0:
                print("üí° –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: –°–æ–±—ã—Ç–∏—è –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
            if wrong_region_events > 0:
                print("üí° –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: –°–æ–±—ã—Ç–∏—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–µ–≥–∏–æ–Ω–∞–º–∏")
        else:
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–æ–∏—Å–∫–µ –¥–ª—è –ë–∞–ª–∏")

        if len(bali_events) == 0:
            print("‚ùå EventsService –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ë–∞–ª–∏")
        else:
            print(f"‚úÖ EventsService –Ω–∞—Ö–æ–¥–∏—Ç {len(bali_events)} —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ë–∞–ª–∏")

        return True


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await debug_current_issues()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)
