#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–µ–∫—Ç–∞
"""

import asyncio
import subprocess
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))


def run_command(cmd, description):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"üîß {description}")
    print(f"   –ö–æ–º–∞–Ω–¥–∞: {cmd}")

    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=60)
        if result.returncode == 0:
            print("   ‚úÖ –£—Å–ø–µ—à–Ω–æ")
            if result.stdout.strip():
                print(f"   –í—ã–≤–æ–¥: {result.stdout.strip()}")
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ (–∫–æ–¥ {result.returncode})")
            if result.stderr.strip():
                print(f"   –û—à–∏–±–∫–∞: {result.stderr.strip()}")
            return False
    except subprocess.TimeoutExpired:
        print("   ‚è∞ –¢–∞–π–º–∞—É—Ç")
        return False
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False


async def run_async_command(script_path, description, *args):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç"""
    print(f"üîß {description}")
    print(f"   –°–∫—Ä–∏–ø—Ç: {script_path} {' '.join(args)}")

    try:
        cmd = [sys.executable, script_path] + list(args)
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=120)
        if result.returncode == 0:
            print("   ‚úÖ –£—Å–ø–µ—à–Ω–æ")
            if result.stdout.strip():
                print(f"   –í—ã–≤–æ–¥: {result.stdout.strip()}")
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ (–∫–æ–¥ {result.returncode})")
            if result.stderr.strip():
                print(f"   –û—à–∏–±–∫–∞: {result.stderr.strip()}")
            return False
    except subprocess.TimeoutExpired:
        print("   ‚è∞ –¢–∞–π–º–∞—É—Ç")
        return False
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""

    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–µ–∫—Ç–∞")
    print("=" * 60)
    print()

    checks = []

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω—Ç–µ—Ä–æ–≤
    print("1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –õ–ò–ù–¢–ï–†–û–í")
    print("-" * 30)

    checks.append(("–õ–∏–Ω—Ç–µ—Ä ruff", run_command("python -m ruff check . --select=E,W,F", "–ü—Ä–æ–≤–µ—Ä–∫–∞ ruff")))
    checks.append(("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ black", run_command("python -m black . --check", "–ü—Ä–æ–≤–µ—Ä–∫–∞ black")))

    print()

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print("-" * 30)

    config_ok = await run_async_command("tools/check_config.py", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    checks.append(("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", config_ok))

    print()

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("-" * 30)

    db_ok = await run_async_command("tools/check_database.py", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    checks.append(("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", db_ok))

    print()

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
    print("4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–û–í")
    print("-" * 30)

    import_checks = [
        (
            "utils.geo_utils",
            "from utils.geo_utils import haversine_km, bbox_around, validate_coordinates",
        ),
        ("api.services.events", "from api.services.events import get_events_nearby"),
        (
            "bot_enhanced_v3",
            "from bot_enhanced_v3 import prepare_events_for_feed, render_event_html",
        ),
        ("config", "from config import load_settings"),
    ]

    for module, import_cmd in import_checks:
        import_ok = run_command(f'python -c "{import_cmd}"', f"–ò–º–ø–æ—Ä—Ç {module}")
        checks.append((f"–ò–º–ø–æ—Ä—Ç {module}", import_ok))

    print()

    # 5. Dry-run —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("5Ô∏è‚É£ DRY-RUN –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
    print("-" * 30)

    dry_run_ok = await run_async_command(
        "tools/dry_run.py",
        "Dry-run —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "--lat",
        "-8.5069",
        "--lng",
        "115.2625",
        "--radius",
        "10",
    )
    checks.append(("Dry-run —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", dry_run_ok))

    print()

    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤
    print("6Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –¢–ï–°–¢–û–í")
    print("-" * 30)

    test_checks = [
        (
            "–¢–µ—Å—Ç haversine",
            run_command(
                'python -c "from utils.geo_utils import haversine_km; '
                "print('‚úÖ haversine_km —Ä–∞–±–æ—Ç–∞–µ—Ç:', haversine_km(-8.65, 115.22, -8.65, 115.22))\"",
                "–¢–µ—Å—Ç haversine_km",
            ),
        ),
        (
            "–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
            run_command(
                'python -c "from config import load_settings; s=load_settings(); '
                "print('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è:', s.default_radius_km)\"",
                "–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
            ),
        ),
    ]

    for test_name, test_ok in test_checks:
        checks.append((test_name, test_ok))

    print()

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)

    passed = sum(1 for _, ok in checks if ok)
    total = len(checks)

    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
    print()

    print("–î–µ—Ç–∞–ª–∏:")
    for check_name, ok in checks:
        status = "‚úÖ" if ok else "‚ùå"
        print(f"  {status} {check_name}")

    print()

    if passed == total:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("–ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üöÄ")
        return True
    else:
        print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´!")
        print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞.")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
