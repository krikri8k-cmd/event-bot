#!/usr/bin/env python3
"""
Dry-run —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π
–ò–º–∏—Ç–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞
"""

import argparse
import asyncio
import logging
import sys
from datetime import UTC, datetime, timedelta
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from config import load_settings
from database import init_engine
from enhanced_event_search import enhanced_search_events
from utils.geo_utils import haversine_km

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)


async def dry_run_search(lat: float, lng: float, radius_km: float, when: str = "today", verbose: bool = False):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç dry-run –ø–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π"""

    print("üîç Dry-run –ø–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π")
    print(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({lat}, {lng})")
    print(f"üìè –†–∞–¥–∏—É—Å: {radius_km} –∫–º")
    print(f"üìÖ –í—Ä–µ–º—è: {when}")
    print("-" * 50)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    settings = load_settings()
    init_engine(settings.database_url)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
    now = datetime.now(UTC)
    if when == "today":
        start_time = now.replace(hour=0, minute=0, second=0, microsecond=0)
        end_time = start_time + timedelta(days=1)
    elif when == "tomorrow":
        start_time = now.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1)
        end_time = start_time + timedelta(days=1)
    elif when == "week":
        start_time = now
        end_time = now + timedelta(days=7)
    else:
        start_time = now
        end_time = now + timedelta(days=1)

    print(f"‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {start_time.strftime('%Y-%m-%d %H:%M')} - {end_time.strftime('%Y-%m-%d %H:%M')}")

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        start_search = datetime.now()
        events, diag = await enhanced_search_events(
            lat=lat,
            lng=lng,
            radius_km=radius_km,
            start_time=start_time,
            end_time=end_time,
            verbose=verbose,
        )
        search_duration = (datetime.now() - start_search).total_seconds()

        print(f"‚è±Ô∏è –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {search_duration:.2f} —Å–µ–∫")
        print()

        # –í—ã–≤–æ–¥–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        print("üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:")
        print(f"  ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {diag.get('in', 0)}")
        print(f"  ‚Ä¢ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {diag.get('dropped', 0)}")
        print(f"  ‚Ä¢ –ò—Ç–æ–≥–æ–≤—ã—Ö: {len(events)}")

        found_by_stream = diag.get("found_by_stream", {})
        print("  ‚Ä¢ –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
        print(f"    - ICS: {found_by_stream.get('ics', 0)}")
        print(f"    - Meetup: {found_by_stream.get('meetup', 0)}")
        print(f"    - AI: {found_by_stream.get('ai', 0)}")
        print(f"    - –ú–æ–º–µ–Ω—Ç—ã: {found_by_stream.get('moments', 0)}")

        kept_by_type = diag.get("kept_by_type", {})
        print("  ‚Ä¢ –ü–æ —Ç–∏–ø–∞–º:")
        print(f"    - –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {kept_by_type.get('source', 0)}")
        print(f"    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ: {kept_by_type.get('user', 0)}")
        print(f"    - AI: {kept_by_type.get('ai_parsed', 0)}")

        print()

        # –í—ã–≤–æ–¥–∏–º —Å–æ–±—ã—Ç–∏—è
        if events:
            print(f"üéâ –ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π:")
            print()

            for i, event in enumerate(events[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"{i}. {event.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                print(f"   üìÖ {event.get('time_local', '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
                print(f"   üìç {event.get('location_name', '–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫–∏
                source_url = event.get("source_url") or event.get("url")
                if source_url:
                    print(f"   üîó –ò—Å—Ç–æ—á–Ω–∏–∫: {source_url}")
                else:
                    print("   üîó –ò—Å—Ç–æ—á–Ω–∏–∫: –Ω–µ —É–∫–∞–∑–∞–Ω")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                event_lat = event.get("lat")
                event_lng = event.get("lng")
                if event_lat and event_lng:
                    distance = haversine_km(lat, lng, event_lat, event_lng)
                    print(f"   üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.1f} –∫–º")

                print(f"   üè∑Ô∏è –¢–∏–ø: {event.get('type', 'unknown')}")
                print()

            if len(events) > 10:
                print(f"... –∏ –µ—â–µ {len(events) - 10} —Å–æ–±—ã—Ç–∏–π")
        else:
            print("üòî –°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print()
            print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("  ‚Ä¢ –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ")
            print("  ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö")
            print("  ‚Ä¢ –û—à–∏–±–∫–∏ –≤ –ø–∞—Ä—Å–∏–Ω–≥–µ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if search_duration > 30:
            print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–∏—Å–∫ –∑–∞–Ω—è–ª {search_duration:.2f} —Å–µ–∫ (–ø—Ä–µ–≤—ã—à–∞–µ—Ç 30 —Å–µ–∫)")

        return len(events) > 0

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ dry-run: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


async def main():
    parser = argparse.ArgumentParser(description="Dry-run —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π")
    parser.add_argument("--lat", type=float, default=-8.5069, help="–®–∏—Ä–æ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ë–∞–ª–∏)")
    parser.add_argument("--lng", type=float, default=115.2625, help="–î–æ–ª–≥–æ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ë–∞–ª–∏)")
    parser.add_argument("--radius", type=float, default=10.0, help="–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –≤ –∫–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)")
    parser.add_argument("--when", choices=["today", "tomorrow", "week"], default="today", help="–í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω")
    parser.add_argument("--verbose", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏")

    args = parser.parse_args()

    print("üöÄ –ó–∞–ø—É—Å–∫ dry-run —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    print()

    success = await dry_run_search(
        lat=args.lat, lng=args.lng, radius_km=args.radius, when=args.when, verbose=args.verbose
    )

    if success:
        print("‚úÖ Dry-run –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("‚ùå Dry-run –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
