#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞
"""

import sys
from datetime import UTC, datetime, timedelta
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from config import load_settings
from database import Event, Moment, User, get_session, init_engine


def check_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    print("üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        settings = load_settings()
        init_engine(settings.database_url)

        with get_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
            print()

            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            print("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            total_events = session.query(Event).count()
            total_moments = session.query(Moment).count()
            total_users = session.query(User).count()

            print(f"  ‚Ä¢ –°–æ–±—ã—Ç–∏–π: {total_events}")
            print(f"  ‚Ä¢ –ú–æ–º–µ–Ω—Ç–æ–≤: {total_moments}")
            print(f"  ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
            print()

            # –°–æ–±—ã—Ç–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            now = datetime.now(UTC)
            yesterday = now - timedelta(hours=24)

            print("üìÖ –°–æ–±—ã—Ç–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:")
            recent_events = session.query(Event).filter(Event.created_at_utc >= yesterday).count()
            print(f"  ‚Ä¢ –í—Å–µ–≥–æ: {recent_events}")

            # –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            source_stats = (
                session.query(
                    Event.source,
                    session.query(Event)
                    .filter(Event.created_at_utc >= yesterday, Event.source == Event.source)
                    .count(),
                )
                .filter(Event.created_at_utc >= yesterday, Event.source.isnot(None))
                .group_by(Event.source)
                .all()
            )

            if source_stats:
                print("  ‚Ä¢ –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
                for source, count in source_stats:
                    print(f"    - {source}: {count}")
            else:
                print("  ‚Ä¢ –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏")

            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
            user_events = (
                session.query(Event)
                .filter(
                    Event.created_at_utc >= yesterday,
                    Event.source.is_(None),
                    Event.organizer_id.isnot(None),
                )
                .count()
            )
            print(f"  ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ: {user_events}")

            # AI —Å–æ–±—ã—Ç–∏—è
            ai_events = (
                session.query(Event)
                .filter(Event.created_at_utc >= yesterday, Event.is_generated_by_ai is True)
                .count()
            )
            print(f"  ‚Ä¢ AI-—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {ai_events}")
            print()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:")
            duplicates = (
                session.query(
                    Event.title,
                    Event.starts_at,
                    Event.location_name,
                    session.query(Event)
                    .filter(
                        Event.title == Event.title,
                        Event.starts_at == Event.starts_at,
                        Event.location_name == Event.location_name,
                    )
                    .count()
                    .label("count"),
                )
                .group_by(Event.title, Event.starts_at, Event.location_name)
                .having(
                    session.query(Event)
                    .filter(
                        Event.title == Event.title,
                        Event.starts_at == Event.starts_at,
                        Event.location_name == Event.location_name,
                    )
                    .count()
                    > 1
                )
                .all()
            )

            if duplicates:
                print(f"  ‚ùå –ù–∞–π–¥–µ–Ω–æ {len(duplicates)} –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:")
                for title, starts_at, location, count in duplicates[:5]:
                    print(f"    - {title} ({starts_at}) –≤ {location}: {count} —Ä–∞–∑")
                if len(duplicates) > 5:
                    print(f"    ... –∏ –µ—â–µ {len(duplicates) - 5}")
            else:
                print("  ‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            print()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–º–µ–Ω—Ç–æ–≤
            print("‚ö° –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–º–µ–Ω—Ç–æ–≤:")
            active_moments = (
                session.query(Moment)
                .filter(Moment.is_active is True, Moment.expires_at > now)
                .count()
            )

            expired_moments = (
                session.query(Moment)
                .filter(Moment.is_active is True, Moment.expires_at <= now)
                .count()
            )

            print(f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_moments}")
            print(f"  ‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö (—Ç—Ä–µ–±—É—é—Ç –æ—á–∏—Å—Ç–∫–∏): {expired_moments}")
            print(f"  ‚Ä¢ –í—Å–µ–≥–æ: {total_moments}")
            print()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            print("üìç –°–æ–±—ã—Ç–∏—è –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:")
            events_without_coords = (
                session.query(Event).filter(Event.lat.is_(None) | Event.lng.is_(None)).count()
            )
            print(f"  ‚Ä¢ –ë–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {events_without_coords}")

            if events_without_coords > 0:
                print("  ‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ")
            print()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –±–µ–∑ —Å—Å—ã–ª–æ–∫
            print("üîó –°–æ–±—ã—Ç–∏—è –±–µ–∑ —Å—Å—ã–ª–æ–∫:")
            events_without_url = (
                session.query(Event).filter(Event.url.is_(None) | (Event.url == "")).count()
            )
            print(f"  ‚Ä¢ –ë–µ–∑ —Å—Å—ã–ª–æ–∫: {events_without_url}")

            if events_without_url > 0:
                print("  ‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
            print()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
            print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤:")
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
                indexes_to_check = [
                    "idx_events_coords",
                    "idx_events_starts_at",
                    "idx_events_source",
                    "idx_moments_active_exp",
                ]

                for index_name in indexes_to_check:
                    try:
                        result = session.execute(
                            f"SELECT 1 FROM pg_indexes WHERE indexname = '{index_name}'"
                        ).fetchone()
                        if result:
                            print(f"  ‚úÖ {index_name}")
                        else:
                            print(f"  ‚ùå {index_name} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    except Exception:
                        print(f"  ‚ö†Ô∏è {index_name} - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å")

            except Exception as e:
                print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã: {e}")

            print()
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


if __name__ == "__main__":
    success = check_database()
    sys.exit(0 if success else 1)
