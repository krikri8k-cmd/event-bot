"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
"""

from aiogram import Bot, F, Router
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from database import BotMessage
from utils.messaging_utils import delete_all_tracked, ensure_panel, send_tracked

diag = Router()
diag.message.filter(F.chat.type.in_({"group", "supergroup"}))
diag.callback_query.filter(F.message.chat.type.in_({"group", "supergroup"}))


@diag.message(Command("__seedpanel"))
async def __seedpanel(m: Message, bot: Bot, session: AsyncSession):
    """1) –°–æ–∑–¥–∞—ë–º/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ü–ê–ù–ï–õ–¨ (–∏ –æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ø–∞–¥—ë—Ç –≤ bot_messages)"""
    await ensure_panel(bot, session, chat_id=m.chat.id, text="–ü–∞–Ω–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∞", kb=None)
    await m.reply("‚úÖ –ü–∞–Ω–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞ (–∑–∞–ø–∏—Å–∞–Ω–∞ –≤ bot_messages).")


@diag.message(Command("__checkdb"))
async def __checkdb(m: Message, session: AsyncSession):
    """2) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ bot_messages –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞"""
    rows = (
        await session.execute(
            select(BotMessage.message_id, BotMessage.tag, BotMessage.deleted)
            .where(BotMessage.chat_id == m.chat.id)
            .order_by(BotMessage.id.desc())
            .limit(10)
        )
    ).all()

    if not rows:
        await m.reply("‚ö†Ô∏è –í bot_messages –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
    else:
        lines = [f"{mid} | {tag} | deleted={deleted}" for (mid, tag, deleted) in rows]
        await m.reply("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ bot_messages:\n" + "\n".join(lines))


@diag.message(Command("__wipe"))
async def __wipe(m: Message, bot: Bot, session: AsyncSession):
    """3) –ñ—ë—Å—Ç–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ (–±–µ–∑ –∫–Ω–æ–ø–∫–∏)"""
    cnt = await delete_all_tracked(bot, session, chat_id=m.chat.id)
    await m.reply(f"üßπ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {cnt}")


@diag.message(Command("__tracktest"))
async def __tracktest(m: Message, bot: Bot, session: AsyncSession):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ send_tracked"""
    tracked_msg = await send_tracked(
        bot,
        session,
        chat_id=m.chat.id,
        text="üß™ –¢–ï–°–¢ –¢–†–ï–ö–ò–ù–ì–ê - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ë–î",
        tag="test",
    )

    await m.reply(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ send_tracked, ID: {tracked_msg.message_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø–∏—Å–∞–ª–æ—Å—å –≤ –ë–î
    db_msg = (
        await session.execute(select(BotMessage).where(BotMessage.message_id == tracked_msg.message_id))
    ).scalar_one_or_none()

    if db_msg:
        await m.reply(
            f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–ª–æ—Å—å –≤ –ë–î:\n"
            f"chat_id: {db_msg.chat_id}\n"
            f"tag: {db_msg.tag}\n"
            f"deleted: {db_msg.deleted}"
        )
    else:
        await m.reply("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –ù–ï –∑–∞–ø–∏—Å–∞–ª–æ—Å—å –≤ –ë–î!")
