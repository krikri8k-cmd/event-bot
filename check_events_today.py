#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π —Å–µ–≥–æ–¥–Ω—è
"""

import asyncio
import logging

from sqlalchemy import text

from config import load_settings
from database import get_engine, init_engine

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def check_events_today():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è"""
    print("üìÖ –ü–†–û–í–ï–†–ö–ê –°–û–ë–´–¢–ò–ô –°–ï–ì–û–î–ù–Ø")
    print("=" * 50)

    settings = load_settings()
    init_engine(settings.database_url)
    engine = get_engine()

    with engine.connect() as conn:
        # A. –°–æ–±—ã—Ç–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Å–µ–≥–æ–¥–Ω—è
        print("üîç A. –°–æ–±—ã—Ç–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Å–µ–≥–æ–¥–Ω—è:")
        print("-" * 30)

        try:
            events = conn.execute(
                text("""
                SELECT id, title, starts_at, lat, lng
                FROM events_parser
                WHERE starts_at::date = CURRENT_DATE
                ORDER BY starts_at
            """)
            ).fetchall()

            for event in events:
                print(f"   ID {event[0]}: '{event[1]}' - {event[2]}")
                print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({event[3]}, {event[4]})")

            print(f"\nüìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –ø–∞—Ä—Å–µ—Ä–∞ —Å–µ–≥–æ–¥–Ω—è: {len(events)}")
            print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–±—ã—Ç–∏–π –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            print()

        # B. –°–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è
        print("üîç B. –°–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è:")
        print("-" * 30)

        try:
            user_events = conn.execute(
                text("""
                SELECT id, title, starts_at, lat, lng
                FROM events_user
                WHERE starts_at::date = CURRENT_DATE
                ORDER BY starts_at
            """)
            ).fetchall()

            for event in user_events:
                print(f"   ID {event[0]}: '{event[1]}' - {event[2]}")
                print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({event[3]}, {event[4]})")

            print(f"\nüìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: {len(user_events)}")
            print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            print()

        # C. –í—Å–µ —Å–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ)
        print("üîç C. –í—Å–µ —Å–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ):")
        print("-" * 30)

        try:
            all_events = conn.execute(
                text("""
                SELECT id, title, starts_at, lat, lng, 'parser' as source
                FROM events_parser
                WHERE starts_at::date = CURRENT_DATE
                UNION ALL
                SELECT id, title, starts_at, lat, lng, 'user' as source
                FROM events_user
                WHERE starts_at::date = CURRENT_DATE
                ORDER BY starts_at
            """)
            ).fetchall()

            for event in all_events:
                print(f"   ID {event[0]}: '{event[1]}' - {event[2]} ({event[5]})")
                print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({event[3]}, {event[4]})")

            print(f"\nüìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π —Å–µ–≥–æ–¥–Ω—è: {len(all_events)}")
            print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π: {e}")
            print()

        # D. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
        print("üîç D. –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´:")
        print("-" * 30)

        print("üéØ –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø–æ—á–µ–º—É —Å–æ–±—ã—Ç–∏—è –Ω–µ –≤–∏–¥–Ω—ã:")
        print("   1. –°–æ–±—ã—Ç–∏—è –≤ –ø—Ä–æ—à–ª–æ–º (–≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ)")
        print("   2. –°–æ–±—ã—Ç–∏—è —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ (—Ä–∞–¥–∏—É—Å —Ñ–∏–ª—å—Ç—Ä)")
        print("   3. –î–≤–∞ —Ö—ç–Ω–¥–ª–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ–¥—Ä—è–¥ –∏ –ø–µ—Ä–µ–±–∏–≤–∞—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞")
        print("   4. –ö—ç—à –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç —Å–≤–µ–∂—É—é –≤—ã–¥–∞—á—É")
        print("   5. –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∑–æ–Ω–∞–º–∏")
        print()

        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   1. –ü–∞—Ä—Å–µ—Ä –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ")
        print("   2. –ù–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω")
        print("   3. –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å message_id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        print("   4. –û—Ç–∫–ª—é—á–∏—Ç—å –∫—ç—à –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: CACHE_TTL_S=0")
        print()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await check_events_today()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)
