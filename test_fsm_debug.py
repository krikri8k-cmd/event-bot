#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ FSM –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö
"""

import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))


def test_fsm_states():
    """–¢–µ—Å—Ç FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    try:
        from group_chat_handlers import GroupCreate

        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π:")
        states = [
            ("waiting_for_title", GroupCreate.waiting_for_title),
            ("waiting_for_datetime", GroupCreate.waiting_for_datetime),
            ("waiting_for_city", GroupCreate.waiting_for_city),
            ("waiting_for_location", GroupCreate.waiting_for_location),
            ("waiting_for_description", GroupCreate.waiting_for_description),
        ]

        for name, state in states:
            print(f"  ‚úÖ {name}: {state}")

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π: {e}")
        return False


def test_service_methods():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        from utils.community_events_service import CommunityEventsService

        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ —Å–µ—Ä–≤–∏—Å–∞:")
        service = CommunityEventsService()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        test_event_id = service.create_community_event(
            group_id=-1002933948882,  # ID –≤–∞—à–µ–π —Ç–µ—Å—Ç–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
            creator_id=456065084,  # –í–∞—à ID
            title="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ",
            date=datetime(2025, 10, 10, 18, 0),
            description="–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
            city="–ú–æ—Å–∫–≤–∞",
            location_name="–¢–µ—Å—Ç–æ–≤–æ–µ –º–µ—Å—Ç–æ",
        )

        print(f"  ‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å ID: {test_event_id}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        events = service.get_community_events(-1002933948882)
        print(f"  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")

        for event in events:
            print(f"    - {event['title']} ({event['starts_at']})")

        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –û—Ç–ª–∞–¥–∫–∞ FSM –∏ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤")
    print("=" * 50)

    tests = [
        ("FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è", test_fsm_states),
        ("–°–µ—Ä–≤–∏—Å", test_service_methods),
    ]

    passed = 0
    total = len(tests)

    for test_name, test_func in tests:
        print(f"\nüîç –¢–µ—Å—Ç: {test_name}")
        if test_func():
            passed += 1
        else:
            print(f"‚ùå –¢–µ—Å—Ç {test_name} –ø—Ä–æ–≤–∞–ª–µ–Ω")

    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return True
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
