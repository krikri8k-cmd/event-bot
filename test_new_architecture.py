#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏ –∏ VIEW
"""

import asyncio
import logging

from sqlalchemy import text

from config import load_settings
from database import get_engine, init_engine
from utils.time_window import format_time_window_log, get_region_from_coordinates, today_window_utc_for

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def test_new_architecture():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É"""
    print("üß™ –¢–ï–°–¢ –ù–û–í–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´")
    print("=" * 50)

    settings = load_settings()
    init_engine(settings.database_url)
    engine = get_engine()

    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_lat = -8.675326
    user_lon = 115.230191

    print(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ({user_lat}, {user_lon})")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω
    region = get_region_from_coordinates(user_lat, user_lon)
    print(f"üåç –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ä–µ–≥–∏–æ–Ω: {region}")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ
    start_utc, end_utc = today_window_utc_for(region)
    print(f"üïí {format_time_window_log(region, start_utc, end_utc)}")
    print()

    with engine.connect() as conn:
        # 1. –¢–µ—Å—Ç VIEW events_all_bali
        print("1Ô∏è‚É£ –¢–ï–°–¢ VIEW EVENTS_ALL_BALI")
        print("-" * 30)

        try:
            events = conn.execute(
                text("""
                SELECT source_type, id, title, starts_at, lat, lng
                FROM events_all_bali
                WHERE starts_at BETWEEN :start_utc AND :end_utc
                ORDER BY starts_at
            """),
                {"start_utc": start_utc, "end_utc": end_utc},
            ).fetchall()

            print(f"üìä –°–æ–±—ã—Ç–∏–π –≤ VIEW events_all_bali —Å–µ–≥–æ–¥–Ω—è: {len(events)}")
            for event in events:
                print(f"   {event[0]}: ID {event[1]} - '{event[2]}' - {event[3]}")
                print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({event[4]}, {event[5]})")

            print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ VIEW: {e}")
            print()

        # 2. –¢–µ—Å—Ç —Å —Ä–∞–¥–∏—É—Å–æ–º (–±–µ–∑ PostGIS)
        print("2Ô∏è‚É£ –¢–ï–°–¢ –° –†–ê–î–ò–£–°–û–ú 15–ö–ú")
        print("-" * 30)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤ Python
            events = conn.execute(
                text("""
                SELECT source_type, id, title, starts_at, lat, lng
                FROM events_all_bali
                WHERE starts_at BETWEEN :start_utc AND :end_utc
                ORDER BY starts_at
            """),
                {"start_utc": start_utc, "end_utc": end_utc},
            ).fetchall()

            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–∞–¥–∏—É—Å—É –≤ Python
            from utils.radius_calc import is_within_radius

            radius_km = 15
            filtered_events = []

            for event in events:
                is_within, distance = is_within_radius(user_lat, user_lon, event[4], event[5], radius_km)

                if is_within:
                    filtered_events.append((*event, distance))

            print(f"üìä –°–æ–±—ã—Ç–∏–π –≤ —Ä–∞–¥–∏—É—Å–µ {radius_km}–∫–º: {len(filtered_events)}")
            for event in filtered_events:
                distance = event[6] if event[6] is not None else "N/A"
                print(f"   {event[0]}: ID {event[1]} - '{event[2]}' - {event[3]}")
                print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({event[4]}, {event[5]}) - {distance}–∫–º")

            print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ —Å —Ä–∞–¥–∏—É—Å–æ–º: {e}")
            print()

        # 3. –¢–µ—Å—Ç –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–≤—Å–µ —Å–æ–±—ã—Ç–∏—è)
        print("3Ô∏è‚É£ –¢–ï–°–¢ –ë–ï–ó –ö–û–û–†–î–ò–ù–ê–¢")
        print("-" * 30)

        try:
            events = conn.execute(
                text("""
                SELECT source_type, id, title, starts_at, lat, lng
                FROM events_all_bali
                WHERE starts_at BETWEEN :start_utc AND :end_utc
                ORDER BY starts_at
            """),
                {"start_utc": start_utc, "end_utc": end_utc},
            ).fetchall()

            print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π —Å–µ–≥–æ–¥–Ω—è: {len(events)}")
            for event in events:
                print(f"   {event[0]}: ID {event[1]} - '{event[2]}' - {event[3]}")
                print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({event[4]}, {event[5]})")

            print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
            print()

    print("=" * 50)
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("‚úÖ –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    print("‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")
    print("‚úÖ VIEW –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏—è!")
    print("‚úÖ –†–∞–¥–∏—É—Å —Ñ–∏–ª—å—Ç—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await test_new_architecture()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)
