#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–æ–±—ã—Ç–∏–π
"""

import os

from dotenv import load_dotenv
from sqlalchemy import create_engine, text


def main():
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–æ–±—ã—Ç–∏–π")
    print("=" * 50)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv("app.local.env")

    database_url = os.getenv("DATABASE_URL")
    if not database_url:
        print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    engine = create_engine(database_url)

    with engine.begin() as conn:
        print("1. üìä –¢–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã:")
        result = conn.execute(
            text("""
            SELECT status, COUNT(*) as count
            FROM events
            GROUP BY status
            ORDER BY status
        """)
        ).fetchall()

        for row in result:
            print(f"   - {row[0]}: {row[1]} —Å–æ–±—ã—Ç–∏–π")

        print("\n2. üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:")
        test_statuses = ["open", "closed", "canceled", "active", "draft"]

        for status in test_statuses:
            try:
                # –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –æ–¥–Ω–æ —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
                result = conn.execute(
                    text("""
                    UPDATE events
                    SET status = :status
                    WHERE id = (SELECT id FROM events LIMIT 1)
                    RETURNING id, title, status
                """),
                    {"status": status},
                )

                if result.rowcount > 0:
                    row = result.fetchone()
                    print(f"   ‚úÖ {status}: OK (ID {row[0]}: {row[1][:30]}...)")
                else:
                    print(f"   ‚ö†Ô∏è  {status}: –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

            except Exception as e:
                print(f"   ‚ùå {status}: –û—à–∏–±–∫–∞ - {e}")

        print("\n3. ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏:")
        try:
            closed_count = conn.execute(text("SELECT auto_close_events()")).scalar()
            print(f"   ‚úÖ –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: –∑–∞–∫—Ä—ã—Ç–æ {closed_count} —Å–æ–±—ã—Ç–∏–π")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")

        print("\n4. üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º:")
        result = conn.execute(
            text("""
            SELECT
                organizer_username,
                status,
                COUNT(*) as count
            FROM events
            WHERE organizer_username IS NOT NULL
            GROUP BY organizer_username, status
            ORDER BY organizer_username, status
        """)
        ).fetchall()

        for row in result:
            print(f"   - {row[0]}: {row[1]} ({row[2]} —Å–æ–±—ã—Ç–∏–π)")

        print("\n5. üéØ –¢–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ (ID 72):")
        result = conn.execute(
            text("""
            SELECT id, title, status, organizer_username, starts_at
            FROM events
            WHERE id = 72
        """)
        ).fetchone()

        if result:
            print(f"   - ID: {result[0]}")
            print(f"   - –ù–∞–∑–≤–∞–Ω–∏–µ: {result[1]}")
            print(f"   - –°—Ç–∞—Ç—É—Å: {result[2]}")
            print(f"   - –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {result[3]}")
            print(f"   - –í—Ä–µ–º—è: {result[4]}")
        else:
            print("   ‚ùå –°–æ–±—ã—Ç–∏–µ ID 72 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("üí° –í—Å–µ –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")


if __name__ == "__main__":
    main()
