#!/usr/bin/env python3
"""
–õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è EventBot –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Location

from config import load_settings

logging.basicConfig(level=logging.INFO)


class CreateEventFSM(StatesGroup):
    title = State()
    time_local = State()
    location = State()
    description = State()
    max_participants = State()
    preview = State()


def main_menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìç –ß—Ç–æ —Ä—è–¥–æ–º", request_location=False)],
            [KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å")],
            [KeyboardButton(text="ü§ù –ü–æ–¥–µ–ª–∏—Ç—å—Å—è")],
        ],
        resize_keyboard=True,
    )


async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø EventAroundBot. –ü–æ–º–æ–≥–∞—é –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–æ–±—ã—Ç–∏—è —Ä—è–¥–æ–º –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏. üéâ\n\n"
        "–≠—Ç–æ –ª–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
        reply_markup=main_menu_kb(),
    )


async def ask_location(message: Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–≤–µ–∂—É—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é, —á—Ç–æ–±—ã —è –Ω–∞—à–ª–∞ —Å–æ–±—ã—Ç–∏—è —Ä—è–¥–æ–º ‚ú®", reply_markup=kb)


async def on_what_nearby(message: Message):
    await ask_location(message)


async def on_location(message: Message):
    if not message.location:
        await ask_location(message)
        return
    
    lat = message.location.latitude
    lng = message.location.longitude
    
    await message.answer(
        f"üìç –ü–æ–ª—É—á–∏–ª —Ç–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é!\n"
        f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.6f}, {lng:.6f}\n\n"
        f"üîç –ò—â—É —Å–æ–±—ã—Ç–∏—è —Ä—è–¥–æ–º...\n\n"
        f"‚ö†Ô∏è –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
        f"–í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è!",
        reply_markup=main_menu_kb(),
    )


async def on_create(message: Message, state: FSMContext):
    await state.set_state(CreateEventFSM.title)
    await message.answer(
        "–°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ! üéâ\n\n"
        "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–≤–æ—ë —Å–æ–±—ã—Ç–∏–µ?",
        reply_markup=ReplyKeyboardRemove(),
    )


async def fsm_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(CreateEventFSM.time_local)
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –°–æ–±—ã—Ç–∏–µ: {message.text}\n\n"
        f"–ö–æ–≥–¥–∞ –æ–Ω–æ —Å–æ—Å—Ç–æ–∏—Ç—Å—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 19:00)",
    )


async def fsm_time_local(message: Message, state: FSMContext):
    await state.update_data(time_local=message.text)
    await state.set_state(CreateEventFSM.location)
    await message.answer(
        f"–í—Ä–µ–º—è: {message.text}\n\n"
        f"–ì–¥–µ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ? (–∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞)",
    )


async def fsm_location(message: Message, state: FSMContext):
    await state.update_data(location=message.text)
    await state.set_state(CreateEventFSM.description)
    await message.answer(
        f"–ú–µ—Å—Ç–æ: {message.text}\n\n"
        f"–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–æ–±—ã—Ç–∏–∏ (–æ–ø–∏—Å–∞–Ω–∏–µ)",
    )


async def fsm_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(CreateEventFSM.max_participants)
    await message.answer(
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {message.text[:50]}...\n\n"
        f"–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –º–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å? (—á–∏—Å–ª–æ –∏–ª–∏ '–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ')",
    )


async def fsm_max(message: Message, state: FSMContext):
    await state.update_data(max_participants=message.text)
    await state.set_state(CreateEventFSM.preview)
    
    data = await state.get_data()
    
    preview_text = f"""
üéâ –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –°–û–ë–´–¢–ò–Ø:

üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üïê –í—Ä–µ–º—è: {data.get('time_local', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìç –ú–µ—Å—Ç–æ: {data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üë• –ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {data.get('max_participants', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

‚ö†Ô∏è –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è - —Å–æ–±—ã—Ç–∏–µ –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

–•–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ? (–¥–∞/–Ω–µ—Ç)
"""
    
    await message.answer(preview_text)


async def on_share(message: Message):
    await message.answer(
        "ü§ù –§—É–Ω–∫—Ü–∏—è '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è' –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏.\n\n"
        "–í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–µ–ª–∏—Ç—å—Å—è —Å–æ–±—ã—Ç–∏—è–º–∏ —Å –¥—Ä—É–∑—å—è–º–∏!",
        reply_markup=main_menu_kb(),
    )


async def cmd_admin(message: Message):
    await message.answer(
        "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏.\n\n"
        "–í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—É–¥—É—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏!",
        reply_markup=main_menu_kb(),
    )


def make_dispatcher() -> Dispatcher:
    dp = Dispatcher()
    dp.message.register(cmd_start, CommandStart())
    dp.message.register(on_what_nearby, F.text == "üìç –ß—Ç–æ —Ä—è–¥–æ–º")
    dp.message.register(on_create, F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å")
    dp.message.register(on_share, F.text == "ü§ù –ü–æ–¥–µ–ª–∏—Ç—å—Å—è")
    dp.message.register(on_location, F.location)
    dp.message.register(cmd_admin, Command("admin"))

    dp.message.register(fsm_title, CreateEventFSM.title)
    dp.message.register(fsm_time_local, CreateEventFSM.time_local)
    dp.message.register(fsm_location, CreateEventFSM.location)
    dp.message.register(fsm_description, CreateEventFSM.description)
    dp.message.register(fsm_max, CreateEventFSM.max_participants)
    
    return dp


async def run() -> None:
    settings = load_settings()
    bot = Bot(token=settings.telegram_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = make_dispatcher()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ EventBot...")
    print("‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è")
    print("üì± –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())


if __name__ == "__main__":
    asyncio.run(run())

