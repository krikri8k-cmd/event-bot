#!/usr/bin/env python3
"""
Smoke —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ EventBot
"""

import asyncio

import pytest
from sqlalchemy import text

from ai_utils import fetch_ai_events_nearby
from config import load_settings
from database import create_all, get_session, init_engine
from enhanced_event_search import enhanced_search_events


@pytest.mark.asyncio
async def test_config_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    settings = load_settings()
    assert settings is not None
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è")


@pytest.mark.asyncio
async def test_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        settings = load_settings()
        init_engine(settings.database_url)
        create_all()

        with get_session() as session:
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            result = session.execute(text("SELECT 1"))
            assert result.scalar() == 1
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
    except Exception as e:
        print(f"‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")


@pytest.mark.asyncio
async def test_ai_generation():
    """–¢–µ—Å—Ç AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    try:
        events = await fetch_ai_events_nearby(-6.2088, 106.8456)  # –î–∂–∞–∫–∞—Ä—Ç–∞
        assert isinstance(events, list)
        print(f"‚úÖ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç (—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(events)} —Å–æ–±—ã—Ç–∏–π)")
    except Exception as e:
        print(f"‚ö†Ô∏è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {e}")


@pytest.mark.asyncio
async def test_event_search():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π"""
    try:
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –î–∂–∞–∫–∞—Ä—Ç—ã
        events = await enhanced_search_events(-6.2088, 106.8456, 5)
        assert isinstance(events, list)
        print(f"‚úÖ –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–∞–π–¥–µ–Ω–æ: {len(events)})")
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π: {e}")


def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥—É–ª–∏ –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
        import importlib.util

        modules = [
            "ai_utils",
            "config",
            "database",
            "enhanced_event_search",
            "event_apis",
            "smart_ai_generator",
        ]

        for module in modules:
            spec = importlib.util.find_spec(module)
            if spec is None:
                pytest.fail(f"–ú–æ–¥—É–ª—å {module} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è")
    except Exception as e:
        pytest.fail(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")


def test_basic_functionality():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    assert True
    print("‚úÖ –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ smoke —Ç–µ—Å—Ç–æ–≤...")
    print("=" * 50)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_imports()
    test_basic_functionality()

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    asyncio.run(test_config_loading())
    asyncio.run(test_database_connection())
    asyncio.run(test_ai_generation())
    asyncio.run(test_event_search())

    print("=" * 50)
    print("üéâ Smoke —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
