# tests/test_geocode_full_integration.py
import datetime as dt
import os
import sys

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import pytest

from logging_helpers import DropStats
from venue_enrich import enrich_venue_from_text


# –ú–æ–∫–∞–µ–º –≥–µ–æ–∫–æ–¥–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤
@pytest.fixture(autouse=True)
def mock_geocode(monkeypatch):
    """–ú–æ–∫–∞–µ–º –≥–µ–æ–∫–æ–¥–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –≥–µ–æ–∫–æ–¥–µ—Ä–∞
    monkeypatch.setenv("GEOCODE_ENABLE", "1")
    monkeypatch.setenv("GOOGLE_MAPS_API_KEY", "fake-key-for-testing")

    def mock_geocode_best_effort(venue, address):
        if venue == "Cafe Moka":
            return (-8.6701, 115.2579)
        if address and "–ü—É—à–∫–∏–Ω–∞" in address:
            return (55.7539, 37.6208)
        return None

    def mock_reverse_geocode_best_effort(lat, lon):
        if (lat, lon) == (-8.6701, 115.2579):
            return "Cafe Moka, Sanur, Bali"
        return None

    # –ü–æ–¥–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–æ–∫–æ–¥–µ—Ä–∞
    monkeypatch.setattr("geocode.geocode_best_effort", mock_geocode_best_effort)
    monkeypatch.setattr("geocode.reverse_geocode_best_effort", mock_reverse_geocode_best_effort)


def test_geocode_venue_to_coords():
    """–¢–µ—Å—Ç: —Å–æ–±—ã—Ç–∏–µ —Å venue_name –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ –≥–µ–æ–∫–æ–¥–µ—Ä"""
    event = {
        "title": "–í—Å—Ç—Ä–µ—á–∞ –≤ Cafe Moka",
        "venue_name": "Cafe Moka",
        "source_url": "https://example.com/event",
    }

    enriched = enrich_venue_from_text(event)

    assert enriched["venue_name"] == "Cafe Moka"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã (–µ—Å–ª–∏ –≥–µ–æ–∫–æ–¥–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç)
    if "coords" in enriched:
        assert enriched["coords"] == (-8.6701, 115.2579)
        assert enriched["lat"] == -8.6701
        assert enriched["lng"] == 115.2579


def test_geocode_address_to_coords():
    """–¢–µ—Å—Ç: —Å–æ–±—ã—Ç–∏–µ —Å address –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ –≥–µ–æ–∫–æ–¥–µ—Ä"""
    event = {
        "title": "–í—Å—Ç—Ä–µ—á–∞ –Ω–∞ —É–ª–∏—Ü–µ –ü—É—à–∫–∏–Ω–∞",
        "address": "—É–ª. –ü—É—à–∫–∏–Ω–∞, –¥–æ–º 10",
        "source_url": "https://example.com/event",
    }

    enriched = enrich_venue_from_text(event)

    assert enriched["address"] == "—É–ª. –ü—É—à–∫–∏–Ω–∞, –¥–æ–º 10"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã (–µ—Å–ª–∏ –≥–µ–æ–∫–æ–¥–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç)
    if "coords" in enriched:
        assert enriched["coords"] == (55.7539, 37.6208)
        assert enriched["lat"] == 55.7539
        assert enriched["lng"] == 37.6208


def test_reverse_geocode_coords_to_address():
    """–¢–µ—Å—Ç: —Å–æ–±—ã—Ç–∏–µ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –ø–æ–ª—É—á–∞–µ—Ç –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ —Ä–µ–≤–µ—Ä—Å-–≥–µ–æ–∫–æ–¥–µ—Ä"""
    event = {
        "title": "–í—Å—Ç—Ä–µ—á–∞ –≤ Cafe Moka",
        "coords": (-8.6701, 115.2579),
        "lat": -8.6701,
        "lng": 115.2579,
        "source_url": "https://example.com/event",
    }

    enriched = enrich_venue_from_text(event)

    assert enriched["coords"] == (-8.6701, 115.2579)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω (–µ—Å–ª–∏ –≥–µ–æ–∫–æ–¥–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç)
    if "address" in enriched:
        assert enriched["address"] == "Cafe Moka, Sanur, Bali"


def test_full_pipeline_with_geocoding():
    """–¢–µ—Å—Ç: –ø–æ–ª–Ω—ã–π –∫–æ–Ω–≤–µ–π–µ—Ä —Å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""

    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    def get_source_url(e):
        return e.get("source_url")

    def is_blacklisted_url(url):
        return url and "example.com" in url

    def prepare_events_for_feed(events):
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è prepare_events_for_feed –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        from collections import Counter

        prepared, drop = [], DropStats()
        kept_by = Counter(ai=0, user=0, source=0)

        for e in events:
            # –û–±–æ–≥–∞—â–∞–µ–º –ª–æ–∫–∞—Ü–∏—é (–≤–∫–ª—é—á–∞—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ)
            e = enrich_venue_from_text(e)

            title = (e.get("title") or "").strip() or "‚Äî"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
            if not get_source_url(e):
                drop.add("no_url", title)
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞—Ü–∏—é (—Ç–µ–ø–µ—Ä—å —Å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º!)
            if not (
                e.get("venue_name")
                or e.get("address")
                or e.get("coords")
                or (e.get("lat") and e.get("lng"))
            ):
                drop.add("no_venue_or_location", title)
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
            if is_blacklisted_url(get_source_url(e)):
                drop.add("blacklist_domain", title)
                continue

            prepared.append(e)
            kept_by[e.get("type", "source")] += 1

        print(drop.summary(kept_by, total=len(events)))
        return prepared

    # –¢–µ—Å—Ç: —Å–æ–±—ã—Ç–∏–µ —Ç–æ–ª—å–∫–æ —Å venue_name –¥–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –ø—Ä–æ–π—Ç–∏ —Ñ–∏–ª—å—Ç—Ä
    event = {
        "id": "1",
        "type": "source",
        "title": "–í—Å—Ç—Ä–µ—á–∞ –≤ Cafe Moka",
        "start": dt.datetime.now(dt.UTC),
        "source_url": "https://valid.example/item",
        "venue_name": "Cafe Moka",  # –¢–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞
    }

    result = prepare_events_for_feed([event])

    # –î–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ñ–∏–ª—å—Ç—Ä
    assert len(result) == 1
    assert result[0]["venue_name"] == "Cafe Moka"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã (–µ—Å–ª–∏ –≥–µ–æ–∫–æ–¥–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç)
    if "coords" in result[0]:
        assert result[0]["coords"] == (-8.6701, 115.2579)


if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –≥–µ–æ–∫–æ–¥–µ—Ä–∞...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –≤—Ä—É—á–Ω—É—é
    test_geocode_venue_to_coords()
    print("‚úÖ test_geocode_venue_to_coords passed")

    test_geocode_address_to_coords()
    print("‚úÖ test_geocode_address_to_coords passed")

    test_reverse_geocode_coords_to_address()
    print("‚úÖ test_reverse_geocode_coords_to_address passed")

    test_full_pipeline_with_geocoding()
    print("‚úÖ test_full_pipeline_with_geocoding passed")

    print("\nüéâ –í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
