#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è CI –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import pytest
import importlib.util


def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
    modules = [
        "ai_utils",
        "config",
        "database",
        "enhanced_event_search",
        "event_apis",
        "smart_ai_generator",
    ]

    for module in modules:
        spec = importlib.util.find_spec(module)
        if spec is None:
            pytest.fail(f"–ú–æ–¥—É–ª—å {module} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è")


def test_config_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        from config import load_settings
        settings = load_settings()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –µ—Å—Ç—å
        assert hasattr(settings, 'database_url')
        assert hasattr(settings, 'telegram_bot_token')
        assert hasattr(settings, 'openai_api_key')
        
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    except Exception as e:
        print(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {e}")


def test_database_models():
    """–¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from database import User, Event, Moment, Report
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è
        assert User is not None
        assert Event is not None
        assert Moment is not None
        assert Report is not None
        
        print("‚úÖ –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –ú–æ–¥–µ–ª–∏ –ë–î: {e}")


def test_ai_utils_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã AI —É—Ç–∏–ª–∏—Ç"""
    try:
        from ai_utils import fetch_ai_events_nearby
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è
        assert callable(fetch_ai_events_nearby)
        
        print("‚úÖ AI —É—Ç–∏–ª–∏—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è AI —É—Ç–∏–ª–∏—Ç—ã: {e}")


def test_event_search_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π"""
    try:
        from enhanced_event_search import enhanced_search_events
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è
        assert callable(enhanced_search_events)
        
        print("‚úÖ –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π: {e}")


def test_basic_functionality():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    assert True
    print("‚úÖ –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ CI —Ç–µ—Å—Ç–æ–≤...")
    print("=" * 50)
    
    test_imports()
    test_config_structure()
    test_database_models()
    test_ai_utils_structure()
    test_event_search_structure()
    test_basic_functionality()
    
    print("=" * 50)
    print("üéâ CI —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
