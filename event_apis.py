#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ API –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
"""

import asyncio
from datetime import datetime
from typing import Any

import httpx

from config import load_settings


async def search_eventbrite_events(
    lat: float, lng: float, radius_km: int = 5
) -> list[dict[str, Any]]:
    """
    –ò—â–µ—Ç —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ Eventbrite API
    """
    settings = load_settings()

    if not settings.eventbrite_api_key:
        print("‚ùå Eventbrite API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []

    # Eventbrite API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
    url = "https://www.eventbriteapi.com/v3/events/search/"

    # –†–∞–¥–∏—É—Å –≤ –º–∏–ª—è—Ö (Eventbrite –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∏–ª–∏)
    radius_miles = int(radius_km * 0.621371)

    params = {
        "location.latitude": lat,
        "location.longitude": lng,
        "location.within": f"{radius_miles}mi",
        "start_date.range_start": datetime.now().isoformat(),
        "expand": "venue",
        "status": "live",
    }

    try:
        async with httpx.AsyncClient(timeout=15) as client:
            r = await client.get(url, params=params)
            r.raise_for_status()
            data = r.json()

            events = []
            for event in data.get("events", []):
                venue = event.get("venue", {})
                events.append(
                    {
                        "title": event.get("name", {}).get("text", ""),
                        "description": event.get("description", {}).get("text", "")[:500],
                        "time_local": event.get("start", {}).get("local", ""),
                        "location_name": venue.get("name", ""),
                        "lat": venue.get("latitude"),
                        "lng": venue.get("longitude"),
                        "url": event.get("url", ""),
                        "source": "eventbrite",
                    }
                )

            return events

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ Eventbrite API: {e}")
        return []


# Facebook Events API –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø—É–±–ª–∏—á–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
# –£–¥–∞–ª–µ–Ω–æ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Facebook Graph API v5.0+


async def search_meetup_events(lat: float, lng: float, radius_km: int = 5) -> list[dict[str, Any]]:
    """
    –ò—â–µ—Ç —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ Meetup API
    """
    # Meetup API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á)
    url = "https://api.meetup.com/find/upcoming_events"

    params = {"lat": lat, "lon": lng, "radius": radius_km, "page": 20}

    try:
        async with httpx.AsyncClient(timeout=15) as client:
            r = await client.get(url, params=params)
            r.raise_for_status()
            data = r.json()

            events = []
            for event in data.get("events", []):
                venue = event.get("venue", {})
                events.append(
                    {
                        "title": event.get("name", ""),
                        "description": event.get("description", "")[:500],
                        "time_local": event.get("local_date")
                        + " "
                        + event.get("local_time", "00:00"),
                        "location_name": venue.get("name", ""),
                        "lat": venue.get("lat"),
                        "lng": venue.get("lon"),
                        "url": event.get("link", ""),
                        "source": "meetup",
                    }
                )

            return events

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ Meetup API: {e}")
        return []


async def search_all_real_events(
    lat: float, lng: float, radius_km: int = 5
) -> list[dict[str, Any]]:
    """
    –ò—â–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API
    """
    print("üîç –ò—â–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")

    all_events = []

    # Facebook Events API –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø—É–±–ª–∏—á–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π

    # Eventbrite
    print("üìÖ –ò—â–µ–º –≤ Eventbrite...")
    eventbrite_events = await search_eventbrite_events(lat, lng, radius_km)
    if eventbrite_events:
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(eventbrite_events)} —Å–æ–±—ã—Ç–∏–π –≤ Eventbrite")
        all_events.extend(eventbrite_events)

    # Meetup
    print("üë• –ò—â–µ–º –≤ Meetup...")
    meetup_events = await search_meetup_events(lat, lng, radius_km)
    if meetup_events:
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(meetup_events)} —Å–æ–±—ã—Ç–∏–π –≤ Meetup")
        all_events.extend(meetup_events)

    print(f"üéØ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {len(all_events)}")
    return all_events


if __name__ == "__main__":
    # –¢–µ—Å—Ç
    async def test():
        events = await search_all_real_events(55.7558, 37.6176, 5)
        for i, event in enumerate(events[:5], 1):
            print(f"{i}. {event['title']} - {event['source']}")

    asyncio.run(test())
