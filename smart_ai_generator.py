#!/usr/bin/env python3
"""
–£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç
–û–±—É—á–∞–µ–º GPT –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!
"""

import asyncio
from typing import Any

from ai_utils import _make_client

# from real_places_data import REAL_PLACES  # –£–¥–∞–ª–µ–Ω–æ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
from utils.geo_utils import haversine_km


class SmartEventGenerator:
    def __init__(self):
        # self.real_places = REAL_PLACES.get("moscow", [])  # –£–¥–∞–ª–µ–Ω–æ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
        self.real_places = []  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —Ç–∞–∫ –∫–∞–∫ real_places_data —É–¥–∞–ª–µ–Ω

    def find_nearby_places(self, lat: float, lng: float, radius_km: int = 5) -> list[dict]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
        """
        nearby_places = []

        for place in self.real_places:
            distance = haversine_km(lat, lng, place["lat"], place["lng"])
            if distance <= radius_km:
                place_with_distance = place.copy()
                place_with_distance["distance_km"] = round(distance, 1)
                nearby_places.append(place_with_distance)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
        nearby_places.sort(key=lambda x: x["distance_km"])
        return nearby_places

    def create_context_for_gpt(self, nearby_places: list[dict]) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GPT –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç
        """
        if not nearby_places:
            return "–í —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏ –Ω–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è —Å–æ–±—ã—Ç–∏–π."

        context = "–í–æ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏, –≥–¥–µ –º–æ–≥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å–æ–±—ã—Ç–∏—è:\n\n"

        for place in nearby_places:
            context += f"üìç {place['name']} (–≤ {place['distance_km']} –∫–º)\n"
            context += f"   –¢–∏–ø: {place['type']}\n"
            context += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {place['description']}\n"
            context += f"   –¢–∏–ø–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: {', '.join(place['typical_events'])}\n\n"

        context += """
–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π:
1. –ì–µ–Ω–µ—Ä–∏—Ä—É–π —Å–æ–±—ã—Ç–∏—è –¢–û–õ–¨–ö–û –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç
2. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∏–ø–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∫–∞–∫ –æ—Å–Ω–æ–≤—É, –Ω–æ –¥–µ–ª–∞–π –∏—Ö –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏
3. –î–æ–±–∞–≤–ª—è–π —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏: –≤—Ä–µ–º—è, –æ–ø–∏—Å–∞–Ω–∏–µ, —Å—Ç–æ–∏–º–æ—Å—Ç—å
4. –î–µ–ª–∞–π —Å–æ–±—ã—Ç–∏—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏: –æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –¥–æ –ø–ª–∞—Ç–Ω—ã—Ö
5. –£—á–∏—Ç—ã–≤–∞–π —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ –≤—Ä–µ–º—è –≥–æ–¥–∞
6. –°–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏
"""

        return context

    async def generate_smart_events(
        self, lat: float, lng: float, radius_km: int = 5, count: int = 5
    ) -> list[dict[str, Any]]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç
        """
        print("üß† –ò—â–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏...")
        nearby_places = self.find_nearby_places(lat, lng, radius_km)

        if not nearby_places:
            print("‚ùå –ù–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–µ—Å—Ç –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏")
            return []

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(nearby_places)} —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç:")
        for place in nearby_places:
            print(f"   üìç {place['name']} ({place['distance_km']} –∫–º)")

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GPT
        context = self.create_context_for_gpt(nearby_places)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        print("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç...")

        prompt = f"""
{context}

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π {count} –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç. 
–ö–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å:
- –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
- –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è (–æ–¥–Ω–æ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç)
- –í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
- –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
- –¢–∏–ø —Å–æ–±—ã—Ç–∏—è (–±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ/–ø–ª–∞—Ç–Ω–æ–µ)

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
1. –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è - –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
   –í—Ä–µ–º—è: XX:XX
   –û–ø–∏—Å–∞–Ω–∏–µ: ...
   –¢–∏–ø: –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ/–ø–ª–∞—Ç–Ω–æ–µ

2. –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è - –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
   –í—Ä–µ–º—è: XX:XX
   –û–ø–∏—Å–∞–Ω–∏–µ: ...
   –¢–∏–ø: –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ/–ø–ª–∞—Ç–Ω–æ–µ
"""

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI API –Ω–∞–ø—Ä—è–º—É—é
            client = _make_client()
            if client is None:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ OpenAI API")
                return []

            completion = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {
                        "role": "system",
                        "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç. –û—Ç–≤–µ—á–∞–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.",
                    },
                    {"role": "user", "content": prompt},
                ],
                temperature=0.7,
            )

            events_text = completion.choices[0].message.content or ""

            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç GPT
            events = self.parse_events_from_text(events_text, nearby_places)

            print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(events)} —É–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")
            return events

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return []

    def parse_events_from_text(self, text: str, nearby_places: list[dict]) -> list[dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ GPT
        """
        events = []
        lines = text.split("\n")

        current_event = {}

        for line in lines:
            line = line.strip()
            if not line:
                continue

            # –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã)
            if line[0].isdigit() and ". " in line:
                if current_event:
                    events.append(current_event)

                # –ü–∞—Ä—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –º–µ—Å—Ç–æ
                parts = line.split(" - ")
                if len(parts) >= 2:
                    title = parts[0].split(". ", 1)[1] if ". " in parts[0] else parts[0]
                    location = parts[1]

                    # –ù–∞—Ö–æ–¥–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ—Å—Ç–∞
                    place_coords = self.find_place_coordinates(location, nearby_places)

                    current_event = {
                        "title": title,
                        "location_name": location,
                        "lat": place_coords.get("lat"),
                        "lng": place_coords.get("lng"),
                        "source": "smart_ai",
                    }

            # –í—Ä–µ–º—è
            elif line.startswith("–í—Ä–µ–º—è:"):
                current_event["time"] = line.replace("–í—Ä–µ–º—è:", "").strip()

            # –û–ø–∏—Å–∞–Ω–∏–µ
            elif line.startswith("–û–ø–∏—Å–∞–Ω–∏–µ:"):
                current_event["description"] = line.replace("–û–ø–∏—Å–∞–Ω–∏–µ:", "").strip()

            # –¢–∏–ø
            elif line.startswith("–¢–∏–ø:"):
                current_event["type"] = line.replace("–¢–∏–ø:", "").strip()

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ
        if current_event:
            events.append(current_event)

        return events

    def find_place_coordinates(self, location_name: str, nearby_places: list[dict]) -> dict:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ—Å—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        """
        for place in nearby_places:
            if place["name"].lower() in location_name.lower():
                return {"lat": place["lat"], "lng": place["lng"]}

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –º–µ—Å—Ç–∞
        if nearby_places:
            return {"lat": nearby_places[0]["lat"], "lng": nearby_places[0]["lng"]}

        return {"lat": None, "lng": None}


# –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def test_smart_generator():
    print("üß† –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–º–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–æ–±—ã—Ç–∏–π...")

    generator = SmartEventGenerator()
    events = await generator.generate_smart_events(55.7558, 37.6176, 5, 3)

    print("\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    for i, event in enumerate(events, 1):
        print(f"{i}. {event['title']}")
        print(f"   üìç {event['location_name']}")
        print(f"   ‚è∞ {event.get('time', '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
        print(f"   üìù {event.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
        print(f"   üí∞ {event.get('type', '–¢–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω')}")
        print()


if __name__ == "__main__":
    asyncio.run(test_smart_generator())
