#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –±–æ—Ç–∞
"""

import logging
import os
from datetime import UTC, datetime
from typing import Any

from dotenv import load_dotenv
from sqlalchemy import text

from database import Event, get_session, init_engine

logger = logging.getLogger(__name__)

# –í–∞–ª–∏–¥–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã —Å–æ–±—ã—Ç–∏–π
VALID_STATUSES = ["open", "closed", "canceled", "active", "draft"]

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
STATUS_EMOJIS = {"open": "üü¢", "closed": "üî¥", "canceled": "üö´", "active": "üü°", "draft": "üìù"}

# –û–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
STATUS_DESCRIPTIONS = {
    "open": "–ê–∫—Ç–∏–≤–Ω–æ",
    "closed": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
    "canceled": "–û—Ç–º–µ–Ω–µ–Ω–æ",
    "active": "–ê–∫—Ç–∏–≤–Ω–æ (legacy)",
    "draft": "–ß–µ—Ä–Ω–æ–≤–∏–∫",
}


def get_status_emoji(status: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
    return STATUS_EMOJIS.get(status, "‚ùì")


def get_status_description(status: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
    return STATUS_DESCRIPTIONS.get(status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")


def is_valid_status(status: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–Ω—ã–º"""
    return status in VALID_STATUSES


def auto_close_events() -> int:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–æ–±—ã—Ç–∏–π
    """
    try:
        with get_session() as session:
            result = session.execute(text("SELECT auto_close_events()")).scalar()
            logger.info(f"–ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è: –∑–∞–∫—Ä—ã—Ç–æ {result} —Å–æ–±—ã—Ç–∏–π")
            return result or 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        return 0


def change_event_status(event_id: int, new_status: str, user_id: int) -> bool:
    """
    –ò–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    """
    if not is_valid_status(new_status):
        logger.error(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {new_status}")
        return False

    try:
        with get_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            event = session.query(Event).filter(Event.id == event_id, Event.organizer_id == user_id).first()

            if not event:
                logger.warning(f"–°–æ–±—ã—Ç–∏–µ {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                return False

            old_status = event.status
            event.status = new_status
            event.updated_at_utc = datetime.now(UTC)

            session.commit()
            logger.info(f"–°—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è {event_id} –∏–∑–º–µ–Ω–µ–Ω —Å '{old_status}' –Ω–∞ '{new_status}'")
            return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")
        return False


def get_user_events(user_id: int, status_filter: str | None = None) -> list[dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É
    """
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º engine –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        load_dotenv("app.local.env")
        database_url = os.getenv("DATABASE_URL")
        if database_url:
            init_engine(database_url)

        with get_session() as session:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            if status_filter and is_valid_status(status_filter):
                query = text("""
                    SELECT id, title, description, status, starts_at, location_name,
                           created_at_utc, updated_at_utc
                    FROM events
                    WHERE organizer_id = :user_id AND status = :status
                    ORDER BY created_at_utc DESC
                """)
                result = session.execute(query, {"user_id": user_id, "status": status_filter})
            else:
                query = text("""
                    SELECT id, title, description, status, starts_at, location_name,
                           created_at_utc, updated_at_utc
                    FROM events
                    WHERE organizer_id = :user_id
                    ORDER BY created_at_utc DESC
                """)
                result = session.execute(query, {"user_id": user_id})

            events = result.fetchall()

            result_list = []
            for event in events:
                result_list.append(
                    {
                        "id": event.id,
                        "title": event.title,
                        "description": event.description,
                        "status": event.status,
                        "status_emoji": get_status_emoji(event.status),
                        "status_description": get_status_description(event.status),
                        "starts_at": event.starts_at,
                        "location_name": event.location_name,
                        "created_at_utc": event.created_at_utc,
                        "updated_at_utc": event.updated_at_utc,
                    }
                )

            return result_list

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        import traceback

        traceback.print_exc()
        return []


def get_event_by_id(event_id: int, user_id: int) -> dict[str, Any] | None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        with get_session() as session:
            query = text("""
                SELECT id, title, description, status, starts_at, location_name,
                       created_at_utc, updated_at_utc
                FROM events
                WHERE id = :event_id AND organizer_id = :user_id
            """)
            result = session.execute(query, {"event_id": event_id, "user_id": user_id})
            event = result.fetchone()

            if not event:
                return None

            return {
                "id": event.id,
                "title": event.title,
                "description": event.description,
                "status": event.status,
                "status_emoji": get_status_emoji(event.status),
                "status_description": get_status_description(event.status),
                "starts_at": event.starts_at,
                "location_name": event.location_name,
                "created_at_utc": event.created_at_utc,
                "updated_at_utc": event.updated_at_utc,
            }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")
        return None


def format_event_for_display(event: dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
    """
    lines = []

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
    lines.append(f"{event['status_emoji']} **{event['title']}**")

    # –í—Ä–µ–º—è
    if event["starts_at"]:
        time_str = event["starts_at"].strftime("%d.%m.%Y | %H:%M")
        lines.append(f"üìÖ {time_str}")
    else:
        lines.append("üìÖ –í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ")

    # –ú–µ—Å—Ç–æ
    if event["location_name"]:
        lines.append(f"üìç {event['location_name']}")

    # –°—Ç–∞—Ç—É—Å
    lines.append(f"üìä –°—Ç–∞—Ç—É—Å: {event['status_description']}")

    # –û–ø–∏—Å–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if event["description"]:
        desc = event["description"][:100] + "..." if len(event["description"]) > 100 else event["description"]
        lines.append(f"üìÑ {desc}")

    return "\n".join(lines)


def get_status_change_buttons(event_id: int, current_status: str) -> list[dict[str, str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–±—ã—Ç–∏—è
    """
    buttons = []

    # –ö–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    if current_status == "open":
        buttons.extend(
            [
                {"text": "‚ùå –ó–∞–∫—Ä—ã—Ç—å", "callback_data": f"close_event_{event_id}"},
                {"text": "üö´ –û—Ç–º–µ–Ω–∏—Ç—å", "callback_data": f"cancel_event_{event_id}"},
            ]
        )
    elif current_status == "closed":
        buttons.extend(
            [
                {"text": "‚úÖ –û—Ç–∫—Ä—ã—Ç—å", "callback_data": f"open_event_{event_id}"},
                {"text": "üö´ –û—Ç–º–µ–Ω–∏—Ç—å", "callback_data": f"cancel_event_{event_id}"},
            ]
        )
    elif current_status == "canceled":
        buttons.extend(
            [
                {"text": "‚úÖ –û—Ç–∫—Ä—ã—Ç—å", "callback_data": f"open_event_{event_id}"},
                {"text": "‚ùå –ó–∞–∫—Ä—ã—Ç—å", "callback_data": f"close_event_{event_id}"},
            ]
        )

    # –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞)
    buttons.append({"text": "‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "callback_data": f"edit_event_{event_id}"})

    return buttons


def get_events_statistics(user_id: int) -> dict[str, int]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        with get_session() as session:
            stats = {}

            for status in VALID_STATUSES:
                query = text("""
                    SELECT COUNT(*)
                    FROM events
                    WHERE organizer_id = :user_id AND status = :status
                """)
                result = session.execute(query, {"user_id": user_id, "status": status})
                count = result.scalar() or 0
                stats[status] = count

            return stats

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return {status: 0 for status in VALID_STATUSES}
