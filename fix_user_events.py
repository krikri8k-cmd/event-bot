#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
"""

import asyncio
import logging

from sqlalchemy import text

from config import load_settings
from database import get_engine, init_engine

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def fix_user_events():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –°–û–ë–´–¢–ò–ô")
    print("=" * 50)

    settings = load_settings()
    init_engine(settings.database_url)
    engine = get_engine()

    with engine.begin() as conn:
        # 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        print("\n1Ô∏è‚É£ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–ë–´–¢–ò–ô –ë–ï–ó –ö–û–û–†–î–ò–ù–ê–¢")
        print("-" * 40)

        # –°–æ–±—ã—Ç–∏—è –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ë–∞–ª–∏
        null_coords_count = conn.execute(
            text("""
            UPDATE events_user
            SET lat = -8.5069, lng = 115.2625, country = 'ID', city = 'bali'
            WHERE lat IS NULL OR lng IS NULL
        """)
        ).rowcount

        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {null_coords_count} —Å–æ–±—ã—Ç–∏–π –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ë–∞–ª–∏)")

        # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è —Å NULL —Ä–µ–≥–∏–æ–Ω–∞–º–∏
        print("\n2Ô∏è‚É£ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–ë–´–¢–ò–ô –° NULL –†–ï–ì–ò–û–ù–ê–ú–ò")
        print("-" * 40)

        # –°–æ–±—ã—Ç–∏—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –ë–∞–ª–∏
        bali_events_count = conn.execute(
            text("""
            UPDATE events_user
            SET country = 'ID', city = 'bali'
            WHERE (country IS NULL OR city IS NULL)
            AND lat BETWEEN -9.0 AND -8.0
            AND lng BETWEEN 114.0 AND 116.0
        """)
        ).rowcount

        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {bali_events_count} —Å–æ–±—ã—Ç–∏–π –≤ —Ä–µ–≥–∏–æ–Ω–µ –ë–∞–ª–∏")

        # –°–æ–±—ã—Ç–∏—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –ú–æ—Å–∫–≤—ã
        moscow_events_count = conn.execute(
            text("""
            UPDATE events_user
            SET country = 'RU', city = 'moscow'
            WHERE (country IS NULL OR city IS NULL)
            AND lat BETWEEN 55.0 AND 60.0
            AND lng BETWEEN 35.0 AND 40.0
        """)
        ).rowcount

        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {moscow_events_count} —Å–æ–±—ã—Ç–∏–π –≤ —Ä–µ–≥–∏–æ–Ω–µ –ú–æ—Å–∫–≤–∞")

        # –°–æ–±—ã—Ç–∏—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –°–ü–±
        spb_events_count = conn.execute(
            text("""
            UPDATE events_user
            SET country = 'RU', city = 'spb'
            WHERE (country IS NULL OR city IS NULL)
            AND lat BETWEEN 59.0 AND 60.5
            AND lng BETWEEN 29.0 AND 31.0
        """)
        ).rowcount

        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {spb_events_count} —Å–æ–±—ã—Ç–∏–π –≤ —Ä–µ–≥–∏–æ–Ω–µ –°–ü–±")

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("-" * 40)

        # –°—á–∏—Ç–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        regions = conn.execute(
            text("""
            SELECT country, city, COUNT(*)
            FROM events_user
            GROUP BY country, city
            ORDER BY COUNT(*) DESC
        """)
        ).fetchall()

        print("üåç –°–æ–±—ã—Ç–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        for region in regions:
            print(f"   {region[0] or 'NULL'}/{region[1] or 'NULL'}: {region[2]} —Å–æ–±—ã—Ç–∏–π")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        null_coords = conn.execute(
            text("""
            SELECT COUNT(*)
            FROM events_user
            WHERE lat IS NULL OR lng IS NULL
        """)
        ).scalar()

        print(f"\n‚ö†Ô∏è –°–æ–±—ã—Ç–∏–π –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –æ—Å—Ç–∞–ª–æ—Å—å: {null_coords}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è —Å NULL —Ä–µ–≥–∏–æ–Ω–∞–º–∏
        null_regions = conn.execute(
            text("""
            SELECT COUNT(*)
            FROM events_user
            WHERE country IS NULL OR city IS NULL
        """)
        ).scalar()

        print(f"‚ö†Ô∏è –°–æ–±—ã—Ç–∏–π —Å NULL —Ä–µ–≥–∏–æ–Ω–∞–º–∏ –æ—Å—Ç–∞–ª–æ—Å—å: {null_regions}")

    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    print("\n4Ô∏è‚É£ –¢–ï–°–¢ –ü–û–ò–°–ö–ê –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
    print("-" * 40)

    try:
        from storage.events_service import EventsService
        from storage.region_router import Region

        events_service = EventsService(engine)

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –≤ –ë–∞–ª–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ä–∞–¥–∏—É—Å–æ–º
        bali_lat, bali_lng = -8.65, 115.2167
        test_radius = 20  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–¥–∏—É—Å

        print(f"üîç –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞–¥–∏—É—Å–µ {test_radius} –∫–º –æ—Ç –ë–∞–ª–∏ ({bali_lat}, {bali_lng})")

        bali_events = await events_service.find_events_by_region(
            region=Region.BALI, center_lat=bali_lat, center_lng=bali_lng, radius_km=test_radius, days_ahead=7
        )

        print(f"üåç –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ë–∞–ª–∏: {len(bali_events)}")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
        parser_count = sum(1 for e in bali_events if e.get("event_type") == "parser")
        user_count = sum(1 for e in bali_events if e.get("event_type") == "user")

        print(f"   üìä –ü–∞—Ä—Å–µ—Ä: {parser_count}, üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_count}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–æ–±—ã—Ç–∏–π
        if bali_events:
            print("\nüìã –ü—Ä–∏–º–µ—Ä—ã —Å–æ–±—ã—Ç–∏–π:")
            for event in bali_events:
                print(f"   - '{event['title'][:30]}...' [{event.get('event_type', 'unknown')}]")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    print("\n" + "=" * 50)
    print("üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")

    return True


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await fix_user_events()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)
