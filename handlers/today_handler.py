#!/usr/bin/env python3
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /today –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ (–ú–æ—Å–∫–≤–∞/–°–ü–±) –∏ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞
"""

import logging
from typing import Any

from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from sources.registry import get_sources_by_country
from utils.geo_bounds import is_allowed

logger = logging.getLogger(__name__)

# –†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()

# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–æ–≤
CITY_COORDS = {
    "moscow": (55.7558, 37.6173, "–ú–æ—Å–∫–≤–∞"),
    "spb": (59.9343, 30.3351, "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"),
}

# –†–∞–¥–∏—É—Å—ã –ø–æ–∏—Å–∫–∞
RADIUS_OPTIONS = [5, 10, 15]


@router.message(Command("today"))
async def handle_today_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /today - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üèôÔ∏è –ú–æ—Å–∫–≤–∞", callback_data="today_city_moscow"),
                InlineKeyboardButton(text="üèõÔ∏è –°–ü–±", callback_data="today_city_spb"),
            ]
        ]
    )

    await message.answer(
        "üåç <b>–°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π:",
        reply_markup=keyboard,
        parse_mode="HTML",
    )


@router.callback_query(F.data.startswith("today_city_"))
async def handle_city_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞"""

    city_key = callback.data.replace("today_city_", "")

    if city_key not in CITY_COORDS:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥", show_alert=True)
        return

    lat, lng, city_name = CITY_COORDS[city_key]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–¥–∏—É—Å–∞–º–∏
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="5 –∫–º", callback_data=f"today_radius_{city_key}_5"),
                InlineKeyboardButton(text="10 –∫–º", callback_data=f"today_radius_{city_key}_10"),
                InlineKeyboardButton(text="15 –∫–º", callback_data=f"today_radius_{city_key}_15"),
            ],
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="today_back"),
            ],
        ]
    )

    await callback.message.edit_text(
        f"üåç <b>–°–æ–±—ã—Ç–∏—è –≤ {city_name}</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞:", reply_markup=keyboard, parse_mode="HTML"
    )

    await callback.answer()


@router.callback_query(F.data.startswith("today_radius_"))
async def handle_radius_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–¥–∏—É—Å–∞ –∏ –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π"""

    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: today_radius_{city}_{radius}
        parts = callback.data.split("_")
        city_key = parts[2]
        radius = int(parts[3])

        if city_key not in CITY_COORDS:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥", show_alert=True)
            return

        lat, lng, city_name = CITY_COORDS[city_key]

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loading_message = await callback.message.answer(
            f"üîç –ò—â—É —Å–æ–±—ã—Ç–∏—è –≤ {city_name} –≤ —Ä–∞–¥–∏—É—Å–µ {radius} –∫–º...\n" "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", parse_mode="HTML"
        )

        # –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è
        events = await search_events_for_city(city_key, lat, lng, radius)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        await loading_message.delete()

        if not events:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"today_radius_{city_key}_{radius}"
                        ),
                        InlineKeyboardButton(text="üîô –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥", callback_data="today_back"),
                    ]
                ]
            )

            await callback.message.edit_text(
                f"üòî <b>–°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                f"–í {city_name} –≤ —Ä–∞–¥–∏—É—Å–µ {radius} –∫–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞\n"
                "‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ",
                reply_markup=keyboard,
                parse_mode="HTML",
            )
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–±—ã—Ç–∏—è–º–∏
            events_text = format_events_message(events, city_name, radius)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"today_radius_{city_key}_{radius}"),
                        InlineKeyboardButton(text="üîô –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥", callback_data="today_back"),
                    ]
                ]
            )

            await callback.message.edit_text(events_text, reply_markup=keyboard, parse_mode="HTML")

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏–π: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ", show_alert=True)


@router.callback_query(F.data == "today_back")
async def handle_back_to_cities(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' - –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üèôÔ∏è –ú–æ—Å–∫–≤–∞", callback_data="today_city_moscow"),
                InlineKeyboardButton(text="üèõÔ∏è –°–ü–±", callback_data="today_city_spb"),
            ]
        ]
    )

    await callback.message.edit_text(
        "üåç <b>–°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π:",
        reply_markup=keyboard,
        parse_mode="HTML",
    )

    await callback.answer()


async def search_events_for_city(city_key: str, lat: float, lng: float, radius: int) -> list[dict[str, Any]]:
    """–ò—â–µ—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏ —Ä–∞–¥–∏—É—Å–∞"""

    all_events = []

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –†–æ—Å—Å–∏–∏
        ru_sources = get_sources_by_country("RU")

        if not ru_sources:
            logger.info("–ù–µ—Ç –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –†–æ—Å—Å–∏–∏")
            return []

        # –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–∂–¥–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ
        for source in ru_sources:
            try:
                logger.info(f"–ò—â–µ–º —Å–æ–±—ã—Ç–∏—è –≤ {source.display_name} –¥–ª—è {city_key}")
                events = await source.fetch_events(lat, lng, radius)

                # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≥–µ–æ-–≥—Ä–∞–Ω–∏—Ü–∞–º
                filtered_events = []
                for event in events:
                    event_lat = event.get("lat")
                    event_lng = event.get("lng")
                    country_code = event.get("country_code", "RU")

                    if event_lat and event_lng:
                        if is_allowed(event_lat, event_lng, country_code):
                            filtered_events.append(event)
                        else:
                            logger.debug(f"–°–æ–±—ã—Ç–∏–µ {event.get('title', 'Unknown')} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –≥–µ–æ-—Ñ–∏–ª—å—Ç—Ä–æ–º")
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                        logger.debug(f"–°–æ–±—ã—Ç–∏–µ {event.get('title', 'Unknown')} –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")

                all_events.extend(filtered_events)
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(filtered_events)} —Å–æ–±—ã—Ç–∏–π –≤ {source.display_name}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ {source.display_name}: {e}")
                continue

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        all_events.sort(key=lambda x: x.get("start_ts", 0))

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
        max_events = 20
        if len(all_events) > max_events:
            all_events = all_events[:max_events]

        logger.info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(all_events)} —Å–æ–±—ã—Ç–∏–π –¥–ª—è {city_key}")
        return all_events

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è {city_key}: {e}")
        return []


def format_events_message(events: list[dict[str, Any]], city_name: str, radius: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ–±—ã—Ç–∏–π"""

    if not events:
        return f"üòî –í {city_name} –≤ —Ä–∞–¥–∏—É—Å–µ {radius} –∫–º —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    message_parts = [f"üéâ <b>–°–æ–±—ã—Ç–∏—è –≤ {city_name}</b>", f"üìç –í —Ä–∞–¥–∏—É—Å–µ {radius} –∫–º –Ω–∞–π–¥–µ–Ω–æ: <b>{len(events)}</b>", ""]

    # –°–æ–±—ã—Ç–∏—è
    for i, event in enumerate(events, 1):
        title = event.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        venue = event.get("venue", {}).get("name", "")
        address = event.get("venue", {}).get("address", "")
        source_url = event.get("source_url", "")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        start_ts = event.get("start_ts")
        time_str = ""
        if start_ts:
            from datetime import datetime

            try:
                dt = datetime.fromtimestamp(start_ts)
                time_str = f"üïê {dt.strftime('%H:%M')}"
            except (ValueError, OSError):
                time_str = "üïê –í—Ä–µ–º—è —É—Ç–æ—á–Ω—è–µ—Ç—Å—è"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å–æ–±—ã—Ç–∏—è
        event_parts = [f"<b>{i}. {title}</b>"]

        if time_str:
            event_parts.append(time_str)

        if venue:
            event_parts.append(f"üìç {venue}")

        if address:
            event_parts.append(f"üè† {address}")

        if source_url:
            event_parts.append(f"üîó <a href='{source_url}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>")

        message_parts.append("\n".join(event_parts))
        message_parts.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏

    return "\n".join(message_parts)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ—É—Ç–µ—Ä–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ
def register_today_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã /today –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ"""
    dp.include_router(router)
