#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤ –ë–î
"""

import asyncio
import logging

from sqlalchemy import text

from config import load_settings
from database import get_engine, init_engine
from utils.parser_integration import ParserIntegration
from utils.simple_timezone import get_city_from_coordinates

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def test_parser_save():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
    print("üß™ –¢–ï–°–¢ –°–û–•–†–ê–ù–ï–ù–ò–Ø –ü–ê–†–°–ï–†–ù–´–• –°–û–ë–´–¢–ò–ô –í –ë–î")
    print("=" * 60)

    settings = load_settings()
    init_engine(settings.database_url)
    engine = get_engine()

    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_lat = -8.675326
    test_lng = 115.230191
    test_city = get_city_from_coordinates(test_lat, test_lng)

    print(f"üìç –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({test_lat}, {test_lng})")
    print(f"üåç –û–ø—Ä–µ–¥–µ–ª–µ–Ω –≥–æ—Ä–æ–¥: {test_city}")
    print()

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î
    print("1Ô∏è‚É£ –°–û–°–¢–û–Ø–ù–ò–ï –ë–î –î–û –ü–ê–†–°–ò–ù–ì–ê")
    print("-" * 30)

    with engine.connect() as conn:
        parser_result = conn.execute(
            text("""
            SELECT COUNT(*) FROM events_parser
            WHERE city = :city
        """),
            {"city": test_city},
        ).fetchone()

        print(f"üìä –ü–∞—Ä—Å–µ—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤ {test_city}: {parser_result[0]}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        if parser_result[0] > 0:
            result = conn.execute(
                text("""
                SELECT source, COUNT(*) as count
                FROM events_parser
                WHERE city = :city
                GROUP BY source
                ORDER BY count DESC
            """),
                {"city": test_city},
            ).fetchall()

            print("üìã –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
            for row in result:
                print(f"   - {row[0]}: {row[1]} —Å–æ–±—ã—Ç–∏–π")

        print()

    # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏—è
    print("2Ô∏è‚É£ –ó–ê–ü–£–°–ö –ü–ê–†–°–ï–†–û–í –ò –°–û–•–†–ê–ù–ï–ù–ò–ï")
    print("-" * 30)

    try:
        parser_integration = ParserIntegration()
        results = await parser_integration.run_parsers_and_save(lat=test_lat, lng=test_lng, radius_km=15)

        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞:")
        total_saved = 0
        for source, count in results.items():
            print(f"   - {source}: {count} —Å–æ–±—ã—Ç–∏–π")
            total_saved += count

        print(f"üéØ –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {total_saved} —Å–æ–±—ã—Ç–∏–π")
        print()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        logger.exception("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")
        return

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
    print("3Ô∏è‚É£ –°–û–°–¢–û–Ø–ù–ò–ï –ë–î –ü–û–°–õ–ï –ü–ê–†–°–ò–ù–ì–ê")
    print("-" * 30)

    with engine.connect() as conn:
        parser_result = conn.execute(
            text("""
            SELECT COUNT(*) FROM events_parser
            WHERE city = :city
        """),
            {"city": test_city},
        ).fetchone()

        print(f"üìä –ü–∞—Ä—Å–µ—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤ {test_city}: {parser_result[0]}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        if parser_result[0] > 0:
            result = conn.execute(
                text("""
                SELECT source, COUNT(*) as count
                FROM events_parser
                WHERE city = :city
                GROUP BY source
                ORDER BY count DESC
            """),
                {"city": test_city},
            ).fetchall()

            print("üìã –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
            for row in result:
                print(f"   - {row[0]}: {row[1]} —Å–æ–±—ã—Ç–∏–π")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–æ–±—ã—Ç–∏–π
            result = conn.execute(
                text("""
                SELECT title, source, starts_at
                FROM events_parser
                WHERE city = :city
                ORDER BY starts_at
                LIMIT 3
            """),
                {"city": test_city},
            ).fetchall()

            print("üìù –ü—Ä–∏–º–µ—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π:")
            for row in result:
                print(f"   - '{row[0]}' ({row[1]}) - {row[2]}")

        print()

    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π VIEW events_all
    print("4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê VIEW events_all")
    print("-" * 30)

    with engine.connect() as conn:
        all_result = conn.execute(
            text("""
            SELECT COUNT(*) FROM events_all
            WHERE city = :city
        """),
            {"city": test_city},
        ).fetchone()

        print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –≤ {test_city}: {all_result[0]}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ —Ç–∏–ø–∞–º
        result = conn.execute(
            text("""
            SELECT source_type, COUNT(*) as count
            FROM events_all
            WHERE city = :city
            GROUP BY source_type
            ORDER BY count DESC
        """),
            {"city": test_city},
        ).fetchall()

        print("üìã –ü–æ —Ç–∏–ø–∞–º:")
        for row in result:
            print(f"   - {row[0]}: {row[1]} —Å–æ–±—ã—Ç–∏–π")

        print()

    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
    print("5Ô∏è‚É£ –¢–ï–°–¢ –ü–û–ò–°–ö–ê –ß–ï–†–ï–ó –ù–û–í–´–ô –°–ï–†–í–ò–°")
    print("-" * 30)

    try:
        from utils.ultra_simple_events import UltraSimpleEventsService

        events_service = UltraSimpleEventsService(engine)
        events = events_service.search_events_today(city=test_city, user_lat=test_lat, user_lng=test_lng, radius_km=15)

        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        sources = {}
        for event in events:
            source = event["source_type"]
            if source not in sources:
                sources[source] = 0
            sources[source] += 1

        print("üìã –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
        for source, count in sources.items():
            print(f"   - {source}: {count} —Å–æ–±—ã—Ç–∏–π")

        print()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        logger.exception("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞")
        print()

    print("=" * 60)
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    if total_saved > 0:
        print("‚úÖ –ü–∞—Ä—Å–µ—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î!")
        print("‚úÖ –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ events_all —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤ —Å –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        print("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–æ–≤")


if __name__ == "__main__":
    asyncio.run(test_parser_save())
