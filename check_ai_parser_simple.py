#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ AI –ø–∞—Ä—Å–µ—Ä–∞
"""

import asyncio
import logging

from sqlalchemy import text

from config import load_settings
from database import get_engine, init_engine

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def check_ai_parser_simple():
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ AI –ø–∞—Ä—Å–µ—Ä–∞"""
    print("ü§ñ –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê AI –ü–ê–†–°–ï–†–ê")
    print("=" * 50)

    settings = load_settings()
    init_engine(settings.database_url)
    engine = get_engine()

    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_lat = -8.679649
    user_lon = 115.230388

    print(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ({user_lat}, {user_lon})")
    print()

    with engine.connect() as conn:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ events_parser –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        print("1Ô∏è‚É£ –°–û–ë–´–¢–ò–Ø –í EVENTS_PARSER")
        print("-" * 30)

        try:
            # –í—Å–µ —Å–æ–±—ã—Ç–∏—è –≤ events_parser
            all_parser_events = conn.execute(
                text("""
                SELECT id, title, starts_at, lat, lng, created_at_utc
                FROM events_parser
                ORDER BY created_at_utc DESC
                LIMIT 10
            """)
            ).fetchall()

            print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –≤ events_parser: {len(all_parser_events)}")
            for event in all_parser_events:
                print(f"   ID {event[0]}: '{event[1]}' - {event[2]}")
                print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({event[3]}, {event[4]})")

            print()

            # –°–æ–±—ã—Ç–∏—è –≤ –±—É–¥—É—â–µ–º (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            future_events = conn.execute(
                text("""
                SELECT id, title, starts_at, lat, lng
                FROM events_parser
                WHERE starts_at > NOW()
                ORDER BY starts_at
                LIMIT 10
            """)
            ).fetchall()

            print(f"üìä –°–æ–±—ã—Ç–∏–π –≤ –±—É–¥—É—â–µ–º: {len(future_events)}")
            for event in future_events:
                print(f"   ID {event[0]}: '{event[1]}' - {event[2]}")
                print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({event[3]}, {event[4]})")

            print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ events_parser: {e}")
            print()

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ events
        print("2Ô∏è‚É£ –°–û–ë–´–¢–ò–Ø –í EVENTS")
        print("-" * 30)

        try:
            # –í—Å–µ —Å–æ–±—ã—Ç–∏—è –≤ events
            all_events = conn.execute(
                text("""
                SELECT id, title, starts_at, lat, lng, created_at_utc
                FROM events
                ORDER BY created_at_utc DESC
                LIMIT 10
            """)
            ).fetchall()

            print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –≤ events: {len(all_events)}")
            for event in all_events:
                print(f"   ID {event[0]}: '{event[1]}' - {event[2]}")
                print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({event[3]}, {event[4]})")

            print()

            # –°–æ–±—ã—Ç–∏—è –≤ –±—É–¥—É—â–µ–º
            future_events = conn.execute(
                text("""
                SELECT id, title, starts_at, lat, lng
                FROM events
                WHERE starts_at > NOW()
                ORDER BY starts_at
                LIMIT 10
            """)
            ).fetchall()

            print(f"üìä –°–æ–±—ã—Ç–∏–π –≤ –±—É–¥—É—â–µ–º: {len(future_events)}")
            for event in future_events:
                print(f"   ID {event[0]}: '{event[1]}' - {event[2]}")
                print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({event[3]}, {event[4]})")

            print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ events: {e}")
            print()

        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –ø–∞—Ä—Å–µ—Ä –Ω–∞–ø—Ä—è–º—É—é
        print("3Ô∏è‚É£ –¢–ï–°–¢ AI –ü–ê–†–°–ï–†–ê")
        print("-" * 30)

        try:
            from ai_utils import fetch_ai_events_nearby

            print("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º AI –ø–∞—Ä—Å–µ—Ä...")
            ai_events = await fetch_ai_events_nearby(user_lat, user_lon)

            print(f"üìä AI –ø–∞—Ä—Å–µ—Ä –Ω–∞—à–µ–ª {len(ai_events)} —Å–æ–±—ã—Ç–∏–π")

            if len(ai_events) == 0:
                print("‚ùå AI –ø–∞—Ä—Å–µ—Ä –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç —Å–æ–±—ã—Ç–∏—è!")
                print("üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                print("   1. AI –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç —Å–æ–±—ã—Ç–∏—è –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ")
                print("   2. AI –Ω–∞—Ö–æ–¥–∏—Ç —Å–æ–±—ã—Ç–∏—è, –Ω–æ –æ–Ω–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
                print("   3. –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏–ª–∏ —Ä–∞–¥–∏—É—Å–æ–º")
                print("   4. –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∑–æ–Ω–∞–º–∏")
            else:
                for i, event in enumerate(ai_events, 1):
                    print(f"   {i}. '{event.get('title', 'N/A')}'")
                    print(f"      –û–ø–∏—Å–∞–Ω–∏–µ: {event.get('description', 'N/A')[:50]}...")
                    print(f"      –í—Ä–µ–º—è: {event.get('time_local', 'N/A')}")
                    print(f"      –õ–æ–∫–∞—Ü–∏—è: {event.get('location_name', 'N/A')}")
                    print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({event.get('lat', 'N/A')}, {event.get('lng', 'N/A')})")
                    print()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ AI –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
            logger.exception("–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:")
            print()

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        print("4Ô∏è‚É£ –ù–ê–°–¢–†–û–ô–ö–ò")
        print("-" * 30)

        print(f"üìä AI_PARSE_ENABLE: {settings.ai_parse_enable}")
        print(f"üìä STRICT_SOURCE_ONLY: {settings.strict_source_only}")
        print(f"üìä ENABLE_BALIFORUM: {settings.enable_baliforum}")
        print()

    print("=" * 50)
    print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å –ø–æ—á–µ–º—É AI –ø–∞—Ä—Å–µ—Ä –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç —Å–æ–±—ã—Ç–∏—è")
    print("2. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI")
    print("3. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏ AI –ø–∞—Ä—Å–µ—Ä–∞")
    print("4. –ü—Ä–æ–≤–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –¥–ª—è AI")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await check_ai_parser_simple()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)
