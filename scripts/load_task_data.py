#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ –∑–∞–¥–∞–Ω–∏–π –∏ –º–µ—Å—Ç –≤ –ë–î
"""

import json
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

from config import load_settings
from database import TaskPlace, TaskTemplate, get_session, init_engine


def load_task_templates():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –∑–∞–¥–∞–Ω–∏–π –∏–∑ JSON"""
    templates_path = Path(__file__).parent.parent / "seeds" / "task_templates.json"

    if not templates_path.exists():
        print(f"‚ùå –§–∞–π–ª {templates_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    with open(templates_path, encoding="utf-8") as f:
        templates_data = json.load(f)

    with get_session() as session:
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —à–∞–±–ª–æ–Ω—ã
        session.query(TaskTemplate).delete()

        for template_data in templates_data:
            template = TaskTemplate(
                category=template_data["category"],
                place_type=template_data["place_type"],
                title=template_data["title"],
                description=template_data["description"],
                rocket_value=template_data["rocket_value"],
            )
            session.add(template)

        session.commit()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(templates_data)} —à–∞–±–ª–æ–Ω–æ–≤ –∑–∞–¥–∞–Ω–∏–π")

    return True


def load_task_places():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Å—Ç–∞ –∏–∑ JSON"""
    places_path = Path(__file__).parent.parent / "seeds" / "bali_places.json"

    if not places_path.exists():
        print(f"‚ùå –§–∞–π–ª {places_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    with open(places_path, encoding="utf-8") as f:
        places_data = json.load(f)

    with get_session() as session:
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Å—Ç–∞
        session.query(TaskPlace).delete()

        for place_data in places_data:
            place = TaskPlace(
                category=place_data["category"],
                name=place_data["name"],
                description=place_data["description"],
                lat=place_data["lat"],
                lng=place_data["lng"],
                google_maps_url=place_data["google_maps_url"],
                is_active=True,
            )
            session.add(place)

        session.commit()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(places_data)} –º–µ—Å—Ç")

    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ '–¶–µ–ª—å –Ω–∞ –†–∞–π–æ–Ω–µ'")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    settings = load_settings()
    init_engine(settings.database_url)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    success = True
    success &= load_task_templates()
    success &= load_task_places()

    if success:
        print("üéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
    else:
        print("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")
        sys.exit(1)


if __name__ == "__main__":
    main()
