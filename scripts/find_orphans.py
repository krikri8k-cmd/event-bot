#!/usr/bin/env python3
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤-—Å–∏—Ä–æ—Ç (–Ω–∏–∫—Ç–æ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç)"""

import glob
import os
import re


def find_python_files():
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ Python —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
    python_files = []
    for pattern in ["**/*.py"]:
        for file in glob.glob(pattern, recursive=True):
            if not any(skip in file for skip in ["__pycache__", ".git", "venv", "reports"]):
                python_files.append(file)
    return python_files


def extract_imports(file_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –∏–∑ Python —Ñ–∞–π–ª–∞"""
    imports = set()
    try:
        with open(file_path, encoding="utf-8") as f:
            content = f.read()

        # –ò—â–µ–º –∏–º–ø–æ—Ä—Ç—ã
        import_patterns = [
            r"from\s+(\w+(?:\.\w+)*)\s+import",
            r"import\s+(\w+(?:\.\w+)*)",
        ]

        for pattern in import_patterns:
            matches = re.findall(pattern, content)
            imports.update(matches)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")

    return imports


def find_orphans():
    """–ù–∞—Ö–æ–¥–∏—Ç —Ñ–∞–π–ª—ã-—Å–∏—Ä–æ—Ç—ã"""
    python_files = find_python_files()

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã
    all_imports = set()
    file_modules = {}

    for file_path in python_files:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –º–æ–¥—É–ª—è
        module_name = file_path.replace("/", ".").replace("\\", ".").replace(".py", "")
        if module_name.endswith(".__init__"):
            module_name = module_name[:-9]

        file_modules[file_path] = module_name

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã
        imports = extract_imports(file_path)
        all_imports.update(imports)

    # –ò—â–µ–º —Å–∏—Ä–æ—Ç
    orphans = []
    for file_path, module_name in file_modules.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω–∏ –º–æ–¥—É–ª—è
        module_variants = [
            module_name,
            module_name.split(".")[-1],  # —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å
            os.path.basename(file_path).replace(".py", ""),  # –∏–º—è —Ñ–∞–π–ª–∞
        ]

        is_imported = any(variant in all_imports for variant in module_variants)

        # –ò—Å–∫–ª—é—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
        is_main = any(
            main in file_path
            for main in [
                "bot_enhanced_v3.py",
                "app.py",
                "__main__.py",
                "run_",
                "start_",
                "check_",
                "test_",
                "apply_",
                "setup_",
            ]
        )

        if not is_imported and not is_main:
            orphans.append((file_path, module_name))

    return orphans


def main():
    print("üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤-—Å–∏—Ä–æ—Ç...")
    orphans = find_orphans()

    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏—Ä–æ—Ç: {len(orphans)}")
    print("\n=== –§–ê–ô–õ–´-–°–ò–†–û–¢–´ ===")

    for file_path, module_name in orphans:
        file_size = os.path.getsize(file_path)
        print(f"üìÑ {file_path}")
        print(f"   –ú–æ–¥—É–ª—å: {module_name}")
        print(f"   –†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
        print()


if __name__ == "__main__":
    main()
