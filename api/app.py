from __future__ import annotations

import logging
import os

from fastapi import APIRouter, FastAPI, HTTPException, Query
from sqlalchemy import create_engine, text
from sqlalchemy.engine import Engine

from config import load_settings

logger = logging.getLogger(__name__)


_engine: Engine | None = None


def get_engine() -> Engine:
    """–°–æ–∑–¥–∞—ë—Ç Engine –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ –ø–µ—Ä–≤–æ–º—É –≤—ã–∑–æ–≤—É, –±–µ—Ä—è —Å—Ç—Ä–æ–∫—É –∏–∑ config."""
    global _engine
    if _engine is None:
        from config import load_settings

        settings = load_settings()
        if not settings.database_url:
            raise RuntimeError("DATABASE_URL is not set")
        _engine = create_engine(settings.database_url, future=True, pool_pre_ping=True)
    return _engine


def create_app() -> FastAPI:
    logger.info("üöÄ Creating FastAPI application...")
    app = FastAPI(title="EventBot API (CI)")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    logger.info("üìã Loading settings...")
    settings = load_settings()
    logger.info("‚úÖ Settings loaded successfully")

    # –ê–¥–º–∏–Ω —Ä–æ—É—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
    logger.info("üîß Mounting admin router...")
    from api.admin import router as admin_router

    app.include_router(admin_router, prefix="/admin", tags=["admin"])
    logger.info("‚úÖ Admin router mounted")

    # Meetup OAuth —Ä–æ—É—Ç–µ—Ä (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
    if settings.enable_meetup_api:
        oauth_router = APIRouter(prefix="/oauth/meetup", tags=["oauth"])

        @oauth_router.get("/login")
        async def meetup_login():
            from api.oauth_meetup import MeetupOAuth

            mgr = MeetupOAuth()
            if not mgr.client_id:
                raise HTTPException(status_code=500, detail="MEETUP_CLIENT_ID is not configured")
            return {"authorize_url": mgr.authorize_url()}

        @oauth_router.get("/callback")
        async def meetup_callback(
            code: str | None = Query(default=None, description="Authorization code"),
            state: str | None = Query(default=None),
            error: str | None = Query(default=None),
        ):
            """
            OAuth –∫–æ–ª–±—ç–∫ –¥–ª—è Meetup: –æ–±–º–µ–Ω –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω—ã –∏–ª–∏ –º–æ–∫-—Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            """
            if error:
                raise HTTPException(status_code=400, detail=f"Meetup error: {error}")
            if not code:
                raise HTTPException(status_code=400, detail="Missing code")

            # –ú–æ–∫-—Ä–µ–∂–∏–º –¥–ª—è –ª–æ–∫–∞–ª–∫–∏/—Ç–µ—Å—Ç–æ–≤
            if os.getenv("MEETUP_MOCK", "0") == "1":
                return {"ok": True, "code": code, "state": state, "mock": True}

            # –ë–æ–µ–≤–æ–π –ø—É—Ç—å: –æ–±–º–µ–Ω –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω—ã
            try:
                from api.oauth_meetup import MeetupOAuth

                mgr = MeetupOAuth()
                bundle = await mgr.exchange_code(code)

                # ‚ö†Ô∏è –û—Å–æ–∑–Ω–∞–Ω–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –ü–û–õ–ù–´–ï –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å (—á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∏—Ö —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å).
                logger.info("MEETUP_ACCESS_TOKEN=%s", bundle.access_token)
                logger.info("MEETUP_REFRESH_TOKEN=%s", bundle.refresh_token)

                return {
                    "ok": True,
                    "code": code,
                    "state": state,
                    "preview": MeetupOAuth.mask_preview(bundle),
                    "note": "–°–∫–æ–ø–∏—Ä—É–π –ü–û–õ–ù–´–ï —Ç–æ–∫–µ–Ω—ã –∏–∑ –ª–æ–≥–æ–≤ uvicorn –∏ –¥–æ–±–∞–≤—å –∏—Ö –≤ .env.local",
                    "env_keys": ["MEETUP_ACCESS_TOKEN", "MEETUP_REFRESH_TOKEN"],
                }
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω—ã: %s", e)
                raise HTTPException(status_code=500, detail=f"Failed to exchange code: {str(e)}")

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º OAuth —Ä–æ—É—Ç–µ—Ä
        app.include_router(oauth_router)

    @app.get("/health")
    def health():
        logger.info("üè• Health check requested")
        return {"status": "ok"}

    @app.get("/click")
    async def track_click(
        user_id: int = Query(..., description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"),
        event_id: int = Query(..., description="ID —Å–æ–±—ã—Ç–∏—è"),
        click_type: str = Query(..., description="–¢–∏–ø –∫–ª–∏–∫–∞: source –∏–ª–∏ route"),
        target_url: str = Query(..., description="URL –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ (encoded)"),
    ):
        """
        –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–∫–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–æ–±—ã—Ç–∏—è–º–∏.
        """
        from urllib.parse import unquote

        from fastapi.responses import RedirectResponse

        from utils.user_participation_analytics import UserParticipationAnalytics

        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º target_url
            decoded_url = unquote(target_url)

            # –í–∞–ª–∏–¥–∞—Ü–∏—è click_type
            if click_type not in ["source", "route"]:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–ª–∏–∫–∞: {click_type}")
                # –í—Å–µ —Ä–∞–≤–Ω–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º, –Ω–æ –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º
                return RedirectResponse(url=decoded_url, status_code=302)

            # –õ–æ–≥–∏—Ä—É–µ–º –∫–ª–∏–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            engine = get_engine()
            analytics = UserParticipationAnalytics(engine)

            if click_type == "source":
                analytics.record_click_source(user_id, event_id)
                logger.info(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω click_source: user_id={user_id}, event_id={event_id}")
            elif click_type == "route":
                analytics.record_click_route(user_id, event_id)
                logger.info(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω click_route: user_id={user_id}, event_id={event_id}")

            # –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL
            return RedirectResponse(url=decoded_url, status_code=302)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∏–∫–∞: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç—å, –µ—Å–ª–∏ URL –≤–∞–ª–∏–¥–Ω—ã–π
            try:
                decoded_url = unquote(target_url)
                return RedirectResponse(url=decoded_url, status_code=302)
            except Exception:
                from fastapi.responses import JSONResponse

                return JSONResponse(status_code=500, content={"error": "Failed to process click tracking"})

    @app.get("/db/ping")
    def db_ping():
        with get_engine().connect() as conn:
            val = conn.execute(text("SELECT 1")).scalar_one()
        return {"db": "ok", "value": int(val)}

    @app.get("/events/nearby")
    def events_nearby(lat: float, lng: float, radius_km: float = 5, limit: int = 50, offset: int = Query(0, ge=0)):
        """–ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π –≤ —Ä–∞–¥–∏—É—Å–µ –æ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å —Ç–æ—á–Ω—ã–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º"""
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not (-90 <= lat <= 90):
            raise HTTPException(status_code=400, detail="lat must be between -90 and 90")
        if not (-180 <= lng <= 180):
            raise HTTPException(status_code=400, detail="lng must be between -180 and 180")
        if not (1 <= radius_km <= 20):
            raise HTTPException(status_code=400, detail="radius_km must be between 1 and 20")
        if not (1 <= limit <= 100):
            raise HTTPException(status_code=400, detail="limit must be between 1 and 100")

        with get_engine().connect() as conn:
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫—É –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            delta = radius_km / 111  # –ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö

            # –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≥–∞–≤–µ—Ä—Å–∏–Ω—É —Å distance_km
            rows = (
                conn.execute(
                    text("""
                  SELECT
                    id, title, lat, lng, starts_at, created_at,
                    6371 * 2 * ASIN(
                      SQRT(
                        POWER(SIN(RADIANS((:lat - lat) / 2)), 2) +
                        COS(RADIANS(:lat)) * COS(RADIANS(lat)) *
                        POWER(SIN(RADIANS((:lng - lng) / 2)), 2)
                      )
                    ) AS distance_km
                  FROM events
                  WHERE lat BETWEEN :lat - :d AND :lat + :d
                    AND lng BETWEEN :lng - :d AND :lng + :d
                    AND (
                      6371 * 2 * ASIN(
                        SQRT(
                          POWER(SIN(RADIANS((:lat - lat) / 2)), 2) +
                          COS(RADIANS(:lat)) * COS(RADIANS(lat)) *
                          POWER(SIN(RADIANS((:lng - lng) / 2)), 2)
                        )
                      )
                    ) <= :radius_km
                  ORDER BY distance_km, starts_at NULLS LAST, id
                  LIMIT :limit OFFSET :offset
                """),
                    {
                        "lat": lat,
                        "lng": lng,
                        "d": delta,
                        "radius_km": radius_km,
                        "limit": limit,
                        "offset": offset,
                    },
                )
                .mappings()
                .all()
            )

            events = [dict(r) for r in rows]
            return {"items": events, "count": len(events)}

    # Meetup sync endpoint (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
    if settings.enable_meetup_api:

        @app.post("/events/sources/meetup/sync")
        async def sync_meetup(lat: float, lng: float, radius_km: float = 5.0):
            """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –∏–∑ Meetup API"""
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not (-90 <= lat <= 90):
                raise HTTPException(status_code=400, detail="lat must be between -90 and 90")
            if not (-180 <= lng <= 180):
                raise HTTPException(status_code=400, detail="lng must be between -180 and 180")
            if not (1 <= radius_km <= 20):
                raise HTTPException(status_code=400, detail="radius_km must be between 1 and 20")

            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ Meetup
                import sources.meetup
                from ingest import upsert_events

                events = await sources.meetup.fetch(lat, lng, radius_km)

                # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                engine = get_engine()
                inserted_count = upsert_events(events, engine)

                return {"inserted": inserted_count}

            except Exception as e:
                return {"error": str(e), "inserted": 0}

    # BaliForum sync endpoint (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
    if settings.enable_baliforum:

        @app.post("/events/sources/baliforum/sync")
        async def sync_baliforum(lat: float, lng: float, radius_km: float = 5.0):
            """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –∏–∑ BaliForum"""
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not (-90 <= lat <= 90):
                raise HTTPException(status_code=400, detail="lat must be between -90 and 90")
            if not (-180 <= lng <= 180):
                raise HTTPException(status_code=400, detail="lng must be between -180 and 180")
            if not (1 <= radius_km <= 20):
                raise HTTPException(status_code=400, detail="radius_km must be between 1 and 20")

            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ BaliForum
                import sources.baliforum
                from ingest import upsert_events

                events = sources.baliforum.fetch(limit=100)

                # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                engine = get_engine()
                inserted_count = upsert_events(events, engine)

                return {"inserted": inserted_count}

            except Exception as e:
                return {"error": str(e), "inserted": 0}

    logger.info("‚úÖ FastAPI application created successfully")
    logger.info("üè• Health endpoint mounted at /health")
    return app


# –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤ —Ç–∏–ø–∞ "from api.app import app"
app = create_app()

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
try:
    from scheduler import start_scheduler

    start_scheduler()
except Exception:
    # –≤ CI –º–æ–∂–Ω–æ –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å; –ª–∏–±–æ –ª–æ–≥–∏—Ä—É–µ–º
    pass
